<?xml version="1.0"?><DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts" DTS:ExecutableType="SSIS.Package.2">
<DTS:Property DTS:Name="PackageFormatVersion">3</DTS:Property>
<DTS:Property DTS:Name="VersionComments"></DTS:Property>
<DTS:Property DTS:Name="CreatorName">TSYDEV\tfs_l048057</DTS:Property>
<DTS:Property DTS:Name="CreatorComputerName">AU2104SDVDEV23</DTS:Property>
<DTS:Property DTS:Name="CreationDate" DTS:DataType="7">10/3/2014 4:59:15 PM</DTS:Property>
<DTS:Property DTS:Name="PackageType">5</DTS:Property>
<DTS:Property DTS:Name="ProtectionLevel">1</DTS:Property>
<DTS:Property DTS:Name="MaxConcurrentExecutables">1</DTS:Property>
<DTS:Property DTS:Name="PackagePriorityClass">0</DTS:Property>
<DTS:Property DTS:Name="VersionMajor">1</DTS:Property>
<DTS:Property DTS:Name="VersionMinor">0</DTS:Property>
<DTS:Property DTS:Name="VersionBuild">471</DTS:Property>
<DTS:Property DTS:Name="VersionGUID">{6FE03033-28CA-45AD-9603-2410AF10F7A6}</DTS:Property>
<DTS:Property DTS:Name="EnableConfig">0</DTS:Property>
<DTS:Property DTS:Name="CheckpointFileName"></DTS:Property>
<DTS:Property DTS:Name="SaveCheckpoints">0</DTS:Property>
<DTS:Property DTS:Name="CheckpointUsage">0</DTS:Property>
<DTS:Property DTS:Name="SuppressConfigurationWarnings">0</DTS:Property>
<DTS:ConnectionManager>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">OLEDB</DTS:Property><DTS:PropertyExpression DTS:Name="ConnectionString">@[User::OLEDBConnString_DAL_SEC]</DTS:PropertyExpression><DTS:ObjectData><DTS:ConnectionManager>
<DTS:Property DTS:Name="Retain">0</DTS:Property>
<DTS:Property DTS:Name="ConnectionString">Data Source=AU2104SDSSQL01\DAL_SEC;Initial Catalog=DAL_SEC;Provider=SQLNCLI10.1;Integrated Security=SSPI;</DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:ConnectionManager>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">TrustWaterfall</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6A53CA12-77F5-463F-A78C-16B929DF2CAA}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">FILE</DTS:Property><DTS:PropertyExpression DTS:Name="ConnectionString">@[User::LogPath] + @[System::PackageName] + "_" +  (DT_WSTR, 4)DATEPART("yyyy", @[System::StartTime]) + RIGHT("0" + (DT_WSTR, 2)DATEPART("mm", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("dd", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("hh", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("mi", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("ss", @[System::StartTime]), 2)  +  ".log"</DTS:PropertyExpression><DTS:ObjectData><DTS:ConnectionManager>
<DTS:Property DTS:Name="FileUsageType">1</DTS:Property>
<DTS:Property DTS:Name="ConnectionString">E:\TSSWCFServices\TaskProcessServices\R4.Task\Logs\TrustWaterfall_20150119154720.log</DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:ConnectionManager>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VAriableSetItemLookup</DTS:Property>
<DTS:Property DTS:Name="DTSID">{35270CD3-4C05-4D9A-9A4F-43E82DDC69A5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">CACHE</DTS:Property><DTS:ObjectData><DTS:ConnectionManager>
<DTS:Property DTS:Name="UseFile">0</DTS:Property>
<DTS:Property DTS:Name="UseEncryption">0</DTS:Property>
<DTS:Property DTS:Name="RetainData">-1</DTS:Property>
<DTS:CacheColumn>
<DTS:Property DTS:Name="DataType">3</DTS:Property>
<DTS:Property DTS:Name="Length">0</DTS:Property>
<DTS:Property DTS:Name="Precision">0</DTS:Property>
<DTS:Property DTS:Name="Scale">0</DTS:Property>
<DTS:Property DTS:Name="CodePage">0</DTS:Property>
<DTS:Property DTS:Name="IndexPosition">1</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VariableSequenceNo</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E8598C73-5717-4577-B874-0A819380AEDA}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:CacheColumn>
<DTS:CacheColumn>
<DTS:Property DTS:Name="DataType">3</DTS:Property>
<DTS:Property DTS:Name="Length">0</DTS:Property>
<DTS:Property DTS:Name="Precision">0</DTS:Property>
<DTS:Property DTS:Name="Scale">0</DTS:Property>
<DTS:Property DTS:Name="CodePage">0</DTS:Property>
<DTS:Property DTS:Name="IndexPosition">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VariableSetID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D46543F4-B964-4720-BADD-AF6423BADE33}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:CacheColumn>
<DTS:CacheColumn>
<DTS:Property DTS:Name="DataType">3</DTS:Property>
<DTS:Property DTS:Name="Length">0</DTS:Property>
<DTS:Property DTS:Name="Precision">0</DTS:Property>
<DTS:Property DTS:Name="Scale">0</DTS:Property>
<DTS:Property DTS:Name="CodePage">0</DTS:Property>
<DTS:Property DTS:Name="IndexPosition">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VariableSetItemID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{DBAE1D59-B2AD-46B4-A25C-2E210E3C7670}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:CacheColumn>
<DTS:Property DTS:Name="ConnectionString"></DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:LogProvider>
<DTS:Property DTS:Name="ConfigString">TrustWaterfall</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">SSIS log provider for Text files</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E48E25A4-19F8-48B0-9716-FC67B439B731}</DTS:Property>
<DTS:Property DTS:Name="Description">Writes log entries for events to a CSV file</DTS:Property>
<DTS:Property DTS:Name="CreationName">DTS.LogProviderTextFile.2</DTS:Property><DTS:ObjectData><InnerObject/></DTS:ObjectData></DTS:LogProvider>
<DTS:Property DTS:Name="LastModifiedProductVersion">10.50.1600.1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">3081</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">-1</DTS:Property>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"Data Source=" + @[User::DBServer_DAL_SEC] + ";Initial Catalog=" + @[User::DBName_DAL_SEC] + ";Integrated Security=SSPI;"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Data Source=AU2104SDSSQL01\DAL_SEC;Initial Catalog=DAL_SEC;Integrated Security=SSPI;</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_ConnString_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3FA6D438-386A-4CA1-B325-24ED33D42F4A}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_InputRange</DTS:Property>
<DTS:Property DTS:Name="DTSID">{FF0399BD-5058-46AE-883C-20CCA4CB1E8F}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"exec dbo.usp_GetFactVariableSet " + @[User::DimReportingDateID] + ", '" + @[User::TrustID] + "'"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">exec dbo.usp_GetFactVariableSet 20141013, 'I'</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_query_GetFactVariableSet</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6F992E59-3A5F-4F6B-AC97-3F9C8A3DD960}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"select si.VariableSetItemId, si.VariableSetId, SequenceNo 
from tblVariableSetItem si 
inner join tblVariableSet vs on si.VariableSetId = vs.VariableSetId 
where vs.VariableSetCode = '" +  @[User::TrustID]+ "' and vs.IsCurrent = 1 and si.IsEnabled = 1"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">select si.VariableSetItemId, si.VariableSetId, SequenceNo 
from tblVariableSetItem si 
inner join tblVariableSet vs on si.VariableSetId = vs.VariableSetId 
where vs.VariableSetCode = 'I' and vs.IsCurrent = 1 and si.IsEnabled = 1</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_query_GetVariableSetItemLookup</DTS:Property>
<DTS:Property DTS:Name="DTSID">{1D9443B3-F906-4D08-950B-8E5449D6D9A1}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">ActionMessage</DTS:Property>
<DTS:Property DTS:Name="DTSID">{0A30E82A-2B75-47EC-B112-AAFFF04B6AC3}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">DAL_SEC</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">DBName_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{C092151B-57A3-44F5-8CDF-6FC96200B3E4}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">AU2104SDSSQL01\DAL_SEC</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">DBServer_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7BD9D867-B75F-41DE-97F3-DDA6F13C40DD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">20141013</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">DimReportingDateID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6D8C3392-DD2B-48E7-B4D8-683A44055A43}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">E:\TSSWCFServices\TaskProcessServices\R4.Task\Logs\</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">LogPath</DTS:Property>
<DTS:Property DTS:Name="DTSID">{507ADF37-8DA9-4D0E-99C9-FFED6E026E03}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"Data Source=" + @[User::DBServer_DAL_SEC] + ";Initial Catalog=" + @[User::DBName_DAL_SEC] + ";Provider=SQLNCLI10.1;Integrated Security=SSPI;"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Data Source=AU2104SDSSQL01\DAL_SEC;Initial Catalog=DAL_SEC;Provider=SQLNCLI10.1;Integrated Security=SSPI;</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">OLEDBConnString_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3EA9F974-C524-4BF4-B604-16568C22886E}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">6789</DTS:Property><DTS:VariableValue DTS:DataType="3">0</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">RowCount</DTS:Property>
<DTS:Property DTS:Name="DTSID">{1EA392F7-2C94-43C1-A998-3D32B32F95AD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">SessionID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{92FC159E-94BB-4EFD-B1C0-A71EA3CF8A08}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Waterfall</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">SheetName</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3ACCBCAF-A133-4B32-A8CA-F2503A20BBB5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">REPORT DATE</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">StartCellValue</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D7223528-363E-4FF6-8F87-B046AB889EAC}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">I</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">TrustID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{39A2D41B-0672-493B-A4C6-93F81733E4FD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Crusade 2007-1E RBA Template v8.xlsm</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">WaterfallTemplateFileName</DTS:Property>
<DTS:Property DTS:Name="DTSID">{F5CDCF8A-DCAB-47CA-9026-64ED4311BE0E}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">E:\TSSWCFServices\TaskProcessServices\R4.Task\Working</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">WaterfallTemplatePath</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6CC99235-0C70-4177-8883-B3BA584FF6FD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">1</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8">3,7,OnError,13,OnInformation,12,OnTaskFailed</DTS:Property>
<DTS:Property DTS:Name="ColumnFilter" DTS:EventName="OnError">
<DTS:Property DTS:Name="Computer">-1</DTS:Property>
<DTS:Property DTS:Name="Operator">-1</DTS:Property>
<DTS:Property DTS:Name="SourceName">-1</DTS:Property>
<DTS:Property DTS:Name="SourceID">-1</DTS:Property>
<DTS:Property DTS:Name="ExecutionID">-1</DTS:Property>
<DTS:Property DTS:Name="MessageText">-1</DTS:Property>
<DTS:Property DTS:Name="DataBytes">-1</DTS:Property></DTS:Property>
<DTS:Property DTS:Name="ColumnFilter" DTS:EventName="OnInformation">
<DTS:Property DTS:Name="Computer">-1</DTS:Property>
<DTS:Property DTS:Name="Operator">-1</DTS:Property>
<DTS:Property DTS:Name="SourceName">-1</DTS:Property>
<DTS:Property DTS:Name="SourceID">-1</DTS:Property>
<DTS:Property DTS:Name="ExecutionID">-1</DTS:Property>
<DTS:Property DTS:Name="MessageText">-1</DTS:Property>
<DTS:Property DTS:Name="DataBytes">-1</DTS:Property></DTS:Property>
<DTS:Property DTS:Name="ColumnFilter" DTS:EventName="OnTaskFailed">
<DTS:Property DTS:Name="Computer">-1</DTS:Property>
<DTS:Property DTS:Name="Operator">-1</DTS:Property>
<DTS:Property DTS:Name="SourceName">-1</DTS:Property>
<DTS:Property DTS:Name="SourceID">-1</DTS:Property>
<DTS:Property DTS:Name="ExecutionID">-1</DTS:Property>
<DTS:Property DTS:Name="MessageText">-1</DTS:Property>
<DTS:Property DTS:Name="DataBytes">-1</DTS:Property></DTS:Property><DTS:SelectedLogProvider DTS:InstanceID="{E48E25A4-19F8-48B0-9716-FC67B439B731}"/></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Package Initialise</DTS:Property>
<DTS:Property DTS:Name="DTSID">{85077271-c80f-4698-970f-ba4608fb992a}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_2d479114748d45ca91e00b4ffab8a801" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::LogPath,User::OLEDBConnString_DAL_SEC,User::SessionID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath" ReadWriteVariables=""><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;

namespace ST_84e426a1e0734af192fb72ef1fa02444.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here

            string sMsg = null;
            string sLogPath = Dts.Variables["LogPath"].Value.ToString();
            string sSessionID = Dts.Variables["SessionID"].Value.ToString();
            string sDataSource = Dts.Variables["OLEDBConnString_DAL_SEC"].Value.ToString();
            string sFileName = Dts.Variables["WaterfallTemplateFileName"].Value.ToString();
            string sFilePath = Dts.Variables["WaterfallTemplatePath"].Value.ToString();

            bool bfireAgain = true;


            sMsg = string.Format("Package input parameters: SessionID={0}; LogPath={1}; Data Source={2}; FilePath={3}; FileName={4}", sSessionID, sLogPath, sDataSource, sFilePath, sFileName);
            Dts.Events.FireInformation(1000, "Package Initialisation", sMsg, null, 0, ref bfireAgain);

            
            if (!Directory.Exists(sLogPath))
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                sMsg = string.Format("Package Init: Log Path {0} does not exist", sLogPath);
                throw new Exception(sMsg);
            }
            if (!Directory.Exists(sFilePath))
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                sMsg = string.Format("Package Init: Waterfall template Path {0} does not exist", sFilePath);
                throw new Exception(sMsg);
            }
            if (!File.Exists(sFilePath + "\\" + sFileName))
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                sMsg = string.Format("Package Init: Waterfall template file {0} does not exist", sFilePath + "\\" + sFileName);
                throw new Exception(sMsg);
            }
          
            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Settings.get_Default():ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Sett" +
    "ings")]

namespace ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_84e426a1e0734af192fb72ef1fa02444.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_84e426a1e0734af192fb72ef1fa02444.csproj")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\st_2d479114748d45ca91e00b4ffab8a801.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><NoStandardLibraries>false</NoStandardLibraries><RootNamespace>ST_84e426a1e0734af192fb72ef1fa02444.csproj</RootNamespace><AssemblyName>st_2d479114748d45ca91e00b4ffab8a801</AssemblyName><ProjectGuid>{9DEF5CB7-43F9-4697-B2BF-861187EC0526}</ProjectGuid></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}"><ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ScriptTask</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem><BinaryItem Name="\bin\release\st_2d479114748d45ca91e00b4ffab8a801.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDANe3vFQAAAAAAAAAAOAAAiELAQgAABQAAAAIAAAAAAAADjMA
AAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALgyAABTAAAAAEAAACgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFBMAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAACgEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
MgAAAAAAAEgAAAACAAUAICMAAJgPAAABAAAAAAAAAGgiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABp+AQAABCoucwIAAAaAAQAABCoeAigNAAAKKh4CKA8AAAoq
ABMwAwAtAAAAAQAAEX4CAAAELSByAQAAcNADAAACKBAAAApvEQAACnMSAAAKCgaAAgAABH4CAAAE
Khp+AwAABCoeAoADAAAEKhMwBwCUAQAAAgAAERQKAigVAAAKbxYAAApygQAAcG8XAAAKbxgAAApv
GQAACgsCKBUAAApvFgAACnKRAABwbxcAAApvGAAACm8ZAAAKDAIoFQAACm8WAAAKcqUAAHBvFwAA
Cm8YAAAKbxkAAAoNAigVAAAKbxYAAApy1QAAcG8XAAAKbxgAAApvGQAAChMEAigVAAAKbxYAAApy
CQEAcG8XAAAKbxgAAApvGQAAChMFFxMGcjUBAHAbjQIAAAETBxEHFgiiEQcXB6IRBxgJohEHGREF
ohEHGhEEohEHKBoAAAoKAigVAAAKbxsAAAog6AMAAHL6AQBwBhQWEgZvHAAACgcoHQAACi0fAigV
AAAKF28eAAAKcigCAHAHKB8AAAoKBnMgAAAKehEFKB0AAAotIAIoFQAAChdvHgAACnJ8AgBwEQUo
HwAACgoGcyAAAAp6EQVy7gIAcBEEKCEAAAooIgAACi0sAigVAAAKF28eAAAKcvICAHARBXLuAgBw
EQQoIQAACigfAAAKCgZzIAAACnoCKBUAAAoWbx4AAAoqHgIoIwAACioAAAAAtAAAAM7K774BAAAA
kQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj0y
LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkj
U3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAA
AEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAABAEAAAjfgAAfAQAABwGAAAjU3Ry
aW5ncwAAAACYCgAAZAMAACNVUwD8DQAAEAAAACNHVUlEAAAADA4AAIwBAAAjQmxvYgAAAAAAAAAC
AAABVx2iAQkDAAAA+gEzABYAAAEAAAAhAAAABQAAAAYAAAAJAAAAAQAAACMAAAACAAAADgAAAAIA
AAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAAAKAAEAAAAAAAYA2wDGAAoA/AC/AA4ASwEi
AQoAZwG/AAoApwGWAQoA2AHDAQoAXQJLAgoAdAJLAgoAkQJLAgoAsAJLAgoAyQJLAgoA4gJLAgoA
/QJLAgoAGANLAgoAMQNLAgoAagNKAwoAigNKAwoAzANKAwoAAQTuAwoAHgS/AAoAIwS/AAoARwRL
AgYAcwRdBAYAjARdBBIArgShBA4AvQQiARYAFgX2BBYALgX2BAoAUwW/AA4AYQUiAQoAmgWQBQoA
ugW/AAoAywWQBQAAAAABAAAAAAABAAEAAAEQADIAOwAFAAEAAQAAABAAcQA7AAkAAgAEAAEAEAB7
AIYADQAEAAgAAwEAALEAAAARAAQACgARAGwBEwARALcBJQARAOQBKQAGBi0CRwBWgDUCSgBWgD0C
SgBQIAAAAACWCHwBFwABAGMgAAAAAIYYiAEcAAEAVyAAAAAAkRjnA2IAAQBrIAAAAACDGIgBHAAB
AHQgAAAAAJMI9AEtAAEArSAAAAAAkwgIAjIAAQC0IAAAAACTCBQCNwABALwgAAAAAIYAKAIcAAIA
XCIAAAAAhhiIARwAAgAAAAEARQI5AIgBWABBAIgBWABJAIgBWABRAIgBWABZAIgBWABhAIgBWABp
AIgBWABxAIgBWAB5AIgBWACBAIgBXQCJAIgBHACRAIgBHAAJAIgBHACZAIgBHAARAIgBHAChADUE
ZgChAFAEbQApAIgBcgC5AIgBfgDJAIgBWAAZAM8ExwDRACAFzADZADcF0QDhAEAF1wARAEoF2wDp
AFoF3wDRAHUF5gDxAIAF6wD5AKQF9gDRAKsFXQDpAFoF+wABAYgBWADpAMQFAQEJAaQF9gAZAIgB
HAAIABQATgAIABgAUwAhAGMAUwAuABMARAEuABsARAEuACMARAEuAFMAYQEuAAsAFAEuAFsAagEu
ACsAFAEuADMASgEuADsARAFJAJsAhABjAHMAUwBpAJsAhACDAKMAjQB5AAgBAgABAAMAAgAAAI4B
IAAAAKcBPQAAACACQgACAAEAAwACAAUABQACAAYABwABAAcABwAEgAAAAQAAAHkVw4QAAAAAAACo
AwAAAgAAAAAAAAAAAAAAAQC/AAAAAAACAAAAAAAAAAAAAAABAPMAAAAAAAoAAAAAAAAAAAAAAAoA
AwEAAAAAAwAFAAAAAAAAAAAAAQChBAAAAAAKAAAAAAAAAAAAAAAKANcEAAAAAAAAAAABAAAA0AUA
AAUABAAAAAAAADxNb2R1bGU+AHN0XzJkNDc5MTE0NzQ4ZDQ1Y2E5MWUwMGI0ZmZhYjhhODAxLmRs
bABTZXR0aW5ncwBTVF84NGU0MjZhMWUwNzM0YWYxOTJmYjcyZWYxZmEwMjQ0NC5jc3Byb2ouUHJv
cGVydGllcwBSZXNvdXJjZXMAU2NyaXB0TWFpbgBTVF84NGU0MjZhMWUwNzM0YWYxOTJmYjcyZWYx
ZmEwMjQ0NC5jc3Byb2oAU2NyaXB0UmVzdWx0cwBTeXN0ZW0AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAbXNjb3JsaWIAT2JqZWN0AE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZT
VEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVs
dAAuY3RvcgBEZWZhdWx0AFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNl
TWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQBnZXRf
UmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUATWFpbgB2YWx1
ZV9fAFN1Y2Nlc3MARmFpbHVyZQB2YWx1ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0
aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1
dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAc3RfMmQ0NzkxMTQ3NDhkNDVjYTkxZTAw
YjRmZmFiOGE4MDEAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFN5c3RlbS5EaWFn
bm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25l
bnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAU3lz
dGVtLkFkZEluAEFkZEluQXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9z
b2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUA
VmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFRvU3Ry
aW5nAFN0cmluZwBGb3JtYXQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEZpcmVJbmZv
cm1hdGlvbgBTeXN0ZW0uSU8ARGlyZWN0b3J5AEV4aXN0cwBzZXRfVGFza1Jlc3VsdABFeGNlcHRp
b24AQ29uY2F0AEZpbGUAU1RfODRlNDI2YTFlMDczNGFmMTkyZmI3MmVmMWZhMDI0NDQuY3Nwcm9q
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAAB/UwBUAF8AOAA0AGUANAAyADYAYQAx
AGUAMAA3ADMANABhAGYAMQA5ADIAZgBiADcAMgBlAGYAMQBmAGEAMAAyADQANAA0AC4AYwBzAHAA
cgBvAGoALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAA9MAG8AZwBQ
AGEAdABoAAATUwBlAHMAcwBpAG8AbgBJAEQAAC9PAEwARQBEAEIAQwBvAG4AbgBTAHQAcgBpAG4A
ZwBfAEQAQQBMAF8AUwBFAEMAADNXAGEAdABlAHIAZgBhAGwAbABUAGUAbQBwAGwAYQB0AGUARgBp
AGwAZQBOAGEAbQBlAAArVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABsAGEAdABlAFAAYQB0AGgA
AIDDUABhAGMAawBhAGcAZQAgAGkAbgBwAHUAdAAgAHAAYQByAGEAbQBlAHQAZQByAHMAOgAgAFMA
ZQBzAHMAaQBvAG4ASQBEAD0AewAwAH0AOwAgAEwAbwBnAFAAYQB0AGgAPQB7ADEAfQA7ACAARABh
AHQAYQAgAFMAbwB1AHIAYwBlAD0AewAyAH0AOwAgAEYAaQBsAGUAUABhAHQAaAA9AHsAMwB9ADsA
IABGAGkAbABlAE4AYQBtAGUAPQB7ADQAfQAALVAAYQBjAGsAYQBnAGUAIABJAG4AaQB0AGkAYQBs
AGkAcwBhAHQAaQBvAG4AAFNQAGEAYwBrAGEAZwBlACAASQBuAGkAdAA6ACAATABvAGcAIABQAGEA
dABoACAAewAwAH0AIABkAG8AZQBzACAAbgBvAHQAIABlAHgAaQBzAHQAAHFQAGEAYwBrAGEAZwBl
ACAASQBuAGkAdAA6ACAAVwBhAHQAZQByAGYAYQBsAGwAIAB0AGUAbQBwAGwAYQB0AGUAIABQAGEA
dABoACAAewAwAH0AIABkAG8AZQBzACAAbgBvAHQAIABlAHgAaQBzAHQAAANcAABxUABhAGMAawBh
AGcAZQAgAEkAbgBpAHQAOgAgAFcAYQB0AGUAcgBmAGEAbABsACAAdABlAG0AcABsAGEAdABlACAA
ZgBpAGwAZQAgAHsAMAB9ACAAZABvAGUAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AADJGraZLAJuQbbe
Jc8hCZsjAAi3elxWGTTgiQiJhF3NgIDMkQMGEggEAAASCAMgAAEECAASCAMGEhUDBhIZBAAAEhUE
AAASGQUAAQESGQQIABIVBAgAEhkCBggDBhEUBAAAAAAEAQAAAAQgAQEOBCABAQgDAAABBgABElER
VQQgABJZBiACAQ4SWQQHARIVBSABARFhCAEAAgAAAAAAOQEAClNjcmlwdE1haW4DAFQOB1ZlcnNp
b24DMS4wVA4JUHVibGlzaGVyAFQOC0Rlc2NyaXB0aW9uAAQgABJpBCAAEm0FIAEScRwDIAAcAyAA
DgYAAg4OHRwEIAASeQogBgEIDg4OCBACBAABAg4FAAIODhwGAAMODg4OCwcIDg4ODg4OAh0cLwEA
KlNUXzg0ZTQyNmExZTA3MzRhZjE5MmZiNzJlZjFmYTAyNDQ0LmNzcHJvagAABQEAAAAAFgEAEUNv
cHlyaWdodCBAICAyMDEzAAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MB
AAAA4DIAAAAAAAAAAAAA/jIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAyAAAAAAAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgQAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAADQAwAAAAAAAAAAAADQAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAw4R5FQAAAQDDhHkVPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEMAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAADAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADgANABlADQAMgA2AGEAMQBlADAANwAzADQAYQBmADEAOQAyAGYAYgA3ADIAZQBmADEAZgBhADAA
MgA0ADQANAAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAA
ADEALgAwAC4ANQA0ADkANwAuADMAMwA5ADgANwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4A
YQBtAGUAAABzAHQAXwAyAGQANAA3ADkAMQAxADQANwA0ADgAZAA0ADUAYwBhADkAMQBlADAAMABi
ADQAZgBmAGEAYgA4AGEAOAAwADEALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIA
aQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAMwAAAHgAKAABAE8AcgBp
AGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABzAHQAXwAyAGQANAA3ADkAMQAxADQANwA0ADgA
ZAA0ADUAYwBhADkAMQBlADAAMABiADQAZgBmAGEAYgA4AGEAOAAwADEALgBkAGwAbAAAAHgAKwAB
AFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AOAA0AGUANAAyADYAYQAxAGUAMAA3ADMA
NABhAGYAMQA5ADIAZgBiADcAMgBlAGYAMQBmAGEAMAAyADQANAA0AC4AYwBzAHAAcgBvAGoAAAAA
AEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADkANwAuADMA
MwA5ADgANwAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANQA0ADkANwAuADMAMwA5ADgANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAEDMAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Prepare OUTPUT</DTS:Property>
<DTS:Property DTS:Name="DTSID">{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_a7b701b3746943d2bcc4744e85a99b00" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::DimReportingDateID,User::SheetName,User::StartCellValue,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath" ReadWriteVariables=""><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
//using System.Windows.Forms;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;

namespace ST_a7b701b3746943d2bcc4744e85a99b00.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        private string _ReportingDate;
        private string _sFileName;
        private string _sFilePath;
        private string _sFile;
        private SpreadsheetDocument _spreadsheetDocument;
        private Sheet _sheet;
        private WorksheetPart _worksheetPart;
        private SheetData _sheetData;
        private SharedStringTablePart _sharedStringTablePart;
        private DocumentFormat.OpenXml.StringValue _sheetReferenceId;
        private string _sSheetName;
        private string _StartCellValue;
        //private int Count = 0;
        private string _TrustID;
        private WaterfallReport _wr;
        //private string _sInputRange;
        //private string _sOutputRange;

        public void Main()
        {
            // TODO: Add your code here
            PreExecute();

            bool bFireAgain = true;
            string sMsg = "";

            var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
            if (StartCell == null)
            {
                sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
                Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);
            }
            _wr = new WaterfallReport(_sheetData, _sharedStringTablePart, StartCell);
            sMsg = string.Format("Sections Range={0},{1},{2},{3},{4}, {5}", _wr.ReportSections["REPORT DATE"].GetSectionRange(), _wr.ReportSections["MODEL VERSION"].GetSectionRange(), _wr.ReportSections["INPUT"].GetSectionRange(), _wr.ReportSections["OUTPUT"].GetSectionRange(), _wr.ReportSections["DISTRIBUTION"].GetSectionRange(), _wr.ReportSections["DISCREPANCY"].GetSectionRange());
            Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);
            if (_wr.ReportSections == null)
            {
                Dts.Events.FireInformation(1000, "Prepare Waterfall template", "ReportSections is NULL", "", 0, ref bFireAgain);
            }

            _wr.MoveToLastRow();
            Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Moved to the last row", "", 0, ref bFireAgain);

            _wr.MoveToNextRow();

            sMsg = string.Format("{0} : {1}", _wr.GetCell().CellReference.Value, _wr.GetCellValue());
            Dts.Events.FireInformation(1000, "Row start position", sMsg, "", 0, ref bFireAgain);

            //Dts.Events.FireInformation(1000, "Row start position", _wr.GetDataRow().InnerXml, "", 0, ref bFireAgain);

            _wr.VerifyRow();
            //Dts.Events.FireInformation(1000, "Verify Row", _wr.TS1, "", 0, ref bFireAgain);
            //Dts.Events.FireInformation(1000, "Verify Row", _wr.TS2, "", 0, ref bFireAgain);
            //Dts.Events.FireInformation(1000, "Verify Row", _wr.TS3, "", 0, ref bFireAgain);
            _worksheetPart.Worksheet.Save();

            Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Verified row", "", 0, ref bFireAgain);

            _wr.MoveToSectionFirstCell("OUTPUT");

            sMsg = string.Format("Set first output cell: {0}", _wr.ReportSections["OUTPUT"].ColStartIndex);
            Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);
            
            Cell cell = _wr.GetCell();
            if (cell == null) { Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Output start position - no cell", "", 0, ref bFireAgain); }

            int ColNumber = _wr.ReportSections["OUTPUT"].GetColNumber();

            for (int i = 0; i < ColNumber; i++)
                {
                    string CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
                    cell = _wr.GetCell(CellRef);
                    if (cell != null)
                    {
                        if (cell.CellFormula != null)
                        {
                            sMsg = string.Format("cell {0}: {1} has got already formula", i, CellRef);
                            Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", sMsg, "", 0, ref bFireAgain);
                        }
                       else
                       {
                        _wr.CopyFormula(CellRef);
                        }
                    _wr.UpdateCellValue("", "", CellRef);
                    
                    if (cell != null && cell.CellValue != null) { cell.CellValue.Remove(); }
                    }
                    else
                    {
                        sMsg = string.Format("cell {0}: {1} does not exist", i, CellRef);
                        Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", sMsg, "", 0, ref bFireAgain);
                    }
                    //sMsg = string.Format("{0} , {1}, {2}, {3}", i, _wr.GetCell().CellReference.Value, _wr.GetReportColIndex(), _wr.GetColumnName(_wr.ColumnIndex()));
                    //Dts.Events.FireInformation(1000, "CopyFormula OUTPUT", sMsg, "", 0, ref bFireAgain);
                    _wr.MoveToNextCell();
                }
                Dts.Events.FireInformation(1000, "Update Cell Value OUTPUT", _wr.TS2, "", 0, ref bFireAgain);
                Dts.Events.FireInformation(1000, "Update Cell Value OUTPUT", _wr.TS3, "", 0, ref bFireAgain);
                Dts.Events.FireInformation(1000, "CopyFormula OUTPUT", _wr.TS1, "", 0, ref bFireAgain);
                
        Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Move to DISCREPANCY", "", 0, ref bFireAgain);
        _wr.TS1 = "";
        _wr.MoveToSectionFirstCell("DISCREPANCY");
        
        ColNumber = _wr.ReportSections["DISCREPANCY"].GetColNumber();
        for (int i = 0; i < ColNumber; i++)
        {
            string CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
            cell = _wr.GetCell(CellRef);
            if (cell != null)
            {
                if (cell.CellFormula != null)
                {
                    sMsg = string.Format("cell {0}: {1} has got already formula", i, CellRef);
                    Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", sMsg, "", 0, ref bFireAgain);
                }
                else
                {
                    _wr.CopyFormula(CellRef);
                }
                _wr.UpdateCellValue("", "", CellRef);

                if (cell != null && cell.CellValue != null) { cell.CellValue.Remove(); }
                sMsg = string.Format("{0} , {1}, {2}, {3}", i, CellRef, _wr.GetReportColIndex(), _wr.GetCellValue());
                Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", sMsg, "", 0, ref bFireAgain);
            }
            else
            {
                sMsg = string.Format("cell {0}: {1} does not exist", i, CellRef);
                Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", sMsg, "", 0, ref bFireAgain);
            }
            _wr.MoveToNextCell();
        }
        Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", _wr.TS1, "", 0, ref bFireAgain);
       
            PostExecute();
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void PreExecute()
        {
        /*
          Add your code here for preprocessing or remove if not needed
        */
        _ReportingDate = Dts.Variables["DimReportingDateID"].Value.ToString();
        _TrustID = Dts.Variables["TrustID"].Value.ToString();
        _StartCellValue = Dts.Variables["StartCellValue"].Value.ToString();  //"REPORT DATE";
        _sFileName = Dts.Variables["WaterfallTemplateFileName"].Value.ToString();
        _sFilePath = Dts.Variables["WaterfallTemplatePath"].Value.ToString();
        _sSheetName = Dts.Variables["SheetName"].Value.ToString();
        _sFile = _sFilePath + "\\" + _sFileName;

        _spreadsheetDocument = SpreadsheetDocument.Open(_sFile, true);
        _sheet = _spreadsheetDocument.WorkbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == _sSheetName);
        _sheetReferenceId = _sheet.Id;
        if (_sheet == null) throw new Exception(string.Format("Could not find sheet with name {0}", _sSheetName));

        _worksheetPart = (WorksheetPart)_spreadsheetDocument.WorkbookPart.GetPartById(_sheetReferenceId);
        _sheetData = _worksheetPart.Worksheet.GetFirstChild<SheetData>();
        _sharedStringTablePart = _spreadsheetDocument.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
        }

    public void PostExecute()
    {

        _worksheetPart.Worksheet.Save();
        _sharedStringTablePart = null;
        _sheetData = null;
        _worksheetPart = null;
        _sheet = null;
        _spreadsheetDocument.Close();
        _spreadsheetDocument.Dispose();
        _spreadsheetDocument = null;
        _wr = null;
    }

  }

    public class WaterfallReport
    {
        private SheetData _sheetData;
        private SharedStringTablePart _sharedStringTablePart;
        private Dictionary<string, WaterfallReportSection> _ReportSections = new Dictionary<string, WaterfallReportSection>();
        //private Row _rColumnName;
        private Row _rData;
        private Row _rRowType;
        private Row _rVariableName;
        private Row _rFirstDataRow;
        private int _CurrentColIndex;
        private string _TS1 = "";
        private string _TS2 = "";
        private string _TS3 = "";

        public WaterfallReport(SheetData sd, SharedStringTablePart sst, Cell start)
        {
            _sheetData = sd;
            _sharedStringTablePart = sst;
            int RowTypeIndex = ExcelNavigator.GetRowIndex(start.CellReference) - 1;
            int RowVariableName = RowTypeIndex - 5;

            _rRowType = ExcelNavigator.GetRow(_sheetData, RowTypeIndex);
            /*
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));
            */

            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            _ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            //_ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));

            _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + 1);
            _rFirstDataRow = _rData;
            _rVariableName = ExcelNavigator.GetRow(_sheetData, RowVariableName);
        }

        public Dictionary<string, WaterfallReportSection> ReportSections
        {
            get { return this._ReportSections; }
        }
        public string TS1 { get { return _TS1; } set { _TS1 = value; } }
        public string TS2 { get { return _TS2; } set { _TS2 = value; } }
        public string TS3 { get { return _TS3; } set { _TS3 = value; } }

        private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
        {
            int ColStart = 0;
            int ColEnd = 0;
            string CellStartName = "";
            string CellEndName = "";
            Cell cell;
            string sLastCellValue = "";
            string sLastCellName = "";
            string sCellValue = "";
            string sCellName = "";

            WaterfallReportSection wrs = null;
            Dictionary<string, string> cnl = new Dictionary<string, string>();

            int ColCount = row.Descendants<Cell>().Count<Cell>();
            for (int i = StartIndex; i <= ColCount - 1; i++)
            {
                cell = row.Descendants<Cell>().ElementAt(i);
                sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToString().ToUpper();
                sCellName = cell.CellReference.ToString();
                if (sCellValue == SectionName.ToUpper())
                {
                    cnl.Add(i.ToString(), ExcelNavigator.GetColumnName(sCellName));
                }
                if (sCellValue != sLastCellValue && sCellValue == SectionName.ToUpper())
                {
                    CellStartName = sCellName;
                    ColStart = i;
                }
                if (sCellValue != sLastCellValue && sLastCellValue == SectionName.ToUpper())
                {
                    CellEndName = sLastCellName;
                    ColEnd = i - 1;
                    break;
                }
                if (i == ColCount - 1)
                {
                    CellEndName = sCellName;
                    ColEnd = i;
                }

                sLastCellValue = sCellValue;
                sLastCellName = cell.CellReference.ToString();
            }
            if (CellStartName != "" && CellEndName != "")
            {
                wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName, cnl);
            }
            return wrs;
        }

        public bool MoveToNextRow()
        {
            _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value));
            return true;
        }

        public bool MoveToPrevRow()
        {
            bool ret = false;
            if (_rData.RowIndex - 2 > _rRowType.RowIndex)
            {
                _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value - 2));
                ret = true;
            }
            return ret;
        }

        public bool MoveToNextCell()
        {
            bool ret = false;
            if (_CurrentColIndex + 1 <= _ReportSections["DISCREPANCY"].ColEndIndex)
            {
                _CurrentColIndex++;
                ret = true;
            }
            return ret;
        }

        public bool MoveToPrevCell()
        {
            bool ret = false;
            if (_CurrentColIndex - 1 <= _ReportSections["REPORT DATE"].ColStartIndex)
            {
                _CurrentColIndex--;
                ret = true;
            }
            return ret;
        }

        public bool MoveToSectionFirstCell(string sSectionName)
        {
            _CurrentColIndex = _ReportSections[sSectionName].ColStartIndex;
            return true;
        }

        public bool MoveToLastRow()
        {
            string sCellsList;
            string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
            Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
            if (cells != null && cells.Count > 0)
            {
                Cell LastFilledCell = cells.Last<KeyValuePair<string, Cell>>().Value;
                int FirstEmptyRowIndex = ExcelNavigator.GetRowIndex(LastFilledCell.CellReference) - 1;
                _rData = ExcelNavigator.GetRow(_sheetData, FirstEmptyRowIndex);
            }
            return true;
        }

        public string GetCellValue()
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            }
            catch { return null; }
        }

        public string GetValueType()
        {
            Cell cell = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex);
            return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        }

        public bool UpdateCellValue(string sValue, string sDataType)
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    //_TS1 = _TS1 + FromCell.CellReference.Value + " = " + cell.CellReference.Value + ";";
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
            
        }

        public bool UpdateCellValue(string sValue, string sDataType, string CellReference)
        {
            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = this.GetCell(CellReference);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    string ColName = ExcelNavigator.GetColumnName(CellReference);
                    string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                    Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
        }

        public bool CopyFormula()
        {
            StringBuilder sb1 = new StringBuilder();

            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    sb1.Append(cell.CellReference.Value).Append(":").Append(FromCell.CellReference.Value).Append("=");
                    if (FromCell.CellFormula != null)
                    {
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        string sFormulaRef = FromCell.CellFormula.Reference.Value;
                        string sFormulaText = FromCell.CellFormula.Text;

                        //CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType};
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                        cell.Append(cf);
                        sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                    }
                    //cell.CellValue.Remove();
                }
                //_TS1 = _TS1 + sb1.ToString();
                sb1 = null;
                return true;
            }
            catch { return false; }

        }

        public bool CopyFormula(string CellReference)
        {
            StringBuilder sb1 = new StringBuilder();

            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = this.GetCell(CellReference);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {

                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    string ColName = ExcelNavigator.GetColumnName(CellReference);
                    string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                    Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                    string FromCellRef = "";
                    if (FromCell == null) { FromCellRef = "null"; } else { FromCellRef = FromCell.CellReference.Value; }
                    string sOldFormulaType = "";
                    string sNewFormulaType = "";
                    if (FromCell.CellFormula != null)
                    {
                        sb1.Append("1");
                        CellFormula cf;
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        sb1.Append("1a");
                        string sFormulaRef = "";
                        if (FromCell.CellFormula.Reference != null)
                        { sFormulaRef = FromCell.CellFormula.Reference.Value; }
                        sb1.Append("1b");
                        string sFormulaText = "";
                        if (!string.IsNullOrEmpty(FromCell.CellFormula.Text))
                        { sFormulaText = FromCell.CellFormula.Text; }
                        //FromCell.CellFormula.SharedIndex
                        //CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        sb1.Append("2");
                        sOldFormulaType = "";
                        if (FromCell.CellFormula.FormulaType != null)
                        { sOldFormulaType = FromCell.CellFormula.FormulaType.Value.ToString(); }
                        sNewFormulaType = "";
                        sb1.Append("3");
                        if (FromCell.CellFormula.FormulaType == null)
                        {
                            cf = new CellFormula() { Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex) };
                        }
                        else
                        {
                            if (FromCell.CellFormula.FormulaType.Value == CellFormulaValues.Shared)
                            {
                                sb1.Append("4");
                                sNewFormulaType = sOldFormulaType;
                                //cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                                cf = new CellFormula() { FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                                // update formula reference in the first row
                                Cell FirstCell = ExcelNavigator.GetCellByName(_sheetData, ColName + _rFirstDataRow.RowIndex.Value.ToString());
                                sb1.Append("5");
                                if (!string.IsNullOrEmpty(FirstCell.CellFormula.Reference.Value))
                                {
                                    string sFirstCellFormulaRef = FirstCell.CellFormula.Reference.Value;
                                    FirstCell.CellFormula.Reference.Value = sFirstCellFormulaRef.Replace(sOldRowIndex, sNewRowIndex);
                                }
                            }
                            else
                            {
                                sb1.Append("6");
                                cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType };
                                cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                            }
                        }
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        sb1.Append("7");
                        cell.Append(cf);
                        //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                    }
                    else
                    {
                        sb1.Append("8");
                        sb1.Append(FromCellRef).Append(" = ").Append("no formula");
                    }
                    //cell.CellValue.Remove();
                    //sb1.Append(cell.CellReference.Value).Append(",").Append(sNewFormulaType).Append(" = ").Append(FromCellRef).Append(",").Append(sOldFormulaType).Append(";");
                    sb1.Append(cell.CellReference.Value).Append(" = ").Append(FromCellRef).Append(";");
                }
                _TS1 = _TS1 + sb1.ToString();
                sb1 = null;
                return true;
            }
            catch { _TS1 = _TS1 + sb1.ToString(); return false; }

        }

        public bool IsSectionLastColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColEndIndex)
            { ret = true; }
            return ret;
        }

        public bool IsSectionFirstColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColStartIndex)
            { ret = true; }
            return ret;
        }

        public Cell GetCell()
        {
            return _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        }

        public Cell GetCell(string CellReference)
        {
            try
            {
                return (Cell)_rData.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, CellReference, true) == 0).First();
                //sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
            }
            catch { return null; }
        }

        public int ColumnIndex()
        {
            return _CurrentColIndex;
        }

        public Row GetDataRow()
        {
            return _rData;
        }

        public Row GetTypeRow()
        {
            return _rRowType;
        }

        public Row GetFirstDataRow()
        {
            return _rFirstDataRow;
        }

        public int GetReportColIndex()
        {
            int ColIndex = 0;

            if (this._CurrentColIndex >= this._ReportSections["INPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["INPUT"].ColEndIndex)
            {
                ColIndex = this._CurrentColIndex - this._ReportSections["INPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["OUTPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["OUTPUT"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["OUTPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISTRIBUTION"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISTRIBUTION"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISTRIBUTION"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISCREPANCY"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISCREPANCY"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber() + this._ReportSections["DISTRIBUTION"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISCREPANCY"].ColStartIndex + 1;
            }

            return ColIndex;
        }

        public bool VerifyRow()
        {
            string CellRef = "";
            string LastCellRef = "";
            Cell LastCell = null;
            StringBuilder sb1 = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            StringBuilder sb3 = new StringBuilder();

            foreach (KeyValuePair<string, WaterfallReportSection> rs in _ReportSections.OrderBy(w => w.Value.ColStartIndex))
            {
                foreach (KeyValuePair<string, string> cn in rs.Value.ColNameList.OrderBy(t => int.Parse(t.Key)))
                {
                    CellRef = cn.Value + _rData.RowIndex.ToString();
                    if (LastCell == null) { LastCellRef = ""; }
                    else { LastCellRef = LastCell.CellReference.Value; }
                    sb1.Append(rs.Key).Append(":").Append(CellRef).Append(":").Append(LastCellRef).Append(";");                    
                    try
                    {
                        Cell e = _rData.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, CellRef, true) == 0).FirstOrDefault<Cell>();
                        if (e == null)
                        {
                            e = new Cell() { CellReference = CellRef };
                            //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                            if (LastCell == null){ _rData.InsertAfterSelf<Cell>(e);}
                            else{_rData.InsertAfter<Cell>(e, LastCell);}

                        }
                        LastCell = e;
                        sb2.Append(e.CellReference.Value).Append(";");
                    }
                    catch
                    {
                        Cell e = new Cell() { CellReference = CellRef };
                        //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                        _rData.InsertAfter<Cell>(e, LastCell);
                        LastCell = e;
                        sb3.Append(e.CellReference.Value).Append(";");
                    }

                }
            }
            //_TS1 = sb1.ToString();
            //_TS2 = sb2.ToString();
            //_TS3 = sb3.ToString();
            sb1 = null;
            sb2 = null;
            sb3 = null;
            return true;
        }
        public string GetColumnName(int ColIndex)
        {
            string CellRef = "";

            CellRef = _rRowType.Descendants<Cell>().ElementAt(ColIndex).CellReference.Value;
            return ExcelNavigator.GetColumnName(CellRef);
        }

    }

    public class WaterfallReportSection
    {
        private string _SectionName;
        private int _ColStartIndex;
        private string _CellStartName;
        private int _ColEndIndex;
        private string _CellEndName;
        //private int _FieldsCount;
        private Dictionary<string, string> _ColNameList;

        public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName, Dictionary<string, string> ColNameList)
        {
            // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
            this._SectionName = sName;
            this._ColStartIndex = ColStart;
            this._CellStartName = CellStartName;
            this._ColEndIndex = ColEnd;
            this._CellEndName = CellEndName;
            this._ColNameList = ColNameList;
        }

        public string SectionName
        {
            get { return this._SectionName; }
            set { this._SectionName = value; }
        }
        public string CellStartName
        {
            get { return this._CellStartName; }
            set { this._CellStartName = value; }
        }
        public string CellEndName
        {
            get { return this._CellEndName; }
            set { this._CellEndName = value; }
        }
        public int ColStartIndex
        {
            get { return this._ColStartIndex; }
            set { this._ColStartIndex = value; }
        }
        public int ColEndIndex
        {
            get { return this._ColEndIndex; }
            set { this._ColEndIndex = value; }
        }
        public  Dictionary<string, string> ColNameList
        {
            get { return this._ColNameList; }
            //set { this._ColNameList = value; }
        }
        public string GetSectionRange()
        {
            return this._CellStartName + ":" + this._CellEndName;
        }
        public int GetColNumber()
        {
            return this._ColEndIndex - this._ColStartIndex + 1;
        }
    }

    public static class ExcelNavigator
    {
        public static string GetColumnName(string sCellName)
        {
            Regex regex = new Regex("[A-Za-z]+");
            Match match = regex.Match(sCellName);

            return match.Value;
        }

        public static int GetRowIndex(string sCellName)
        {
            Regex regex = new Regex(@"\d+");
            Match match = regex.Match(sCellName);

            return int.Parse(match.Value);
        }

        public static Row GetRow(SheetData sd, int RowIndex)
        {
            return sd.Descendants<Row>().ElementAt(RowIndex);

        }

        private static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }

        public static Cell GetCellByName(SheetData sd, string cellName)
        {
            return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
        }

        public static Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
        {
            return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
        }

        public static string GetNextInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) + 1).ToString();
        }

        public static string GetPrevInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) - 1).ToString();
        }

        public static string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
        {
            StringBuilder sb = new StringBuilder();
            Cell cell;

            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
            cell = null;
            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

            return sb.ToString();
        }

        public static Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
        {
            string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
            StringBuilder sb = new StringBuilder();
            int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
            Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


            IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                            .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
            if (cells != null)
            {
                if (cells.Count<Cell>() > 0)
                {
                    foreach (Cell c in cells)
                    {
                        if (c.CellValue != null)
                        {
                            FilledCells.Add(c.CellReference, c);
                            sb.Append(c.CellReference.Value).Append(";");
                        }
                    }
                }
            }
            CellList = sb.ToString();
            return FilledCells;
        }

        public static string GetCellRangeNames(IEnumerable<Cell> cells)
        {
            StringBuilder sb = new StringBuilder();

            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                        sb.Append(c.CellReference.Value).Append(";");
                }
            }
            return sb.ToString();
        }
    }

    public static class ExcelWriter
    {
        public static bool UpdateCellValue(SharedStringTablePart sstp, Cell cell, string sValue, string sDataType)
        {
            string val;
            switch (sDataType)
            {
                case "Double":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "int":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Currency":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Date":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Boolean":
                    if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
                    if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
                    {
                        cell.CellValue = new CellValue(val);
                    }
                    else
                    {
                        cell.DataType = CellValues.Boolean;
                        cell.CellValue = new CellValue(val);

                    }
                    break;
                case "string":
                    cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                    cell.CellValue = new CellValue(InsertSharedStringItem(sstp, sValue).ToString());
                    break;
            }

            return true;
        }

        public static int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
        {
            int i = 0;
            if (sstp != null)
            {
                foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
                {
                    if (item.InnerText == sValue) { return i; }
                    i++;
                }

            }
            sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
            sstp.SharedStringTable.Save();

            return i;
        }

        public static bool CopyCellStyle(Cell FromCell, Cell ToCell)
        {
            bool ret = false;

            if (FromCell != null && ToCell != null)
            {
                OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
                if (FromAttr != null)
                {
                    ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
                    return true;
                }
            }
            return ret;
        }

        public static bool CopyCellFormula(Cell FromCell, Cell ToCell)
        {
            bool ret = true;
            ToCell.CellFormula = FromCell.CellFormula;

            return ret;
        }
    }

    public static class ExcelReader
    {
        
        public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }
        /*
        public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            if (theCell.CellValue != null)
            {
                value = theCell.CellValue.InnerText;
                if (theCell.DataType != null && theCell.DataType.HasValue)
                {

                    if (theCell.DataType.Value == CellValues.SharedString)
                    {
                        if (sstp != null)
                        {
                            value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                        }
                    }
                    if (theCell.DataType.Value == CellValues.Date)
                    {
                        double dbDate;
                        if (double.TryParse(value, out dbDate))
                        {
                            value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                        }

                    }
                }
            }

            return value;
        }
        */
    }
}]]></ProjectItem><ProjectItem Name="\st_a7b701b3746943d2bcc4744e85a99b00.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_a7b701b3746943d2bcc4744e85a99b00.csproj</RootNamespace>
    <AssemblyName>ST_a7b701b3746943d2bcc4744e85a99b00.csproj</AssemblyName>
    <ProjectGuid>{1E4D6A11-DE46-45E9-A203-9A77B079EB84}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.0.5022.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase">
      <RequiredTargetFramework>3.0</RequiredTargetFramework>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptTask</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Settings.get_Default():ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Sett" +
    "ings")]

namespace ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a7b701b3746943d2bcc4744e85a99b00.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_a7b701b3746943d2bcc4744e85a99b00.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><BinaryItem Name="\bin\release\st_a7b701b3746943d2bcc4744e85a99b00.csproj.dll">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
AAAKb3kAAAosKAJveAAACm96AAAKGTMaAywXA297AAAKBihkAAAKKBMAACtvdwAACgoGKh4CKBAA
AAoqbgNvHAAACm8dAAAKAnsrAAAEFyheAAAKFv4BKhMwBAAqAAAAEgAAEXNSAAAGCgYDfSsAAAQC
bwYAACsG/gZTAAAGc18AAAooCgAAKygLAAArKh4CKBAAAAoqYgMCeywAAAQoQAAABgJ7LQAABCgr
AAAKKgATMAQAMQAAABMAABFzVAAABgoGA30sAAAEBgR9LQAABAJvBgAAKwb+BlUAAAZzXwAACigK
AAArKA4AACsqAAAAEzADABwAAAAOAAARAig9AAAGAig+AAAGF1gKEgAoRgAACigkAAAKKhMwAwAc
AAAADgAAEQIoPQAABgIoPgAABhdZChIAKEYAAAooJAAACioeAigQAAAKKmIDAnsuAAAEKEAAAAYC
ey8AAAQoKwAACipiAwJ7LgAABChAAAAGAnsvAAAEKCsAAAoqAAATMAQArQAAABQAABFzVgAABgwI
A30uAAAECAR9LwAABHNNAAAKCgJvBgAAKwj+BlcAAAZzXwAACigKAAArKA4AACsLBgdvHAAACigq
AAAKKD0AAAZvTgAACg8DKEYAAApvTgAACnJnBQBwb04AAAomFAsCbwYAACsI/gZYAAAGc18AAAoo
CgAAKygUAAArCwYHbxwAAAooKgAACig9AAAGb04AAAoPAyhGAAAKb04AAAomBm8vAAAKKh4CKBAA
AAoq5gNvHAAACm8dAAAKKD0AAAYCezAAAAQXKF4AAAotGQNvHAAACigqAAAKKD4AAAYCezEAAAT+
AioWKkYCbxwAAAooKgAACig+AAAGKgAAABswBADdAAAAFQAAEXNZAAAGEwQRBAMoPQAABn0wAAAE
c00AAAoKEQQDKD4AAAZ9MQAABHN8AAAKCwJvBgAAKxEE/gZaAAAGc18AAAooCgAAK34oAAAELREU
/gZIAAAGc30AAAqAKAAABH4oAAAEKBUAACsMCCxoCCgHAAArFjFfCG9+AAAKEwUrPhEFb38AAAoN
CW8mAAAKLC4HCW8cAAAKKCoAAAoJb4AAAAoGCW8cAAAKbx0AAApvTgAACnLDBQBwb04AAAomEQVv
cgAACi253gwRBSwHEQVvcwAACtwEBm8vAAAKUQcqAAAAARAAAAIAfABLxwAMAAAAABswAgBeAAAA
FgAAEXNNAAAKCgIoBwAAKxYxSAJvfgAACgwrKwhvfwAACgsHbyYAAAosHAYHbxwAAApvHQAACm9O
AAAKcsMFAHBvTgAACiYIb3IAAAotzd4KCCwGCG9zAAAK3AZvLwAACioAAAEQAAACABYAN00ACgAA
AAATMAMAJwEAABcAABEFJQs5HQEAAAdy4wUAcCgrAAAKLUkHcvEFAHAoKwAACi1NB3L5BQBwKCsA
AAotUQdyCwYAcCgrAAAKLVUHchUGAHAoKwAACi1ZB3IlBgBwKCsAAAo6pgAAADjHAAAAAwRzgQAA
Cm+CAAAKOLYAAAADBHOBAAAKb4IAAAo4pQAAAAMEc4EAAApvggAACjiUAAAAAwRzgQAACm+CAAAK
OIMAAAAEb0UAAApyMwYAcCgrAAAKLAhyeQUAcAorBnI9BgBwCgNveAAACiwbA294AAAKKIMAAAot
DgMGc4EAAApvggAACitAAxYohAAACm+FAAAKAwZzgQAACm+CAAAKKyYDGXOGAAAKb4UAAAoDAgQo
SgAABgwSAihGAAAKc4EAAApvggAAChcqABswBQB9AAAAGAAAERYKAixEAm97AAAKbxYAACtviAAA
Cg0rHQlviQAACgsHb3cAAAoDKCsAAAosBAYM3koGF1gKCW9yAAAKLdveCgksBglvcwAACtwCb3sA
AAoXjTEAAAETBBEEFgNzigAACqIRBHOLAAAKbxcAACsmAm97AAAKbyAAAAoGKggqAAAAARAAAAIA
FgApPwAKAAAAABMwBQA+AAAAGQAAERYKAiw3Ayw0AnJBBgBwcoEAAHBvjQAACgsDckEGAHBygQAA
cBIBKI4AAApvLwAACnOPAAAKb5AAAAoXKgYqAAATMAIAEAAAAAUAABEXCgMCbyUAAApvkQAACgYq
EzACAEgAAAAQAAARFAoCb3cAAAoKAm94AAAKLDUCb3gAAApveQAACiwoAm94AAAKb3oAAAoZMxoD
LBcDb3sAAAoGKGQAAAooEwAAK293AAAKCgYqtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2
Mi4wLjUwNzI3AAAAAAUAbAAAAHQRAAAjfgAA4BEAABQUAAAjU3RyaW5ncwAAAAD0JQAASAYAACNV
UwA8LAAAEAAAACNHVUlEAAAATCwAAFQHAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYA
AAEAAABNAAAAEAAAADEAAABaAAAATAAAAJEAAAACAAAAGwAAABkAAAAEAAAADQAAABYAAAAWAAAA
AQAAAAcAAAABAAAABwAAABcAAAAAAAoAAQAAAAAABgAwARsBCgBRARQBDgCgAXcBCgC8ARQBCgD8
AesBCgAtAhgCEgDhAsACEgAtAwoDEgA6A8ACEgBXAwoDEgBsA8ACEgCZA6kCCgAvBBQEEgBMBAoD
EgCfBAoDCgAxCBQECgBnCUgJCgChCY8JCgC4CY8JCgDVCY8JCgD0CY8JCgANCo8JCgAmCo8JCgBB
Co8JCgBcCo8JCgB1Co8JCgCuCo4KCgDOCo4KCgDsCo4KCgAhCw4LCgA+CxQBCgBDCxQBCgBnC48J
BgCTC30LBgCsC30LFgDOC8ELCgDdCxQBDgDrC3cBDgAFDHcBEgA9DAoDEgBiDAoDEgB6DKkCCgCW
DBQBEgCcDKkCEgC1DKkCCgDKDBQBEgDhDAoDEgAcCQoDEgALDakCGgCjDYMNGgC7DYMNEgDJDcAC
EgDnDQoDHgAVDhQBHgAoDhwOCgBJDhQBEgBTDsACEgBoDsACEgCdDsACCgDzDhQECgAODwIPEgAx
D6kCEgBnD6kCEgBzDwoDHgDJEBwOCgDmEBQECgBPETwRCgBkERQBBgCPEXARBgCVEXARBgCbEXAR
EgCxEQoDEgDJEakCEgDoEQoDEgBsEwoDEgB9EwoDEgCOE6kCAAAAAAEAAAAAAAEAAQAAARAAOQBC
AAUAAQABAAAAEAB4AEIACQACAAQAAQAQAIIAjQANAAQACAADAQAAuAAAABEAEgANAAEAEADGAI0A
CQAVAA0AAQAQANYAjQAJACIALwCBARAA7QCNAAkAKAA9AIEBEAD8AI0ACQApAEkAgQEQAAgBjQAJ
ACkATQADARAA5g8AAAkAKQBOAAMBEAAdEAAACQAqAFAAAwEQABASAAAJACsAUgADARAANxIAAAkA
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
BgkAAAIADgkAAAEAjAgAAAIAEwkAAAEAjAgAAAIADgkAAAMAHAkAAAEA8wgAAAEA8wgAAAEAjAgA
AAIADgkAAAMAJgkAAAQA/QgAAAEAjAgAAAIAMQkCAAMAPwkAAAEAdAkAAAEAHxMAAAEADgkAAAIA
egkAAAMAtQgAAAQAvAgAAAEADgkAAAIAtQgAAAEAfwkAAAIAiAkAAAEAfwkAAAIAiAkAAAEABgkA
AAIADgkAAAEABxAAAAEABxAAAAEABxAAAAEABxAAAAEABxAAAAEABxAAAAEABxCJAN0BHACRAN0B
pQCZAN0BpQChAN0BpQCpAN0BpQCxAN0BpQC5AN0BpQDBAN0BpQDJAN0BpQDRAN0BpQDZAN0BBwHh
AN0BHADpAN0BHAAJAN0BHADxAN0BHAARAN0BHAD5AFULjgH5AHALlgEpAN0BnAERAd0BqQEhAd0B
pQApAeQL8wEZAP0L+QExARkM/wE5ASQMBQIMADQMGAIpAeQLHwJBAUYMJgJhAFgMoQApAeQLKwJJ
AGwMMgJRAZEMHABxAKgMOAIUAFgMRQJxAdEMoQApAdoMSgJBAe0MUAJBAf0MVgKJARoNHAAxASEN
BwFBAEMNJgJhAEwNdgIpAVgNfAIxAa0NggKRATQMiAKZAVgMjwIRANEMoQApAdoMkwI5AMQNmgI5
ANYNoQKhAfANpwKJAf0NrQIcAN0BxQK5ATMOywJBAEIOJgLBAd0BpQDJAXQO3wKJAYAO5gLJAY4O
rQK5ATMO9gLZAawOHADZAbIOHAAZAN0BHAAMAN0BHAAMALoOAgMkAN0BHAC5Ab4OGwO5AcQOJgMp
Ac4OoQBZAdEMoQAkALoOAgMpAdYOfAJhAUwNSgMsAOQO1AC5Ae4O9gI0AFgMcQPpAd0BHADpARwP
rQN5ASMPJgLxAUgPoQB5Ad0BHAApAVEPtANhAEwNugN5AVkPwAN5AYUPxgN5AZUP0QPxAaUPpQCJ
ARwP3QMpAa4PAgQ8AFgMRQJ5AbwPOAJ5AcwPEARhANwPpQApAQkQRwREAN0BxQK5AREQVwS5ARcQ
9gJMAFgMcQNUALsQRQJZAcMQJwFcAN0BxQK5Ad4Q2ARkAPQQCwVsAAIRRQJ0AN0BxQJ8APQQCwWE
AAIRRQJUAFgMcQNMALsQRQJ5AN0BHABBAQ4RwAOJASARVQWJATARXQUZAlsRswAhArIOHAApAt0B
pQApApURtQU5AlgMoQCJAaMRoQBBAbwRygVJAtsRswCMAFgMRQJZAPoR3gUsAN0BHACUAN0BxQKc
APQQCwWkAAIRRQIsALoOAgOBAd0BpQBBAUgTWQaMAEwNYAaMAEwNbAZBAVYTeAaMAN0BhAaJAWMT
rQKsAPQQCwW0AAIRRQJhAt0BpQBZAt0B3QOJAYITVQWJAZ8TuwZpAlgMoQBpAt0BwwaJAawTygZB
AbkT2AYIAEwAdgAIAFAAewAhAGsAewAuAFsALAcuADsAFQcuAGMANQcuAEMADwcuABsADwcuABMA
3wYuACMADwcuACsADwcuADMA3wZJAKMAsAFjAHsAewBpAKMAsAGDAKsAuQFjAWsAewCAAWsAewCD
AWsAewCjAWsAewDDAWsAewDjAWsAewADAmsAewABBGsAewAhBGsAewABBWsAewCgBWsAewDABWsA
ewAACWsAewCkAVwCCgMzA1EDdgONA5MDmAOiA+UDFwRvBH4EaAWxBbwF6gXvBfQFLAZKBooGpwbR
BgIAAQADAAIABgAEAAcACAAAAOMBIAAAAPwBPQAAAHUCQgAAABoG4gAAACkG7AAAAC0G7AAAADEG
7AAAAFwH7AAAAGgH7AAAAHYH7AAAAIIHFQEAAJAHFQEAAJwHGQECAAEAAwACAAUABQACAAYABwAB
AAcABwACAA4ACQACAA8ACwABABAACwACABEADQABABIADQABABQADwACABMADwABADEAEQACADAA
EQACADIAEwABADMAEwACADQAFQABADUAFQABADcAFwACADYAFwACADgAGQABADkAGQACADoAGwAQ
Aj4CvAIPA1UDaAMHBE4EuATBBMkE/gQVBSMFPAVIBdUFDgYdBiQGlgaeBgSAAAABAAAAgxWkhQAA
AAAAAI0AAAACAAAAAAAAAAAAAAABABQBAAAAAAIAAAAAAAAAAAAAAAEASAEAAAAACgAAAAAAAAAA
AAAACgBYAQAAAAACAAAAnhMAAAAAAABKAKkCAAAAAAMABQAAAAAAAAAAAAEAwQsAAAAACgAAAAAA
AAAAAAAACgBkDQAAAAADAAUAAAAAAAAAAAABAAkOAAAAAAAAAAABAAAAyRMAAAUABAALAAYADAAG
AA0ACAAOAAgADwAIABAACABpALcCbQC3AnUA7AJ3APECeQDxAmkAFgOHABYDiQAWA5cAXQPBABYD
wwAWA80A8gTNADEFeQAWA+EAFgPjABYDaQDFBYkAxQWJAOQFlwAWA80AFwYPAZAGGQGQBgAAAAAA
PE1vZHVsZT4AU1RfYTdiNzAxYjM3NDY5NDNkMmJjYzQ3NDRlODVhOTliMDAuY3Nwcm9qLmRsbABT
ZXR0aW5ncwBTVF9hN2I3MDFiMzc0Njk0M2QyYmNjNDc0NGU4NWE5OWIwMC5jc3Byb2ouUHJvcGVy
dGllcwBSZXNvdXJjZXMAU2NyaXB0TWFpbgBTVF9hN2I3MDFiMzc0Njk0M2QyYmNjNDc0NGU4NWE5
OWIwMC5jc3Byb2oAU2NyaXB0UmVzdWx0cwBXYXRlcmZhbGxSZXBvcnQAV2F0ZXJmYWxsUmVwb3J0
U2VjdGlvbgBFeGNlbE5hdmlnYXRvcgBFeGNlbFdyaXRlcgBFeGNlbFJlYWRlcgBTeXN0ZW0AU3lz
dGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAbXNjb3JsaWIAT2JqZWN0
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5U
YXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAGRlZmF1bHRJ
bnN0YW5jZQBnZXRfRGVmYXVsdAAuY3RvcgBEZWZhdWx0AFN5c3RlbS5SZXNvdXJjZXMAUmVzb3Vy
Y2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJl
c291cmNlQ3VsdHVyZQBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJl
AEN1bHR1cmUAX1JlcG9ydGluZ0RhdGUAX3NGaWxlTmFtZQBfc0ZpbGVQYXRoAF9zRmlsZQBEb2N1
bWVudEZvcm1hdC5PcGVuWG1sAERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwuUGFja2FnaW5nAFNwcmVh
ZHNoZWV0RG9jdW1lbnQAX3NwcmVhZHNoZWV0RG9jdW1lbnQARG9jdW1lbnRGb3JtYXQuT3Blblht
bC5TcHJlYWRzaGVldABTaGVldABfc2hlZXQAV29ya3NoZWV0UGFydABfd29ya3NoZWV0UGFydABT
aGVldERhdGEAX3NoZWV0RGF0YQBTaGFyZWRTdHJpbmdUYWJsZVBhcnQAX3NoYXJlZFN0cmluZ1Rh
YmxlUGFydABTdHJpbmdWYWx1ZQBfc2hlZXRSZWZlcmVuY2VJZABfc1NoZWV0TmFtZQBfU3RhcnRD
ZWxsVmFsdWUAX1RydXN0SUQAX3dyAE1haW4AUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQB2YWx1ZV9f
AFN1Y2Nlc3MARmFpbHVyZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBEaWN0aW9uYXJ5YDIA
X1JlcG9ydFNlY3Rpb25zAFJvdwBfckRhdGEAX3JSb3dUeXBlAF9yVmFyaWFibGVOYW1lAF9yRmly
c3REYXRhUm93AF9DdXJyZW50Q29sSW5kZXgAX1RTMQBfVFMyAF9UUzMAQ2VsbABnZXRfUmVwb3J0
U2VjdGlvbnMAZ2V0X1RTMQBzZXRfVFMxAGdldF9UUzIAc2V0X1RTMgBnZXRfVFMzAHNldF9UUzMA
R2V0UmVwb3J0U2VjdGlvbgBNb3ZlVG9OZXh0Um93AE1vdmVUb1ByZXZSb3cATW92ZVRvTmV4dENl
bGwATW92ZVRvUHJldkNlbGwATW92ZVRvU2VjdGlvbkZpcnN0Q2VsbABNb3ZlVG9MYXN0Um93AEdl
dENlbGxWYWx1ZQBHZXRWYWx1ZVR5cGUAVXBkYXRlQ2VsbFZhbHVlAENvcHlGb3JtdWxhAElzU2Vj
dGlvbkxhc3RDb2x1bW4ASXNTZWN0aW9uRmlyc3RDb2x1bW4AR2V0Q2VsbABDb2x1bW5JbmRleABH
ZXREYXRhUm93AEdldFR5cGVSb3cAR2V0Rmlyc3REYXRhUm93AEdldFJlcG9ydENvbEluZGV4AFZl
cmlmeVJvdwBHZXRDb2x1bW5OYW1lAFJlcG9ydFNlY3Rpb25zAFRTMQBUUzIAVFMzAF9TZWN0aW9u
TmFtZQBfQ29sU3RhcnRJbmRleABfQ2VsbFN0YXJ0TmFtZQBfQ29sRW5kSW5kZXgAX0NlbGxFbmRO
YW1lAF9Db2xOYW1lTGlzdABnZXRfU2VjdGlvbk5hbWUAc2V0X1NlY3Rpb25OYW1lAGdldF9DZWxs
U3RhcnROYW1lAHNldF9DZWxsU3RhcnROYW1lAGdldF9DZWxsRW5kTmFtZQBzZXRfQ2VsbEVuZE5h
bWUAZ2V0X0NvbFN0YXJ0SW5kZXgAc2V0X0NvbFN0YXJ0SW5kZXgAZ2V0X0NvbEVuZEluZGV4AHNl
dF9Db2xFbmRJbmRleABnZXRfQ29sTmFtZUxpc3QAR2V0U2VjdGlvblJhbmdlAEdldENvbE51bWJl
cgBTZWN0aW9uTmFtZQBDZWxsU3RhcnROYW1lAENlbGxFbmROYW1lAENvbFN0YXJ0SW5kZXgAQ29s
RW5kSW5kZXgAQ29sTmFtZUxpc3QAR2V0Um93SW5kZXgAR2V0Um93AEdldENlbGxCeU5hbWUAR2V0
Q2VsbEJ5Q2VsbFZhbHVlAEdldE5leHRJbkNvbENlbGxOYW1lAEdldFByZXZJbkNvbENlbGxOYW1l
AEdldFJhbmdlQ2VsbE5hbWVzAEdldEZpbGxlZENvbHVtbkNlbGxSYW5nZQBJRW51bWVyYWJsZWAx
AEdldENlbGxSYW5nZU5hbWVzAEluc2VydFNoYXJlZFN0cmluZ0l0ZW0AQ29weUNlbGxTdHlsZQBD
b3B5Q2VsbEZvcm11bGEAdmFsdWUAc2QAc3N0AHN0YXJ0AFN0YXJ0SW5kZXgAcm93AHNTZWN0aW9u
TmFtZQBzVmFsdWUAc0RhdGFUeXBlAENlbGxSZWZlcmVuY2UAQ29sSW5kZXgAc05hbWUAQ29sU3Rh
cnQAQ29sRW5kAHNDZWxsTmFtZQBSb3dJbmRleAB0aGVDZWxsAHNzdHAAY2VsbE5hbWUAQ2VsbFZh
bHVlAHNDZWxsVmFsdWUAU3RhcnRDZWxsTmFtZQBDZWxsTGlzdABTeXN0ZW0uUnVudGltZS5JbnRl
cm9wU2VydmljZXMAT3V0QXR0cmlidXRlAGNlbGxzAGNlbGwARnJvbUNlbGwAVG9DZWxsAFN5c3Rl
bS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0
cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0
ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNz
ZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29t
cGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0
ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAERl
YnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVk
aXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBTeXN0ZW0uQWRkSW4A
QWRkSW5BdHRyaWJ1dGUAU3RyaW5nAEZvcm1hdABTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAEV2
ZW50c09iamVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBGaXJlSW5mb3JtYXRpb24AZ2V0X0l0ZW0AQ2Vs
bFR5cGUAZ2V0X0NlbGxSZWZlcmVuY2UAZ2V0X1ZhbHVlAFdvcmtzaGVldABnZXRfV29ya3NoZWV0
AE9wZW5YbWxQYXJ0Um9vdEVsZW1lbnQAU2F2ZQBJbnQzMgBVSW50MzJWYWx1ZQBnZXRfUm93SW5k
ZXgAT3BlblhtbFNpbXBsZVZhbHVlYDEAVUludDMyAFRvU3RyaW5nAENvbmNhdABDZWxsRm9ybXVs
YQBnZXRfQ2VsbEZvcm11bGEAZ2V0X0NlbGxWYWx1ZQBPcGVuWG1sRWxlbWVudABSZW1vdmUAc2V0
X1Rhc2tSZXN1bHQAPFByZUV4ZWN1dGU+Yl9fMABzAGdldF9OYW1lAG9wX0ltcGxpY2l0AG9wX0Vx
dWFsaXR5AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAE9wZW4AV29ya2Jv
b2tQYXJ0AGdldF9Xb3JrYm9va1BhcnQAV29ya2Jvb2sAZ2V0X1dvcmtib29rAERlc2NlbmRhbnRz
AFN5c3RlbS5Db3JlAEZ1bmNgMgBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAEZpcnN0T3JEZWZhdWx0
AGdldF9JZABFeGNlcHRpb24AT3BlblhtbFBhcnRDb250YWluZXIAT3BlblhtbFBhcnQAR2V0UGFy
dEJ5SWQAR2V0Rmlyc3RDaGlsZABHZXRQYXJ0c09mVHlwZQBPcGVuWG1sUGFja2FnZQBDbG9zZQBE
aXNwb3NlAEFkZABDb3VudABFbGVtZW50QXQAVG9VcHBlcgBvcF9JbmVxdWFsaXR5AGdldF9Db3Vu
dABMYXN0AEtleVZhbHVlUGFpcmAyAFN5c3RlbS5UZXh0AFN0cmluZ0J1aWxkZXIAQXBwZW5kAGdl
dF9SZWZlcmVuY2UAT3BlblhtbExlYWZUZXh0RWxlbWVudABnZXRfVGV4dABSZXBsYWNlAHNldF9S
ZWZlcmVuY2UARW51bVZhbHVlYDEAQ2VsbEZvcm11bGFWYWx1ZXMAZ2V0X0Zvcm11bGFUeXBlAHNl
dF9Gb3JtdWxhVHlwZQBzZXRfVGV4dABJc051bGxPckVtcHR5AGdldF9TaGFyZWRJbmRleABzZXRf
U2hhcmVkSW5kZXgAc2V0X1ZhbHVlADw+Y19fRGlzcGxheUNsYXNzNgA8R2V0Q2VsbD5iX180AGMA
Q29tcGFyZQBXaGVyZQBGaXJzdAA8PmNfX0Rpc3BsYXlDbGFzczEwAENlbGxSZWYAPFZlcmlmeVJv
dz5iX19jADxWZXJpZnlSb3c+Yl9fYQB3AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVs
ZWdhdGVkADxWZXJpZnlSb3c+Yl9fYgB0AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVs
ZWdhdGVlAGdldF9LZXkAUGFyc2UASU9yZGVyZWRFbnVtZXJhYmxlYDEAT3JkZXJCeQBJRW51bWVy
YXRvcmAxAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJlbnQAc2V0X0NlbGxSZWZlcmVuY2UASW5zZXJ0
QWZ0ZXJTZWxmAEluc2VydEFmdGVyAFN5c3RlbS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBNb3Zl
TmV4dABJRGlzcG9zYWJsZQBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMAUmVnZXgATWF0
Y2gAQ2FwdHVyZQBnZXRfSW5uZXJUZXh0AENlbGxWYWx1ZXMAZ2V0X0RhdGFUeXBlAE9wZW5YbWxT
aW1wbGVUeXBlAGdldF9IYXNWYWx1ZQBTaGFyZWRTdHJpbmdUYWJsZQBnZXRfU2hhcmVkU3RyaW5n
VGFibGUAPD5jX19EaXNwbGF5Q2xhc3MxADxHZXRDZWxsQnlOYW1lPmJfXzAAPD5jX19EaXNwbGF5
Q2xhc3M0ADxHZXRDZWxsQnlDZWxsVmFsdWU+Yl9fMwA8PmNfX0Rpc3BsYXlDbGFzczgAPEdldFJh
bmdlQ2VsbE5hbWVzPmJfXzYAPEdldFJhbmdlQ2VsbE5hbWVzPmJfXzcAPD5jX19EaXNwbGF5Q2xh
c3NkAHNTdGFyQ2VsbHRDb2x1bW5OYW1lAGlTdGFydENlbGxSb3dJbmRleAA8R2V0RmlsbGVkQ29s
dW1uQ2VsbFJhbmdlPmJfX2EAPEdldEZpbGxlZENvbHVtbkNlbGxSYW5nZT5iX19iAHIAQ1MkPD45
X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZWMAc2V0X0NlbGxWYWx1ZQBzZXRfRGF0YVR5
cGUARWxlbWVudHMAU2hhcmVkU3RyaW5nSXRlbQBUZXh0AEFwcGVuZENoaWxkAE9wZW5YbWxBdHRy
aWJ1dGUAR2V0QXR0cmlidXRlAFNldEF0dHJpYnV0ZQBzZXRfQ2VsbEZvcm11bGEAU1RfYTdiNzAx
YjM3NDY5NDNkMmJjYzQ3NDRlODVhOTliMDAuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwAAAH9TAFQAXwBhADcAYgA3ADAAMQBiADMANwA0ADYAOQA0ADMAZAAyAGIAYwBjADQA
NwA0ADQAZQA4ADUAYQA5ADkAYgAwADAALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAQBJYwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAA
YwBlAGwAbAAgAHcAaQB0AGgAIAB2AGEAbAB1AGUAPQAiAHsAMAB9ACIAADVQAHIAZQBwAGEAcgBl
ACAAVwBhAHQAZQByAGYAYQBsAGwAIAB0AGUAbQBwAGwAYQB0AGUAAE9TAGUAYwB0AGkAbwBuAHMA
IABSAGEAbgBnAGUAPQB7ADAAfQAsAHsAMQB9ACwAewAyAH0ALAB7ADMAfQAsAHsANAB9ACwAIAB7
ADUAfQAAF1IARQBQAE8AUgBUACAARABBAFQARQAAG00ATwBEAEUATAAgAFYARQBSAFMASQBPAE4A
AAtJAE4AUABVAFQAAA1PAFUAVABQAFUAVAAAGUQASQBTAFQAUgBJAEIAVQBUAEkATwBOAAAXRABJ
AFMAQwBSAEUAUABBAE4AQwBZAAAtUgBlAHAAbwByAHQAUwBlAGMAdABpAG8AbgBzACAAaQBzACAA
TgBVAEwATAAAK00AbwB2AGUAZAAgAHQAbwAgAHQAaABlACAAbABhAHMAdAAgAHIAbwB3AAATewAw
AH0AIAA6ACAAewAxAH0AACVSAG8AdwAgAHMAdABhAHIAdAAgAHAAbwBzAGkAdABpAG8AbgAAGVYA
ZQByAGkAZgBpAGUAZAAgAHIAbwB3AAA1UwBlAHQAIABmAGkAcgBzAHQAIABvAHUAdABwAHUAdAAg
AGMAZQBsAGwAOgAgAHsAMAB9AAA/TwB1AHQAcAB1AHQAIABzAHQAYQByAHQAIABwAG8AcwBpAHQA
aQBvAG4AIAAtACAAbgBvACAAYwBlAGwAbAABS2MAZQBsAGwAIAB7ADAAfQA6ACAAewAxAH0AIABo
AGEAcwAgAGcAbwB0ACAAYQBsAHIAZQBhAGQAeQAgAGYAbwByAG0AdQBsAGEAAC9DAG8AcAB5AEYA
bwByAG0AdQBsAGEAIABEAEkAUwBDAFIARQBQAEEATgBDAFkAADljAGUAbABsACAAewAwAH0AOgAg
AHsAMQB9ACAAZABvAGUAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AAAxVQBwAGQAYQB0AGUAIABDAGUA
bABsACAAVgBhAGwAdQBlACAATwBVAFQAUABVAFQAACVDAG8AcAB5AEYAbwByAG0AdQBsAGEAIABP
AFUAVABQAFUAVAAAJ00AbwB2AGUAIAB0AG8AIABEAEkAUwBDAFIARQBQAEEATgBDAFkAACd7ADAA
fQAgACwAIAB7ADEAfQAsACAAewAyAH0ALAAgAHsAMwB9AAAlRABpAG0AUgBlAHAAbwByAHQAaQBu
AGcARABhAHQAZQBJAEQAAA9UAHIAdQBzAHQASQBEAAAdUwB0AGEAcgB0AEMAZQBsAGwAVgBhAGwA
dQBlAAAzVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABsAGEAdABlAEYAaQBsAGUATgBhAG0AZQAA
K1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBQAGEAdABoAAATUwBoAGUAZQB0AE4A
YQBtAGUAAANcAABFQwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAAcwBoAGUAZQB0ACAAdwBp
AHQAaAAgAG4AYQBtAGUAIAB7ADAAfQAAAzoAAAM9AAAJbgB1AGwAbAAAAzEAAAUxAGEAAAUxAGIA
AAMyAAADMwAAAzQAAAM1AAADNgAAAzcAAAM4AAAHIAA9ACAAABVuAG8AIABmAG8AcgBtAHUAbABh
AAADOwAAE1sAQQAtAFoAYQAtAHoAXQArAAEHXABkACsAAA1EAG8AdQBiAGwAZQAAB2kAbgB0AAAR
QwB1AHIAcgBlAG4AYwB5AAAJRABhAHQAZQAAD0IAbwBvAGwAZQBhAG4AAA1zAHQAcgBpAG4AZwAA
CVQAUgBVAEUAAAMwAAADcwAAAAAA2UhMVSEH8U+dUoaV8yhrYgAIt3pcVhk04IkIiYRdzYCAzJED
BhIIBAAAEggDIAABBAgAEggDBhIVAwYSGQQAABIVBAAAEhkFAAEBEhkECAASFQQIABIZAgYOCDG/
OFatNk41AwYSHQMGEiEDBhIlAwYSKQMGEi0DBhIxAwYSGAIGCAMGERQEAAAAAAQBAAAACAYVEjUC
DhIcAwYSOQkgAwESKRItEj0JIAAVEjUCDhIcAyAADgQgAQEOCCADEhwIDhI5AyAAAgQgAQIOBSAC
Ag4OBiADAg4ODgQgABI9BSABEj0OAyAACAQgABI5BCABDggJKAAVEjUCDhIcAygADgcGFRI1Ag4O
DiAGAQ4IDggOFRI1Ag4OBCABAQgIIAAVEjUCDg4DKAAICCgAFRI1Ag4OBAABDg4EAAEIDgcAAhI5
EikIBwACDhI9Ei0HAAISPRIpDgkAAxI9EikSLQ4JAAQOEikSLQ4IDgADFRI1Ag4SPRIpDhAOCQAB
DhUSQQESPQkABAISLRI9Dg4GAAIIEi0OBwACAhI9Ej0DAAABBwABEn0RgIEFIAASgIUHIAIBDhKA
hQQHARIVBiABARGAjQgBAAIAAAAAADkBAApTY3JpcHRNYWluAwBUDgdWZXJzaW9uAzEuMFQOCVB1
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
BAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAA
AFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBFADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUA
SQBuAGYAbwAAACwDAAABADAAMAAwADAAMAA0AGIAMAAAAIAAKwABAEYAaQBsAGUARABlAHMAYwBy
AGkAcAB0AGkAbwBuAAAAAABTAFQAXwBhADcAYgA3ADAAMQBiADMANwA0ADYAOQA0ADMAZAAyAGIA
YwBjADQANwA0ADQAZQA4ADUAYQA5ADkAYgAwADAALgBjAHMAcAByAG8AagAAAAAAQAAPAAEARgBp
AGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUANQAwADcALgAzADQAMgAxADIAAAAAAIAA
LwABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYQA3AGIANwAwADEAYgAzADcANAA2
ADkANAAzAGQAMgBiAGMAYwA0ADcANAA0AGUAOAA1AGEAOQA5AGIAMAAwAC4AYwBzAHAAcgBvAGoA
LgBkAGwAbAAAAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMQA0AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfAGEANwBiADcAMAAxAGIAMwA3ADQANgA5ADQAMwBkADIAYgBjAGMANAA3
ADQANABlADgANQBhADkAOQBiADAAMAAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAA
cgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYQA3AGIANwAwADEAYgAzADcANAA2ADkANAAz
AGQAMgBiAGMAYwA0ADcANAA0AGUAOAA1AGEAOQA5AGIAMAAwAC4AYwBzAHAAcgBvAGoAAAAAAEQA
DwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA1ADAANwAuADMANAAy
ADEAMgAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NQA1ADAANwAuADMANAAyADEAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAcAAADAAAAFA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAA==</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="SSIS.Pipeline.2">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact">Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Populate Input &amp; Distribution</DTS:Property>
<DTS:Property DTS:Name="DTSID">{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}</DTS:Property>
<DTS:Property DTS:Name="Description">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Pipeline.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><pipeline id="0" name="pipelineXml" description="pipelineXml" defaultBufferMaxRows="10000" engineThreads="10" defaultBufferSize="10485760" BLOBTempStoragePath="" bufferTempStoragePath="" runInOptimizedMode="true">
<components>
<component id="1" name="GetFactVariableSet" componentClassID="{BCEFE59B-6819-47F7-A125-63753B33ABB7}" description="OLE DB Source" localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="7" pipelineVersion="0" contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7">
<properties>
<property id="2" name="CommandTimeout" dataType="System.Int32" state="default" isArray="false" description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="3" name="OpenRowset" dataType="System.String" state="default" isArray="false" description="Specifies the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="4" name="OpenRowsetVariable" dataType="System.String" state="default" isArray="false" description="Specifies the variable that contains the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="5" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="The SQL command to be executed." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">exec dbo.usp_GetFactVariableSet ?, '?'</property>
<property id="6" name="SqlCommandVariable" dataType="System.String" state="default" isArray="false" description="The variable that contains the SQL command to be executed." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">User::_query_GetFactVariableSet</property>
<property id="7" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property>
<property id="8" name="AlwaysUseDefaultCodePage" dataType="System.Boolean" state="default" isArray="false" description="Forces the use of the DefaultCodePage property value when describing character data." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="9" name="AccessMode" dataType="System.Int32" state="default" isArray="false" description="Specifies the mode used to access the database." typeConverter="AccessMode" UITypeEditor="" containsID="false" expressionType="None">3</property>
<property id="15" name="ParameterMapping" dataType="System.String" state="default" isArray="false" description="The mappings between the parameters in the SQL command and variables." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">"@DimReportingDateID",{6D8C3392-DD2B-48E7-B4D8-683A44055A43};"@VariableSetCode",{39A2D41B-0672-493B-A4C6-93F81733E4FD};</property></properties>
<connections>
<connection id="10" name="OleDbConnection" description="The OLE DB runtime connection used to access the database." connectionManagerID="{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}"/></connections>
<outputs>
<output id="11" name="OLE DB Source Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="17" name="VariableSetCode" description="" lineageId="17" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="16" mappedColumnId="0"/>
<outputColumn id="20" name="DimReportingDateId" description="" lineageId="20" precision="0" scale="0" length="0" dataType="i8" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="19" mappedColumnId="0"/>
<outputColumn id="23" name="VariableSetId" description="" lineageId="23" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="22" mappedColumnId="0"/>
<outputColumn id="26" name="VariableSetItemId" description="" lineageId="26" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="25" mappedColumnId="0"/>
<outputColumn id="29" name="Value" description="" lineageId="29" precision="0" scale="0" length="0" dataType="nText" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="28" mappedColumnId="0"/>
<outputColumn id="134" name="VariableName" description="" lineageId="134" precision="0" scale="0" length="1000" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="133" mappedColumnId="0"/>
<outputColumn id="137" name="DataType" description="" lineageId="137" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="136" mappedColumnId="0"/>
<outputColumn id="199" name="VariableType" description="" lineageId="199" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="198" mappedColumnId="0"/>
<outputColumn id="209" name="VersionName" description="" lineageId="209" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="208" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="True">
<externalMetadataColumn id="16" name="VariableSetCode" description="" precision="0" scale="0" length="200" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="19" name="DimReportingDateId" description="" precision="0" scale="0" length="0" dataType="i8" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="22" name="VariableSetId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="25" name="VariableSetItemId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="28" name="Value" description="" precision="0" scale="0" length="0" dataType="nText" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="133" name="VariableName" description="" precision="0" scale="0" length="1000" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="136" name="DataType" description="" precision="0" scale="0" length="50" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="198" name="VariableType" description="" precision="0" scale="0" length="50" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="208" name="VersionName" description="" precision="0" scale="0" length="200" dataType="wstr" codePage="0" mappedColumnId="0"/></externalMetadataColumns></output>
<output id="12" name="OLE DB Source Error Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="18" name="VariableSetCode" description="" lineageId="18" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="21" name="DimReportingDateId" description="" lineageId="21" precision="0" scale="0" length="0" dataType="i8" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="24" name="VariableSetId" description="" lineageId="24" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="27" name="VariableSetItemId" description="" lineageId="27" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="30" name="Value" description="" lineageId="30" precision="0" scale="0" length="0" dataType="nText" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="135" name="VariableName" description="" lineageId="135" precision="0" scale="0" length="1000" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="200" name="VariableType" description="" lineageId="200" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="138" name="DataType" description="" lineageId="138" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="210" name="VersionName" description="" lineageId="210" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="13" name="ErrorCode" description="" lineageId="13" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="14" name="ErrorColumn" description="" lineageId="14" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="31" name="Script Component" componentClassID="{2E42D45B-F83C-400F-8D77-61DDE6A7DF29}" description="Executes a custom script." localeId="-1" usesDispositions="false" validateExternalMetadata="True" version="4" pipelineVersion="0" contactInfo="Executes a custom script.;Microsoft Corporation; Microsoft SqlServer v10; © 2007 Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4">
<properties>
<property id="35" name="SourceCode" dataType="System.String" state="cdata" isArray="true" description="Stores the source code of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="18"><arrayElement dataType="System.String"><![CDATA[\main.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* Microsoft SQL Server Integration Services Script Component
*  Write scripts using Microsoft Visual C# 2008.
*  ScriptMain is the entry point class of the script.*/

using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
//using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    private string _ReportingDate;
    private string _sFileName;
    private string _sFilePath;
    private string _sFile;
    private SpreadsheetDocument _spreadsheetDocument;
    private Sheet _sheet;
    private WorksheetPart _worksheetPart;
    private SheetData _sheetData;
    private SharedStringTablePart _sharedStringTablePart;
    private DocumentFormat.OpenXml.StringValue _sheetReferenceId;
    private string _sSheetName;
    private string _StartCellValue;
    private int Count = 0;
    private string _TrustID;
    private WaterfallReport _wr;
    //private string _sInputRange;
    //private string _sOutputRange;
    //private Sheet _sheet_meta;
    //private DocumentFormat.OpenXml.StringValue _sheetReferenceId_meta;
    //private WorksheetPart _worksheetPart_meta;
    //private SheetData _sheetData_meta;
    private string _InputRange = "";
    bool _LastInputColumn = false;

    public override void PreExecute()
    {
        base.PreExecute();
        /*
          Add your code here for preprocessing or remove if not needed
        */
        _ReportingDate = Variables.DimReportingDateID;
        _TrustID = Variables.TrustID;
        _StartCellValue = Variables.StartCellValue;  //"REPORT DATE";
        _sFileName = Variables.WaterfallTemplateFileName;
        _sFilePath = Variables.WaterfallTemplatePath;
        _sSheetName = Variables.SheetName;
        _sFile = _sFilePath + "\\" + _sFileName;

        _spreadsheetDocument = SpreadsheetDocument.Open(_sFile, true);
        _spreadsheetDocument.WorkbookPart.Workbook.CalculationProperties.ForceFullCalculation = true;
        _spreadsheetDocument.WorkbookPart.Workbook.CalculationProperties.FullCalculationOnLoad = true;
        _sheet = _spreadsheetDocument.WorkbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == _sSheetName);
        _sheetReferenceId = _sheet.Id;
        if (_sheet == null) throw new Exception(string.Format("Could not find sheet with name {0}", _sSheetName));

        _worksheetPart = (WorksheetPart)_spreadsheetDocument.WorkbookPart.GetPartById(_sheetReferenceId);
        _sheetData = _worksheetPart.Worksheet.GetFirstChild<SheetData>();
        _sharedStringTablePart = _spreadsheetDocument.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();

    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
        //cleanup
        Variables.InputRange = _InputRange;
        _worksheetPart.Worksheet.Save();
        _sharedStringTablePart = null;
        _sheetData = null;
        _worksheetPart = null;
        _sheet = null;
        _spreadsheetDocument.Close();
        _spreadsheetDocument.Dispose();
        _spreadsheetDocument = null;
        _wr = null;
        
    }


    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
          Add your code here
        */
        bool bFireAgain = true;
        string sMsg = "";

        if (Row.VariableType.ToUpper() == "INPUT" || Row.VariableType.ToUpper() == "DISTRIBUTION")
        {
            byte[] byteValue = Row.Value.GetBlobData(0, Convert.ToInt32(Row.Value.Length));
            string sValue = System.Text.Encoding.Unicode.GetString(byteValue).Trim();
            sMsg = string.Format("{0} : {1}", Count.ToString(), sValue);
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            //Work with spreadsheet
            if (Count == 0)
            {
                
                var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
                if (StartCell == null)
                {
                    sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }
                _wr = new WaterfallReport(_sheetData, _sharedStringTablePart, StartCell);
                sMsg = string.Format("Sections Range={0},{1},{2},{3},{4}", _wr.ReportSections["REPORT DATE"].GetSectionRange(), _wr.ReportSections["INPUT"].GetSectionRange(), _wr.ReportSections["OUTPUT"].GetSectionRange(), _wr.ReportSections["DISTRIBUTION"].GetSectionRange(), _wr.ReportSections["DISCREPANCY"].GetSectionRange());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                if (_wr.ReportSections == null)
                {
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", "ReportSections is NULL", "", 0, ref bFireAgain);
                }

                _wr.MoveToLastRow();
                if (_wr.MoveToNextRow() != true)
                {
                    // Create next row
                }
                //Validate Row - row has to have all the columns of the waterfallreport

                _wr.MoveToSectionFirstCell("REPORT DATE");

                DateTime dtReportDate = new DateTime(1900, 1, 1);
               // if (DateTime.TryParse(_ReportingDate, out dtReportDate))
                //{ _wr.UpdateCellValue(dtReportDate.Date.ToString(), "Date"); }
                string ReportDate = "";
                string OADate = "";
                if (_ReportingDate.Length >= 8)
                {
                    ReportDate = string.Format("{0}/{1}/{2}", _ReportingDate.Substring(6, 2), _ReportingDate.Substring(4, 2), _ReportingDate.Substring(0, 4));
                    //int Year = int.Parse(_ReportingDate.Substring(0, 4));
                    //int Month = int.Parse(_ReportingDate.Substring(4, 2));
                    //int Day = int.Parse(_ReportingDate.Substring(6, 2));
                    //dtReportDate = new DateTime(Year, Month, Day);

                    sMsg = string.Format("REPORT DATE = {0}", ReportDate);
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                    OADate = DateToOADate(ReportDate);
                }
                sMsg = string.Format("REPORT DATE = {0}", ReportDate);
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                //_wr.UpdateCellValue(dtReportDate.ToOADate().ToString(), "Date");
                string CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
                _wr.UpdateCellValue(OADate, "Date", CellRef);

                //sMsg = string.Format("DISTRIBUTION={0}, {1}", _wr.ReportSections["DISTRIBUTION"].ColStartIndex.ToString(), _wr.ReportSections["DISTRIBUTION"].ColEndIndex.ToString());
                //ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            }

                if (_wr.MoveToNextCell())
                {
                    //sMsg = string.Format("VariableName={0}; VariableType{1}; Template variable type {2}", Row.VariableName, Row.VariableType, _wr.GetValueType());
                    //ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                    if (_LastInputColumn)
                    {
                        // THis is "Model VERSION" section populate it with VersionName.
                        if (_wr.GetValueType().ToUpper() == "MODEL VERSION")
                        {
                            string CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
                            _wr.UpdateCellValue(Row.VersionName, "string", CellRef);

                            // TODO UPDATE FORMULA in first OUTPUT column
                            CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + (_wr.GetDataRow().RowIndex.Value - 1).ToString();
                            string sOldFormula = _wr.GetCellValue(CellRef);
                            string sNewFormula = Row.VersionName;
                            if (sNewFormula != sOldFormula)
                            {
                                _wr.MoveToSectionFirstCell("OUTPUT");
                                CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
                                Cell cell = _wr.GetCell(CellRef);
                                cell.CellFormula.Text.Replace(sOldFormula, sNewFormula);
                            }

                        }
                        _wr.MoveToSectionFirstCell("DISTRIBUTION");
                        _LastInputColumn = false;
                        sMsg = "FIRST COLUMN DISTRIBUTION";
                        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                    }

                    if (Row.VariableType == _wr.GetValueType())
                    {
                        string CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
                        //Cell cell = _wr.GetCell(CellRef);
                        sMsg = string.Format("VariableName={0}; VariableType{1}; Cell {2}", Row.VariableName, Row.VariableType, CellRef);
                        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                        if (Row.VariableType.ToUpper() == "DISTRIBUTION" || Row.VariableType.ToUpper() == "INPUT")
                        {
                            if (Row.DataType == "Date") { sValue = DateToOADate(sValue); }
                            _wr.UpdateCellValue(sValue, Row.DataType, CellRef);
                        }
                    }
                    else
                    {
                        sMsg = string.Format("VariableName={0}; VariableType{1}; Template variable type {2}", Row.VariableName, Row.VariableType, _wr.GetValueType());
                        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                    }
                    if (_wr.IsSectionLastColumn("INPUT") && Row.VariableType == "INPUT")
                    {
                        _LastInputColumn = true;
                        //ComponentMetaData.FireInformation(1000, "Update Waterfall template", "SET DISTRIBUTION SECTION", "", 0, ref bFireAgain);
                        _InputRange = _wr.GetCell().CellReference.Value;
                        ComponentMetaData.FireInformation(1000, "Update Waterfall template InputRange", sMsg, _InputRange, 0, ref bFireAgain);
                        //_wr.MoveToSectionFirstCell("DISTRIBUTION");

                    }
                }
       
        }

        Count++;
    }

    private string DateToOADate(string sDate)
    {
        //int Year = int.Parse(sDate.Substring(0, 4));
        int Year = int.Parse(sDate.Substring(6, 4));
        //int Month = int.Parse(_ReportingDate.Substring(4, 2));
        int Month = int.Parse(sDate.Substring(3, 2));
        //int Day = int.Parse(_ReportingDate.Substring(6, 2));
        int Day = int.Parse(sDate.Substring(0, 2));
        DateTime dtDate = new DateTime(Year, Month, Day);
        return dtDate.ToOADate().ToString();
    }
}
    public class WaterfallReport
    {
        private SheetData _sheetData;
        private SharedStringTablePart _sharedStringTablePart;
        private Dictionary<string, WaterfallReportSection> _ReportSections = new Dictionary<string, WaterfallReportSection>();
        private Row _rColumnName;
        private Row _rData;
        private Row _rRowType;
        private Row _rFirstDataRow;
        private Row _rVariableName;
        private int _CurrentColIndex;
        private StringBuilder _sbT1 = new StringBuilder();

        public string T1
        { get { return _sbT1.ToString(); } }

        public WaterfallReport(SheetData sd, SharedStringTablePart sst, Cell start)
        {
            _sheetData = sd;
            _sharedStringTablePart = sst;
            int RowTypeIndex = ExcelNavigator.GetRowIndex(start.CellReference) - 1;
            int RowVariableName = RowTypeIndex - 5;

            _rRowType = ExcelNavigator.GetRow(_sheetData, RowTypeIndex);
            /*
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            //_ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            //_ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));
            */
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            _ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            //_ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));

            _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + 1);
            _rFirstDataRow = _rData;
            _rVariableName = ExcelNavigator.GetRow(_sheetData, RowVariableName);
        }

        public Dictionary<string, WaterfallReportSection> ReportSections
        {
            get { return this._ReportSections; }
        }

        private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
        {
            int ColStart = 0;
            int ColEnd = 0;
            string CellStartName = "";
            string CellEndName = "";
            Cell cell;
            string sLastCellValue = "";
            string sLastCellName = "";
            string sCellValue = "";
            string sCellName = "";

            WaterfallReportSection wrs = null;
            Dictionary<string, string> cn = new Dictionary<string, string>();

            int ColCount = row.Descendants<Cell>().Count<Cell>();
            for (int i = StartIndex; i <= ColCount - 1; i++)
            {
                cell = row.Descendants<Cell>().ElementAt(i);
                sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToString().ToUpper();
                sCellName = cell.CellReference.ToString();
                if (sCellValue != sLastCellValue && sCellValue == SectionName.ToUpper())
                {
                    CellStartName = sCellName;
                    ColStart = i;
                }
                if (sCellValue != sLastCellValue && sLastCellValue == SectionName.ToUpper())
                {
                    CellEndName = sLastCellName;
                    ColEnd = i - 1;
                    break;
                }
                if (sCellValue == SectionName.ToUpper())
                {
                    cn.Add(i.ToString(), ExcelNavigator.GetColumnName(cell.CellReference.Value));
                }
                if (i == ColCount - 1)
                {
                    CellEndName = sCellName;
                    ColEnd = i;
                }
                sLastCellValue = sCellValue;
                sLastCellName = cell.CellReference.ToString();
            }
            if (CellStartName != "" && CellEndName != "")
            {
                wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName, cn);
            }
            return wrs;
        }

        public bool MoveToNextRow()
        {
            Row r = _rData;
            bool ret = false;
            try
            {
                _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value));
                ret = true;
            }
            catch {_rData = r; }

            return ret;
       }

        public bool MoveToPrevRow()
        {
            bool ret = false;
            if (_rData.RowIndex - 2 > _rRowType.RowIndex)
            {
                _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value - 2));
                ret = true;
            }
            return ret;
        }

        public bool MoveToNextCell()
        {
            bool ret = false;
            if (_CurrentColIndex + 1 <= _ReportSections["DISCREPANCY"].ColEndIndex)
            {
                _CurrentColIndex++;
                ret = true;
            }
            return ret;
        }

        public bool MoveToPrevCell()
        {
            bool ret = false;
            if (_CurrentColIndex - 1 <= _ReportSections["REPORT DATE"].ColStartIndex)
            {
                _CurrentColIndex--;
                ret = true;
            }
            return ret;  
        }

        public bool MoveToSectionFirstCell(string sSectionName)
        {
            _CurrentColIndex = _ReportSections[sSectionName].ColStartIndex;
            return true;
        }

        public bool MoveToLastRow()
        {
            string sCellsList;
            string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
            Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
            if (cells != null && cells.Count > 0)
            {
                Cell LastFilledCell = cells.Last<KeyValuePair<string, Cell>>().Value;
                int FirstEmptyRowIndex = ExcelNavigator.GetRowIndex(LastFilledCell.CellReference) - 1;
                _rData = ExcelNavigator.GetRow(_sheetData, FirstEmptyRowIndex);
            }
            return true;
        }

        public string GetCellValue()
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            }
            catch { return null; }
        }

        public string GetCellValue(string CellReference)
        {
            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = ExcelNavigator.GetCellByName(_sheetData, CellReference);
                return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            }
            catch { return null; }
        }

        public string GetValueType()
        {
            Cell cell = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex);
            return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        }

        public bool UpdateCellValue(string sValue, string sDataType)
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
        }
/*
        public bool UpdateCellValue(string sValue, string sDataType, string CellReference)
        {
            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = this.GetCell(CellReference);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    _sbT1.Append(FromCell.CellReference.Value).Append(" = ").Append(cell.CellReference.Value).Append(";");
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
        }
    */
        public bool UpdateCellValue(string sValue, string sDataType, string CellReference)
        {
            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = this.GetCell(CellReference);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    string ColName = ExcelNavigator.GetColumnName(CellReference);
                    string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                    Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
        }

        public bool CopyFormula()
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    if (FromCell.CellFormula != null)
                    {
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        string sFormulaRef = FromCell.CellFormula.Reference.Value;
                        string sFormulaText = FromCell.CellFormula.Text;
                        CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                        cell.Append(cf);
                    }
                    //cell.CellValue.Remove();
                }
                return true;
            }
            catch { return false; }
        }

        public bool CopyFormula(string CellReference)
        {
            //StringBuilder sb1 = new StringBuilder();

            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = this.GetCell(CellReference);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {

                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    string ColName = ExcelNavigator.GetColumnName(CellReference);
                    string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                    Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                    string FromCellRef = "";
                    if (FromCell == null) { FromCellRef = "null"; } else { FromCellRef = FromCell.CellReference.Value; }
                    string sOldFormulaType = "";
                    string sNewFormulaType = "";
                    if (FromCell.CellFormula != null)
                    {
                        CellFormula cf;
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        string sFormulaRef = "";
                        if (FromCell.CellFormula.Reference != null)
                        { sFormulaRef = FromCell.CellFormula.Reference.Value; }
                        string sFormulaText = "";
                        if (!string.IsNullOrEmpty(FromCell.CellFormula.Text))
                        { sFormulaText = FromCell.CellFormula.Text; }
                        //FromCell.CellFormula.SharedIndex
                        //CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        sOldFormulaType = "";
                        if (FromCell.CellFormula.FormulaType != null)
                        { sOldFormulaType = FromCell.CellFormula.FormulaType.Value.ToString(); }
                        sNewFormulaType = "";
                        if (FromCell.CellFormula.FormulaType.Value == CellFormulaValues.Shared)
                        {
                            sNewFormulaType = sOldFormulaType;
                            //cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                            cf = new CellFormula() { FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                            // update formula reference in the first row
                            Cell FirstCell = ExcelNavigator.GetCellByName(_sheetData, ColName + _rFirstDataRow.RowIndex.Value.ToString());
                            if (!string.IsNullOrEmpty(FirstCell.CellFormula.Reference.Value))
                            {
                                string sFirstCellFormulaRef = FirstCell.CellFormula.Reference.Value;
                                FirstCell.CellFormula.Reference.Value = sFirstCellFormulaRef.Replace(sOldRowIndex, sNewRowIndex);
                            }
                        }
                        else
                        {
                            cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType };
                            cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                        }
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        cell.Append(cf);
                        //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                    }
                    else
                    {
                        //sb1.Append(FromCellRef).Append(" = ").Append("no formula");
                    }
                    //cell.CellValue.Remove();
                }

                return true;
            }
            catch { return false; }

        }

        public bool IsSectionLastColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColEndIndex)
            { ret = true; }
            return ret;
        }

        public bool IsSectionFirstColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColStartIndex)
            { ret = true; }
            return ret;
        }
        public Cell GetCell()
        {
            return _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        }

        public Cell GetCell(string CellReference)
        {
            try
            {
                return (Cell)_rData.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, CellReference, true) == 0).First();
                //sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
            }
            catch { return null; }
        }

        public int ColumnIndex()
        {
            return _CurrentColIndex;
        }
        public Row GetDataRow()
        {
            return _rData;
        }
        public Row GetTypeRow()
        {
            return _rRowType;
        }

        public int GetReportColIndex()
        {
            int ColIndex = 0;

            if (this._CurrentColIndex >= this._ReportSections["INPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["INPUT"].ColEndIndex)
            {
                ColIndex = this._CurrentColIndex - this._ReportSections["INPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["OUTPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["OUTPUT"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["OUTPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISTRIBUTION"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISTRIBUTION"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISTRIBUTION"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISCREPANCY"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISCREPANCY"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber() + this._ReportSections["DISTRIBUTION"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISCREPANCY"].ColStartIndex + 1;
            }

            return ColIndex;
        }
        public bool VerifyRow()
        {
            string CellRef = "";
            string LastCellRef = "";
            Cell LastCell = null;

            foreach (KeyValuePair<string, WaterfallReportSection> rs in _ReportSections.OrderBy(w => w.Value.ColStartIndex))
            {
                foreach (KeyValuePair<string, string> cn in rs.Value.ColNameList.OrderBy(t => int.Parse(t.Key)))
                {
                    CellRef = cn.Value + _rData.RowIndex.ToString();
                    if (LastCell == null) { LastCellRef = ""; }
                    else { LastCellRef = LastCell.CellReference.Value; }
                    try
                    {
                        Cell e = _rData.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, CellRef, true) == 0).FirstOrDefault<Cell>();
                        if (e == null)
                        {
                            e = new Cell() { CellReference = CellRef };
                            //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                            if (LastCell == null) { _rData.InsertAfterSelf<Cell>(e); }
                            else { _rData.InsertAfter<Cell>(e, LastCell); }

                        }
                        LastCell = e;
                    }
                    catch
                    {
                        Cell e = new Cell() { CellReference = CellRef };
                        //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                        _rData.InsertAfter<Cell>(e, LastCell);
                        LastCell = e;
                    }

                }
            }

            return true;
        }

        public string GetColumnName(int ColIndex)
        {
            string CellRef = "";

            CellRef = _rRowType.Descendants<Cell>().ElementAt(ColIndex).CellReference.Value;
            return ExcelNavigator.GetColumnName(CellRef);
        }

    }

    public class WaterfallReportSection
    {
        private string _SectionName;
        private int _ColStartIndex;
        private string _CellStartName;
        private int _ColEndIndex;
        private string _CellEndName;
        //private int _FieldsCount;
        private Dictionary<string, string> _ColNameList;

        public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName, Dictionary<string, string> List)
        {
            // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
            this._SectionName = sName;
            this._ColStartIndex = ColStart;
            this._CellStartName = CellStartName;
            this._ColEndIndex = ColEnd;
            this._CellEndName = CellEndName;
            this._ColNameList = List;
        }

        public string SectionName{ 
           get{ return this._SectionName;} 
           set{this._SectionName = value;}
            }
        public string CellStartName{ 
           get{ return this._CellStartName;} 
           set{this._CellStartName = value;}
            }
        public string CellEndName{ 
           get{ return this._CellEndName;} 
           set{this._CellEndName = value;}
            }
        public int ColStartIndex{ 
           get{ return this._ColStartIndex;} 
           set{this._ColStartIndex = value;}
            }
        public int ColEndIndex{ 
           get{ return this._ColEndIndex;} 
           set{this._ColEndIndex = value;}
            }
        public Dictionary<string, string> ColNameList
        {
            get { return this._ColNameList; }
            //set { this._ColNameList = value; }
        }
        public string GetSectionRange()
        {
            return this._CellStartName + ":" + this._CellEndName;
        }
        public int GetColNumber()
        {
            return this._ColEndIndex - this._ColStartIndex + 1;
        }

    }

    public static class ExcelNavigator
    {
        public static string GetColumnName(string sCellName)
        {
            Regex regex = new Regex("[A-Za-z]+");
            Match match = regex.Match(sCellName);

            return match.Value;
        }

        public static int GetRowIndex(string sCellName)
        {
            Regex regex = new Regex(@"\d+");
            Match match = regex.Match(sCellName);

            return int.Parse(match.Value);
        }

        public static Row GetRow(SheetData sd, int RowIndex)
        {
            return sd.Descendants<Row>().ElementAt(RowIndex);

        }

        private static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }

        public static Cell GetCellByName(SheetData sd, string cellName)
        {
            return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
        }

        public static Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
        {
            return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
        }

        public static string GetNextInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) + 1).ToString();
        }

        public static string GetPrevInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) - 1).ToString();
        }

        public static string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
        {
            StringBuilder sb = new StringBuilder();
            Cell cell;

            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
            cell = null;
            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

            return sb.ToString();
        }

        public static Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
        {
            string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
            StringBuilder sb = new StringBuilder();
            int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
            Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


            IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                            .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
            if (cells != null)
            {
                if (cells.Count<Cell>() > 0)
                {
                    foreach (Cell c in cells)
                    {
                        if (c.CellValue != null)
                        {
                            FilledCells.Add(c.CellReference, c);
                            sb.Append(c.CellReference.Value).Append(";");
                        }
                    }
                }
            }
            CellList = sb.ToString();
            return FilledCells;
        }

        public static string GetCellRangeNames(IEnumerable<Cell> cells)
        {
            StringBuilder sb = new StringBuilder();

            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                        sb.Append(c.CellReference.Value).Append(";");
                }
            }
            return sb.ToString();
        }
    }

    public static class ExcelWriter
    {
        public static bool UpdateCellValue(SharedStringTablePart sstp, Cell cell, string sValue, string sDataType)
        {
            string val;
            switch (sDataType)
            {
                case "Double":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "int":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Currency":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Date":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Numeric":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Boolean":
                    if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
                    if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
                    {
                        cell.CellValue = new CellValue(val);
                    }
                    else
                    {
                        cell.DataType = CellValues.Boolean;
                        cell.CellValue = new CellValue(val);

                    }
                    break;
                case "string":
                    cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                    cell.CellValue = new CellValue(InsertSharedStringItem(sstp, sValue).ToString());
                    break;
            }

            return true;
        }

        public static int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
        {
            int i = 0;
            if (sstp != null)
            {
                foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
                {
                    if (item.InnerText == sValue) { return i; }
                    i++;
                }

            }
            sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
            sstp.SharedStringTable.Save();

            return i;
        }

        public static bool CopyCellStyle(Cell FromCell, Cell ToCell)
        {
            bool ret = false;
            if (FromCell != null && ToCell != null)
            {
                OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
                if (FromAttr != null)
                {
                    ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
                    ret = true;
                }
            }
            return ret;
        }
        public static bool CopyCellFormula(Cell FromCell, Cell ToCell)
        {
            bool ret = true;
            ToCell.CellFormula = FromCell.CellFormula;

            return ret;
        }
    }

    public static class ExcelReader
    {
        
        public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }
     }
/*
        public static class ExcelReader
        {
            public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
            {
                string value = null;

                if (theCell.CellValue != null)
                {
                    value = theCell.CellValue.InnerText;
                    if (theCell.DataType != null && theCell.DataType.HasValue)
                    {

                        if (theCell.DataType.Value == CellValues.SharedString)
                        {
                            if (sstp != null)
                            {
                                value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                            }
                        }
                        if (theCell.DataType.Value == CellValues.Date)
                        {
                            double dbDate;
                            if (double.TryParse(value, out dbDate))
                            {
                                value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                            }

                        }
                    }
                }

                return value;
            }
        }
*/

    /*            if (Count == 0)
                {
                var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
                if (StartCell == null)
                {
                    sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }

                _RowTypeIndex = ExcelNavigator.GetRowIndex(StartCell.CellReference);
                _row_type = ExcelNavigator.GetRow(_sheetData, _RowTypeIndex);
                var StartDistibutionCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, "DISTRIBUTION");
                if (StartDistibutionCell == null)
                {
                    sMsg = string.Format("could not find cell with value=\"{0}\"", "DISTRIBUTION");
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }
                for (int i = 0; i < 85; i++)
                {
                    if (_row_type.Descendants<Cell>().ElementAt(i).CellReference == StartDistibutionCell.CellReference)
                    {
                        _CellColumnIndex = i;
                        break;
                    }
                }
                //Get columns with ReportingDate filled
                Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, StartCell.CellReference.ToString(), out CellList);
                sMsg = CellList;
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                //Get cell with last ReportingDate
                Cell LastFilledReportDate = cells.Last<KeyValuePair<string, Cell>>().Value;
                int FirstEmptyReportDateRowIndex = ExcelNavigator.GetRowIndex(LastFilledReportDate.CellReference);
                string FirstEmptyReportDateCellName = ExcelNavigator.GetColumnName(LastFilledReportDate.CellReference) + (FirstEmptyReportDateRowIndex + 1).ToString();
                sMsg = string.Format("First Empty ReportDate Cell Name={0}", FirstEmptyReportDateCellName);
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                //Find the INPUT Variables Range
                _sInputRange = ExcelNavigator.GetRangeCellNames(_sheetData, _sharedStringTablePart, "INPUT", FirstEmptyReportDateRowIndex);
                //c = GetCellByName(_sheetData_meta, "C6");
                //UpdateCellValue(c, _sInputRange, "string");
                //UpdateCellValue(c, "C38:CI38", "string");
                //Find the OUTPUT Variables Range
                _sOutputRange = ExcelNavigator.GetRangeCellNames(_sheetData, _sharedStringTablePart, "OUTPUT", FirstEmptyReportDateRowIndex);
                //c = GetCellByName(_sheetData_meta, "D6");
                //UpdateCellValue(c, _sOutputRange, "string");
                //UpdateCellValue(c, "CK38:FA38", "string");
                //Trigger VBA script
                //c = GetCellByName(_sheetData_meta, "F6");
                //UpdateCellValue(c, DateTime.Now.TimeOfDay.ToString(), "Date");
                //_worksheetPart_meta.Worksheet.Save();

                _row_data = ExcelNavigator.GetRow(_sheetData, FirstEmptyReportDateRowIndex);

                // Get first cell in the raw to fill with ReportingDate
                for (int i = 0; i < 85; i++)
                {
                    //ComponentMetaData.FireInformation(1000, "Update Waterfall template", _row.Descendants<Cell>().ElementAt(i).CellReference, "", 0, ref bFireAgain);
                    if (_row_data.Descendants<Cell>().ElementAt(i).CellReference == FirstEmptyReportDateCellName)
                    {
                        _CellColumnIndex = i;
                        break;
                    }
                }

                //Update cell value to ReportDate
                ExcelWriter.UpdateCellValue(_sharedStringTablePart, _row_data.Descendants<Cell>().ElementAt(_CellColumnIndex), _ReportingDate, "int");
                _CellColumnIndex++;

                }
     */
    /*
    private Row GetRow(SheetData sd, int RowIndex)
    {
        return _sheetData.Descendants<Row>().ElementAt(RowIndex);
        
    }

    private string GetCellValue(Cell theCell, SharedStringTablePart sstp)
    {
        string value = null;
        bool bFireAgain = true;

        value = theCell.InnerText;
        if (theCell.DataType != null && theCell.DataType.HasValue)
        {
            //ComponentMetaData.FireInformation(1000, "GetCellValue:", theCell.DataType.Value.ToString(), "", 0, ref bFireAgain);
            if (theCell.DataType.Value == CellValues.SharedString)
            {
                if (sstp != null)
                {
                    //ComponentMetaData.FireInformation(1000, "GetCellValue:", "3", "", 0, ref bFireAgain);
                    value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                }
            }
        }

        return value;
    }

    private Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
    {
        return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
    }
    
    private string GetColumnName(string sCellName)
    {
        Regex regex = new Regex("[A-Za-z]+");
        Match match = regex.Match(sCellName);

        return match.Value;
    }

    private int GetRowIndex(string sCellName)
    {
        Regex regex = new Regex(@"\d+");
        Match match = regex.Match(sCellName);

        return int.Parse(match.Value);
    }
   
    private Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
    {
        string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
        StringBuilder sb = new StringBuilder();
        int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
        Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


        IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                        .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
        if (cells != null)
        {
            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                    {
                        FilledCells.Add(c.CellReference, c);
                        sb.Append(c.CellReference.Value).Append(";");
                    }
                }
            }
        }
        CellList = sb.ToString();
        return FilledCells;
    }

    private string GetCellRangeNames(IEnumerable<Cell> cells)
    {
        StringBuilder sb = new StringBuilder();

        if (cells.Count<Cell>() > 0)
        {
            foreach (Cell c in cells)
            {
                if (c.CellValue != null)
                    sb.Append(c.CellReference.Value).Append(";");
            }
        }
        return sb.ToString();
    }

    private Cell GetCellByName(SheetData sd, string cellName)
    {
        return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
    }

    private bool UpdateCellValue(Cell cell, string sValue, string sDataType)
    {
        string val;
        switch (sDataType)
        {
            case "Double":
               cell.CellValue = new CellValue(sValue);
               break;
            case "int":
               cell.CellValue = new CellValue(sValue);
               break;
            case "Currency":
               cell.CellValue = new CellValue(sValue);
               break;
            case "Date":
               cell.CellValue = new CellValue(sValue);
               break;
            case "Boolean":
               if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
               if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
               {
                   cell.CellValue = new CellValue(val);
               }
               else
               {
                   cell.DataType = CellValues.Boolean;
                   cell.CellValue = new CellValue(val);
                   
               }
               break;
            case "string":
               cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
               cell.CellValue = new CellValue(InsertSharedStringItem(_sharedStringTablePart, sValue).ToString());
               break;
         }

        return true;
    }

    private int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
    {
        int i = 0;
        if (sstp != null)
        {
            foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
            {
                if (item.InnerText == sValue) { return i; }
                i++;
            }
            
        }
        sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
        sstp.SharedStringTable.Save();

        return i;
    }

    private bool CopyCellStyle(Cell FromCell, Cell ToCell)
    {
        bool ret = true;
        OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
        if (FromAttr != null)
        {
            ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
        }

        return ret;
    }
    
    private string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
    {
        StringBuilder sb = new StringBuilder();
        Cell cell;

        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
        cell = null;
        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

        return sb.ToString();
    }
     */



    //read entire spreadsheet
    /*
    foreach (Row r in _sheetData)
    {
        if (r == null) { sMsg = "null"; }
        else
        {
                    
            //ComponentMetaData.FireInformation(1000, "Update Waterfall template", r.InnerXml, "", 0, ref bFireAgain);
            StringBuilder sb = new StringBuilder("Row" + r.RowIndex.ToString() + ">");
            foreach (Cell c in r)
            {
                string sCellValue;
                if (c != null) //{ sb.Append("cell=null;"); }
                //else
                {
                    sCellValue = GetCellValue(c, _sharedStringTablePart);
                    //ComponentMetaData.FireInformation(1000, "After GetCellValue:", sCellValue, "", 0, ref bFireAgain);
                    sb.Append(sCellValue).Append(";");
                }
            }
            sMsg = sb.ToString();
            sb = null;
        }
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        if (r.RowIndex > 40) break;

    }
    */
    /*
                 var StartCell = GetCellByCellValue(_sheetData, _sharedStringTablePart, "REPORT DATE");
                sMsg = string.Format("CellName={0}, CellReference={1}", StartCell.LocalName,  StartCell.CellReference.ToString());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                var NextCell = (Cell)StartCell.NextSibling();
                sMsg = string.Format("CellName={0}, CellReference={1}", NextCell.LocalName, NextCell.CellReference.ToString());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                Row l = (Row)StartCell.Parent;
                sMsg = l.RowIndex.ToString();
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);


                IEnumerable<Cell> cells = GetFilledColumnCellRange(_sheetData, "B36");

                sMsg = GetCellRangeNames(cells);
                ComponentMetaData.FireInformation(1000, "Update Waterfall column cells", sMsg, "", 0, ref bFireAgain);

     */


]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.resx]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Settings.get_Default():SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Sett" +
    "ings")]

namespace SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.settings]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\assemblyinfo.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_aa7969bb20d54f10acdfc2649c1794fb.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_aa7969bb20d54f10acdfc2649c1794fb.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\bufferwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes)
        : base(Buffer, BufferColumnIndexes)
    {
    }

    public String VariableSetCode
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool VariableSetCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public Int64 DimReportingDateId
    {
        get
        {
            return Buffer.GetInt64(BufferColumnIndexes[1]);
        }
    }
    public bool DimReportingDateId_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public BlobColumn Value
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[2]];
        }
    }
    public bool Value_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String VariableName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool VariableName_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String DataType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool DataType_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public String VariableType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
    }
    public bool VariableType_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public String VersionName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
    }
    public bool VersionName_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\sc_aa7969bb20d54f10acdfc2649c1794fb.csproj]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>SC_aa7969bb20d54f10acdfc2649c1794fb.csproj</RootNamespace>
    <AssemblyName>SC_aa7969bb20d54f10acdfc2649c1794fb.csproj</AssemblyName>
    <ProjectGuid>{A8BCEE84-6561-47C4-8CD6-83954A962CD6}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.0.5022.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase">
      <RequiredTargetFramework>3.0</RequiredTargetFramework>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Compile Include="main.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to the add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptComponent</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\componentwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, PipelineBuffer Buffer)
    {

        if (InputID == 33)
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID)));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String DimReportingDateID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["DimReportingDateID"].Value);
        }
    }

    public String SheetName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["SheetName"].Value);
        }
    }

    public String StartCellValue
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["StartCellValue"].Value);
        }
    }

    public String TrustID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["TrustID"].Value);
        }
    }

    public String WaterfallTemplateFileName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplateFileName"].Value);
        }
    }

    public String WaterfallTemplatePath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplatePath"].Value);
        }
    }

    public String InputRange
    {
        get
        {
            return (String)(ParentComponent.ReadWriteVariables["_InputRange"].Value);
        }
        set
        {
            ParentComponent.ReadWriteVariables["_InputRange"].Value = value;
        }
    }

}
]]></arrayElement></arrayElements></property>
<property id="36" name="BinaryCode" dataType="System.String" state="cdata" isArray="true" description="Stores the binary representation of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="2"><arrayElement dataType="System.String"><![CDATA[\bin\release\sc_aa7969bb20d54f10acdfc2649c1794fb.csproj.dll]]></arrayElement><arrayElement dataType="System.String"><![CDATA[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
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3
AAAAAAUAbAAAADwVAAAjfgAAqBUAAGAZAAAjU3RyaW5ncwAAAAAILwAAXAUAACNVUwBkNAAAEAAA
ACNHVUlEAAAAdDQAANgHAAAjQmxvYgAAAAAAAAACAAABVxWiCQkLAAAA+gEzABYAAAEAAABUAAAA
FAAAADUAAAB1AAAAVQAAAK8AAAAcAAAAGwAAAAYAAAAgAAAAJwAAABcAAAABAAAACAAAAAEAAAAG
AAAAFwAAAAAACgABAAAAAAAGACgBEwEKAEkBDAEOAI4BbQEOAJ4BbQEKAOYB1QEKABcCAgISAIgC
bQESAEwEbQEWAGUGRAYWALEGjgYWAL4GRAYWANsGjgYWAPAGRAYWAB0HLQYKAMYHqwcWAOMHjgYK
AEAINAgWAFsIjgYKAKQLqwcKABIN8wwKAEwNOg0KAGMNOg0KAIANOg0KAJ8NOg0KALgNOg0KANEN
Og0KAOwNOg0KAAcOOg0KACAOOg0KAFkOOQ4KAHkOOQ4KAMIOOQ4KAPcO5A4KABQPDAEKABkPDAEK
AD0POg0GAGkPUw8GAIIPUw8aAPMPyw8aABoQyw8KADMQDAEOAHUQbQEWANwQRAYWAPoQjgYWABAR
jgYWAEARLQYWAIARLQYeAKcRDAEeALoRrhEKAOIRDAEWAOwRRAYWAAESRAYWABkSjgYWAE4SLQYW
AGoSRAYKAJoSDAEKALYSNAgKANASDAEiACwTAxMKAGsTDAEWAH4TLQYWAJcTLQYKAKwTDAEWAMET
jgYWAMoTjgYWAOYTLQYKAC8UDAEKAFMUqwcWAH4ULQYWAIoUjgYeANYVrhEKAPMVqwcKAFwWSRYK
AHEWDAEGAJwWfRYGAKIWfRYGAKgWfRYWAL4WjgYWAMkWLQYWAOgWjgYWAMcMjgYWALgYjgYWAMkY
jgYWANoYLQYAAAAAAQAAAAAAAQABAAABEAA5AEIABQABAAEAAAAQAHgAQgAJAAIABAABABAAggAA
AA0ABAAIAAEAEACQAAAACQAGAAwAAQAQAJwAAAAJAAcADQABABAApgAAABEACAAWAAEAEACzAAAA
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
AAAAAJYAeQuJAToAaEAAAAAAlgCLC5MBPgBkQQAAAACWALILogFBAFNAAAAAAJEAABhwBkIA4EEA
AAAAlgD9CKwBQwB0QwAAAACWAMQLtgFHABBEAAAAAJYA2wu9AUkAXEQAAAAAlgDpC70BSwB4RAAA
AACWAOMIbwFNAJM3AAAAAIYYxwEcAE8AmzcAAAAAhgANFbgETwAtOgAAAACGGMcBHABQAFE6AAAA
AIYATBW4BFAAED4AAAAAhhjHARwAUQAYPgAAAACGACMXuARRAGo+AAAAAIYYxwEcAFIAcj4AAAAA
hgBKF7gEUgAcPwAAAACGGMcBHABTACQ/AAAAAIYAdhe4BFMAPT8AAAAAhgCOF7gEVAARQAAAAACG
GMcBHABVABlAAAAAAIYA4Re4BFUAAAABAPkLAAABAP8LAAACAAcMAAABAAcMAAABAOMHAAABAA4M
AAABAA4MAAABAPkLAAABAAcMAAACABgMAAABAOMHAAABACwMAAABAK0QAAABADIMAAACADUMAAAD
ADkMAAABAD8MAAACAM8KAAADAEoMAAABAE4MAAABAFsMAAABAGkMAAACAHAMAAABAGkMAAACAHAM
AAADAFsMAAABAFsMAAABAE4MAAABAE4MAAABAFsMAAABAHoMAAABAGwVAAABAKUVAAABAIMMAAAC
AIkMAAADANsKAAAEAJIMAAAFAOkKAAAGAJkMAAABAPkLAAABAPkLAAABAPkLAAABAPkLAAABAPkL
AAABAJ4MAAABAJ4MAAABADIMAAACAKgMAAABALEMAAACALkMAAABADIMAAACAL4MAAABADIMAAAC
ALkMAAADAMcMAAABAJ4MAAABAJ4MAAABADIMAAACALkMAAADANEMAAAEAKgMAAABADIMAAACANwM
AgADAOoMAAABAB8NAAABAB8YAAABALkMAAACACUNAAADAGkMAAAEAHAMAAABALkMAAACAGkMAAAB
ACoNAAACADMNAAABACoNAAACADMNAAABALEMAAACALkMAAABABsVAAABABsVAAABABsVAAABABsV
AAABABsVAAABABsVAAABABsVoQDHARwAqQDHAWoAsQDHAWoAuQDHAWoAwQDHAWoAyQDHAWoA0QDH
AWoA2QDHAWoA4QDHAWoA6QDHAWoA8QDHAUIB+QDHARwAAQHHARwACQDHARwACQHHARwAEQDHARwA
EQErD84BEQFGD9cBKQDHAd0BKQHHAeoBGQDHARwAGQCXD/oBGQAEEAACOQEqEAYCQQFXBA0CGQA6
EAACQQFREBECIQDHAXMAIQAHDBYCIQAYDBoCOQBbEBwBIQBlEB4COQBsECMCOQAqECgCIQAMBXsA
IQAUBXsAUQHHARwAUQCvEDMCcQC4EDgCSQHEED4CGQCHBxwASQHQEEQCSQDXEEsCSQDpEFICWQED
EVgCYQEmEV4CcQG4EGQCaQFNEWsCaQFmEWsCeQGPEXICDADHAYoCiQHFEZACUQDUETMCSQHbEaQC
kQHHAWoAmQENEqoCWQAjErECeQExErcCmQE/EnICiQHFEccCGQCSBxwAsQFlEhwAuQF5EhwAuQF/
EhwASQGHEmYAQQCPEtMCwQGiEtcCQQCqEtwCyQG/EuMCyQFbEOkCSQHLEmYA0QHWEmYASQHbEe8C
GQBFE/YC2QFbE/wCFAAqEA8DSQHbERYD4QHHAR0DSQGPEhMBSQF0EyQDSQHbESoDgQCKEzIDHABX
BD8D+QHWEmYASQHQEEQDSQGzEz4CAQLWE0oDEQL9E2YASQEGFFADAQIOFDMCcQBXBGYA0QEgFGIB
4QEmFHADGQLWEmYAEQDWEmYAFADHARwAiQDHARwAFAA2FH4DJADHARwAiQFXB5cDiQE6FKIDJAA2
FH4D6QG4EMwDLABEFBMBiQFOFMcCNABXBPMDCQJiFDMCCQLHARwAcQC4EC8ECQJwFDUEPAC4EEQE
CQKcFFAEEQKsFGoAeQG1FFwESQG8FH4ECQLKFIMEPABXBD8DCQLaFDIDCQLqFI4EcQBREGoASQEd
Fb4ERADHAYoCiQElFc4EiQErFccCTABXBPMDVADOFT8DXADHAYoCiQHrFU8FZAABFoIFbAAPFj8D
dADHAYoCfAABFoIFhAAPFj8DVABXBPMDkQDHARwAAQIbFjUEeQEtFswFeQE9FtQFSQJoFnsAUQJ/
EhwAWQLHAWoAWQKiFiIGaQJXBGYAeQGwFmYAAQKbBDcGeQLbFnsAjABXBD8DaQD6FksGiQC1FGEG
LADHARwAlADHAYoCnAABFoIFpAAPFj8DAQIhGJ4GLAA2FH4DrADHAUIBrAA2FH4DrACIGN4GiQLH
AWoAAQKUGOcGjAC4EO4GjAC4EEQEAQKiGPoGjADHAQYHeQGvGHICtAABFoIFvAAPFj8DmQLHAWoA
kQLHAVwEeQHOGMwFeQHrGD4HoQJXBGYAoQLHAUYHeQH4GE0HAQIFGVsHIQBrAMUBLgBjALgHLgBD
AJIHLgBbAK8HLgATAGIHLgAbAJIHLgAjAJIHLgArAJIHLgAzAGIHLgA7AJgHSQCjAPEBYwB7AMUB
aQCjAPEBAwErAcUBwwFrAMUB4wFrAMUBAwJrAMUBIwJrAMUBQwJrAMUBYwJrAMUBgwJrAMUBYQRr
AMUBgQRrAMUBYQVrAMUBgAVrAMUBAAlrAMUBIAlrAMUBYAxrAMUB5QFWA3QDhgOvA8YD0wP4Aw8E
FQQaBCQEZASVBOYE9QTfBR4GKQZXBlwGZwakBsEGDAcqB1QHAgABAAMAAgAGAAQABwALAAkAGQAK
ABsAAADNASAAAADmAT0AAABfAkIAAAB5A28AAACMA28AAACWA28AAAClA28AAACtA28AAADHA28A
AADdA28AAAAgBW8AAAAwBYgAAABHBYwAAABaBYgAAAB0BZAAAAB6BYgAAACHBW8AAACUBYgAAACo
BW8AAACxBYgAAADBBW8AAADOBYgAAADiBW8AAADuBYgAAACWCW8AAACZCSEBAADPCm8AAADbCm8A
AADpCm8AAAD1ClABAAADC1ABAAAPC1QBAgABAAMAAgAFAAUAAgAGAAcAAQAHAAcAAgAOAAkAAgAP
AAsAAgAQAA0AAgARAA8AAgASABEAAgATABMAAgAUABUAAQAVABUAAgAXABcAAgAYABkAAgAZABsA
AgAaAB0AAgAbAB8AAgAcACEAAgAdACMAAgAeACUAAgAfACcAAgAgACkAAgAhACsAAgAiAC0AAgAj
AC8AAgAkADEAAgAtADMAAgAvADUAAQBMADcAAgBLADcAAgBNADkAAQBOADkAAQBQADsAAgBPADsA
AQBSAD0AAgBRAD0AAgBTAD8AAQBUAD8AAgBVAEEAgQIHAzgDiwPXA+oDOwTFBC8FOAVABXUFjAWa
BbMFvwVCBoAGjwaWBtcGGQchBwSAAAABAAAAgxUuiAAAAAAAAJcOAAACAAAAAAAAAAAAAAABAAwB
AAAAAAIAAAAAAAAAAAAAAAEAQAEAAAAACgAAAAAAAAAAAAAACgBQAQAAAAAKAAAAAAAAAAAAAAAK
AGcCAAAAAAIAAACeEwAAAAAAAJgALQYAAAAACgAAAAAAAAAAAAAACgCoDwAAAAADAAUAAAAAAAAA
AAABAJsRAAAAAAoAAAAAAAAAAAAAAAoA3xIAAAAAAAAAAAEAAAAVGQAADgAJAA8ACQAQAAsAEQAL
ABIACwATAAsAZQB8AmkAfAJ1AL0CdwDCAnkAwgJlAJIDyQCSA8sAkgPTAN8D9wCSA/kAkgMBAWkF
AQGoBXkAkgMTAZIDFQGSA2UAMgbLADIGywBRBtMAkgMBAYkGSwETB1UBEwcAAAA8TW9kdWxlPgBT
Q19hYTc5NjliYjIwZDU0ZjEwYWNkZmMyNjQ5YzE3OTRmYi5jc3Byb2ouZGxsAFNldHRpbmdzAFND
X2FhNzk2OWJiMjBkNTRmMTBhY2RmYzI2NDljMTc5NGZiLmNzcHJvai5Qcm9wZXJ0aWVzAFJlc291
cmNlcwBVc2VyQ29tcG9uZW50AENvbm5lY3Rpb25zAFZhcmlhYmxlcwBJbnB1dDBCdWZmZXIAU2Ny
aXB0TWFpbgBXYXRlcmZhbGxSZXBvcnQAV2F0ZXJmYWxsUmVwb3J0U2VjdGlvbgBFeGNlbE5hdmln
YXRvcgBFeGNlbFdyaXRlcgBFeGNlbFJlYWRlcgBTeXN0ZW0AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAbXNjb3JsaWIAT2JqZWN0AE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAU2NyaXB0Q29tcG9u
ZW50AFNjcmlwdEJ1ZmZlcgBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQALmN0b3IARGVmYXVs
dABTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUAZ2V0X1Jlc291cmNlTWFuYWdl
cgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlw
ZWxpbmVIb3N0AFBpcGVsaW5lQnVmZmVyAFByb2Nlc3NJbnB1dABJbnB1dDBfUHJvY2Vzc0lucHV0
AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cAUGFyZW50Q29tcG9uZW50AGdldF9EaW1SZXBvcnRpbmdE
YXRlSUQAZ2V0X1NoZWV0TmFtZQBnZXRfU3RhcnRDZWxsVmFsdWUAZ2V0X1RydXN0SUQAZ2V0X1dh
dGVyZmFsbFRlbXBsYXRlRmlsZU5hbWUAZ2V0X1dhdGVyZmFsbFRlbXBsYXRlUGF0aABnZXRfSW5w
dXRSYW5nZQBzZXRfSW5wdXRSYW5nZQBEaW1SZXBvcnRpbmdEYXRlSUQAU2hlZXROYW1lAFN0YXJ0
Q2VsbFZhbHVlAFRydXN0SUQAV2F0ZXJmYWxsVGVtcGxhdGVGaWxlTmFtZQBXYXRlcmZhbGxUZW1w
bGF0ZVBhdGgASW5wdXRSYW5nZQBnZXRfVmFyaWFibGVTZXRDb2RlAGdldF9WYXJpYWJsZVNldENv
ZGVfSXNOdWxsAGdldF9EaW1SZXBvcnRpbmdEYXRlSWQAZ2V0X0RpbVJlcG9ydGluZ0RhdGVJZF9J
c051bGwAQmxvYkNvbHVtbgBnZXRfVmFsdWUAZ2V0X1ZhbHVlX0lzTnVsbABnZXRfVmFyaWFibGVO
YW1lAGdldF9WYXJpYWJsZU5hbWVfSXNOdWxsAGdldF9EYXRhVHlwZQBnZXRfRGF0YVR5cGVfSXNO
dWxsAGdldF9WYXJpYWJsZVR5cGUAZ2V0X1ZhcmlhYmxlVHlwZV9Jc051bGwAZ2V0X1ZlcnNpb25O
YW1lAGdldF9WZXJzaW9uTmFtZV9Jc051bGwATmV4dFJvdwBFbmRPZlJvd3NldABWYXJpYWJsZVNl
dENvZGUAVmFyaWFibGVTZXRDb2RlX0lzTnVsbABEaW1SZXBvcnRpbmdEYXRlSWQARGltUmVwb3J0
aW5nRGF0ZUlkX0lzTnVsbABWYWx1ZQBWYWx1ZV9Jc051bGwAVmFyaWFibGVOYW1lAFZhcmlhYmxl
TmFtZV9Jc051bGwARGF0YVR5cGUARGF0YVR5cGVfSXNOdWxsAFZhcmlhYmxlVHlwZQBWYXJpYWJs
ZVR5cGVfSXNOdWxsAFZlcnNpb25OYW1lAFZlcnNpb25OYW1lX0lzTnVsbABfUmVwb3J0aW5nRGF0
ZQBfc0ZpbGVOYW1lAF9zRmlsZVBhdGgAX3NGaWxlAERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwARG9j
dW1lbnRGb3JtYXQuT3BlblhtbC5QYWNrYWdpbmcAU3ByZWFkc2hlZXREb2N1bWVudABfc3ByZWFk
c2hlZXREb2N1bWVudABEb2N1bWVudEZvcm1hdC5PcGVuWG1sLlNwcmVhZHNoZWV0AFNoZWV0AF9z
aGVldABXb3Jrc2hlZXRQYXJ0AF93b3Jrc2hlZXRQYXJ0AFNoZWV0RGF0YQBfc2hlZXREYXRhAFNo
YXJlZFN0cmluZ1RhYmxlUGFydABfc2hhcmVkU3RyaW5nVGFibGVQYXJ0AFN0cmluZ1ZhbHVlAF9z
aGVldFJlZmVyZW5jZUlkAF9zU2hlZXROYW1lAF9TdGFydENlbGxWYWx1ZQBDb3VudABfVHJ1c3RJ
RABfd3IAX0lucHV0UmFuZ2UAX0xhc3RJbnB1dENvbHVtbgBQcmVFeGVjdXRlAFBvc3RFeGVjdXRl
AERhdGVUb09BRGF0ZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBEaWN0aW9uYXJ5YDIAX1Jl
cG9ydFNlY3Rpb25zAFJvdwBfckNvbHVtbk5hbWUAX3JEYXRhAF9yUm93VHlwZQBfckZpcnN0RGF0
YVJvdwBfclZhcmlhYmxlTmFtZQBfQ3VycmVudENvbEluZGV4AFN5c3RlbS5UZXh0AFN0cmluZ0J1
aWxkZXIAX3NiVDEAZ2V0X1QxAENlbGwAZ2V0X1JlcG9ydFNlY3Rpb25zAEdldFJlcG9ydFNlY3Rp
b24ATW92ZVRvTmV4dFJvdwBNb3ZlVG9QcmV2Um93AE1vdmVUb05leHRDZWxsAE1vdmVUb1ByZXZD
ZWxsAE1vdmVUb1NlY3Rpb25GaXJzdENlbGwATW92ZVRvTGFzdFJvdwBHZXRDZWxsVmFsdWUAR2V0
VmFsdWVUeXBlAFVwZGF0ZUNlbGxWYWx1ZQBDb3B5Rm9ybXVsYQBJc1NlY3Rpb25MYXN0Q29sdW1u
AElzU2VjdGlvbkZpcnN0Q29sdW1uAEdldENlbGwAQ29sdW1uSW5kZXgAR2V0RGF0YVJvdwBHZXRU
eXBlUm93AEdldFJlcG9ydENvbEluZGV4AFZlcmlmeVJvdwBHZXRDb2x1bW5OYW1lAFQxAFJlcG9y
dFNlY3Rpb25zAF9TZWN0aW9uTmFtZQBfQ29sU3RhcnRJbmRleABfQ2VsbFN0YXJ0TmFtZQBfQ29s
RW5kSW5kZXgAX0NlbGxFbmROYW1lAF9Db2xOYW1lTGlzdABnZXRfU2VjdGlvbk5hbWUAc2V0X1Nl
Y3Rpb25OYW1lAGdldF9DZWxsU3RhcnROYW1lAHNldF9DZWxsU3RhcnROYW1lAGdldF9DZWxsRW5k
TmFtZQBzZXRfQ2VsbEVuZE5hbWUAZ2V0X0NvbFN0YXJ0SW5kZXgAc2V0X0NvbFN0YXJ0SW5kZXgA
Z2V0X0NvbEVuZEluZGV4AHNldF9Db2xFbmRJbmRleABnZXRfQ29sTmFtZUxpc3QAR2V0U2VjdGlv
blJhbmdlAEdldENvbE51bWJlcgBTZWN0aW9uTmFtZQBDZWxsU3RhcnROYW1lAENlbGxFbmROYW1l
AENvbFN0YXJ0SW5kZXgAQ29sRW5kSW5kZXgAQ29sTmFtZUxpc3QAR2V0Um93SW5kZXgAR2V0Um93
AEdldENlbGxCeU5hbWUAR2V0Q2VsbEJ5Q2VsbFZhbHVlAEdldE5leHRJbkNvbENlbGxOYW1lAEdl
dFByZXZJbkNvbENlbGxOYW1lAEdldFJhbmdlQ2VsbE5hbWVzAEdldEZpbGxlZENvbHVtbkNlbGxS
YW5nZQBJRW51bWVyYWJsZWAxAEdldENlbGxSYW5nZU5hbWVzAEluc2VydFNoYXJlZFN0cmluZ0l0
ZW0AQ29weUNlbGxTdHlsZQBDb3B5Q2VsbEZvcm11bGEAdmFsdWUASW5wdXRJRABCdWZmZXIAQ29t
cG9uZW50AEJ1ZmZlckNvbHVtbkluZGV4ZXMAc0RhdGUAc2QAc3N0AHN0YXJ0AFN0YXJ0SW5kZXgA
cm93AHNTZWN0aW9uTmFtZQBDZWxsUmVmZXJlbmNlAHNWYWx1ZQBzRGF0YVR5cGUAQ29sSW5kZXgA
c05hbWUAQ29sU3RhcnQAQ29sRW5kAExpc3QAc0NlbGxOYW1lAFJvd0luZGV4AHRoZUNlbGwAc3N0
cABjZWxsTmFtZQBDZWxsVmFsdWUAc0NlbGxWYWx1ZQBTdGFydENlbGxOYW1lAENlbGxMaXN0AFN5
c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBPdXRBdHRyaWJ1dGUAY2VsbHMAY2VsbABGcm9t
Q2VsbABUb0NlbGwAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3Vs
dHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFNDX2FhNzk2OWJiMjBkNTRmMTBhY2RmYzI2NDljMTc5NGZiLmNz
cHJvagBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNz
AERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRU
eXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVs
AEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBHZXRDb2x1bW5J
bmRleGVzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUnVudGltZS5XcmFwcGVyAElEVFNWYXJpYWJsZXMxMDAAZ2V0X1JlYWRPbmx5VmFy
aWFibGVzAElEVFNWYXJpYWJsZTEwMABnZXRfSXRlbQBTdHJpbmcAZ2V0X1JlYWRXcml0ZVZhcmlh
YmxlcwBzZXRfVmFsdWUAR2V0U3RyaW5nAElzTnVsbABHZXRJbnQ2NABTU0lTU2NyaXB0Q29tcG9u
ZW50RW50cnlQb2ludEF0dHJpYnV0ZQA8UHJlRXhlY3V0ZT5iX18wAHMAZ2V0X05hbWUAb3BfSW1w
bGljaXQAb3BfRXF1YWxpdHkAQ29uY2F0AE9wZW4AV29ya2Jvb2tQYXJ0AGdldF9Xb3JrYm9va1Bh
cnQAV29ya2Jvb2sAZ2V0X1dvcmtib29rAENhbGN1bGF0aW9uUHJvcGVydGllcwBnZXRfQ2FsY3Vs
YXRpb25Qcm9wZXJ0aWVzAEJvb2xlYW5WYWx1ZQBzZXRfRm9yY2VGdWxsQ2FsY3VsYXRpb24Ac2V0
X0Z1bGxDYWxjdWxhdGlvbk9uTG9hZABPcGVuWG1sRWxlbWVudABEZXNjZW5kYW50cwBTeXN0ZW0u
Q29yZQBGdW5jYDIAU3lzdGVtLkxpbnEARW51bWVyYWJsZQBGaXJzdE9yRGVmYXVsdABnZXRfSWQA
Rm9ybWF0AEV4Y2VwdGlvbgBPcGVuWG1sUGFydENvbnRhaW5lcgBPcGVuWG1sUGFydABHZXRQYXJ0
QnlJZABXb3Jrc2hlZXQAZ2V0X1dvcmtzaGVldABHZXRGaXJzdENoaWxkAEdldFBhcnRzT2ZUeXBl
AE9wZW5YbWxQYXJ0Um9vdEVsZW1lbnQAU2F2ZQBPcGVuWG1sUGFja2FnZQBDbG9zZQBEaXNwb3Nl
AFRvVXBwZXIAZ2V0X0xlbmd0aABDb252ZXJ0AFRvSW50MzIAR2V0QmxvYkRhdGEARW5jb2RpbmcA
Z2V0X1VuaWNvZGUAVHJpbQBJbnQzMgBUb1N0cmluZwBNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1Bp
cGVsaW5lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAElEVFND
b21wb25lbnRNZXRhRGF0YTEwMABnZXRfQ29tcG9uZW50TWV0YURhdGEARmlyZUluZm9ybWF0aW9u
AERhdGVUaW1lAFN1YnN0cmluZwBVSW50MzJWYWx1ZQBnZXRfUm93SW5kZXgAT3BlblhtbFNpbXBs
ZVZhbHVlYDEAVUludDMyAG9wX0luZXF1YWxpdHkAQ2VsbFR5cGUAQ2VsbEZvcm11bGEAZ2V0X0Nl
bGxGb3JtdWxhAE9wZW5YbWxMZWFmVGV4dEVsZW1lbnQAZ2V0X1RleHQAUmVwbGFjZQBnZXRfQ2Vs
bFJlZmVyZW5jZQBQYXJzZQBUb09BRGF0ZQBEb3VibGUAQWRkAEVsZW1lbnRBdABnZXRfQ291bnQA
TGFzdABLZXlWYWx1ZVBhaXJgMgBnZXRfUmVmZXJlbmNlAHNldF9SZWZlcmVuY2UARW51bVZhbHVl
YDEAQ2VsbEZvcm11bGFWYWx1ZXMAc2V0X0Zvcm11bGFUeXBlAHNldF9UZXh0AEFwcGVuZABJc051
bGxPckVtcHR5AGdldF9Gb3JtdWxhVHlwZQBnZXRfU2hhcmVkSW5kZXgAc2V0X1NoYXJlZEluZGV4
ADw+Y19fRGlzcGxheUNsYXNzNQA8R2V0Q2VsbD5iX18zAGMAQ29tcGFyZQBXaGVyZQBGaXJzdAA8
PmNfX0Rpc3BsYXlDbGFzc2YAQ2VsbFJlZgA8VmVyaWZ5Um93PmJfX2IAPFZlcmlmeVJvdz5iX185
AHcAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZWMAPFZlcmlmeVJvdz5iX19h
AHQAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZWQAZ2V0X0tleQBJT3JkZXJl
ZEVudW1lcmFibGVgMQBPcmRlckJ5AElFbnVtZXJhdG9yYDEAR2V0RW51bWVyYXRvcgBnZXRfQ3Vy
cmVudABzZXRfQ2VsbFJlZmVyZW5jZQBJbnNlcnRBZnRlclNlbGYASW5zZXJ0QWZ0ZXIAU3lzdGVt
LkNvbGxlY3Rpb25zAElFbnVtZXJhdG9yAE1vdmVOZXh0AElEaXNwb3NhYmxlAFN5c3RlbS5UZXh0
LlJlZ3VsYXJFeHByZXNzaW9ucwBSZWdleABNYXRjaABDYXB0dXJlAGdldF9Jbm5lclRleHQAQ2Vs
bFZhbHVlcwBPcGVuWG1sU2ltcGxlVHlwZQBnZXRfSGFzVmFsdWUAU2hhcmVkU3RyaW5nVGFibGUA
Z2V0X1NoYXJlZFN0cmluZ1RhYmxlADw+Y19fRGlzcGxheUNsYXNzMQA8R2V0Q2VsbEJ5TmFtZT5i
X18wADw+Y19fRGlzcGxheUNsYXNzNAA8R2V0Q2VsbEJ5Q2VsbFZhbHVlPmJfXzMAPD5jX19EaXNw
bGF5Q2xhc3M4ADxHZXRSYW5nZUNlbGxOYW1lcz5iX182ADxHZXRSYW5nZUNlbGxOYW1lcz5iX183
ADw+Y19fRGlzcGxheUNsYXNzZABzU3RhckNlbGx0Q29sdW1uTmFtZQBpU3RhcnRDZWxsUm93SW5k
ZXgAPEdldEZpbGxlZENvbHVtbkNlbGxSYW5nZT5iX19hADxHZXRGaWxsZWRDb2x1bW5DZWxsUmFu
Z2U+Yl9fYgByAGdldF9DZWxsVmFsdWUAPFByaXZhdGVJbXBsZW1lbnRhdGlvbkRldGFpbHM+ezM4
QTY2N0QxLTkyQkMtNDkyRS1BMkU2LTdGQjQ5QTU3NDFGRH0AJCRtZXRob2QweDYwMDAwNWYtMQBU
cnlHZXRWYWx1ZQBzZXRfQ2VsbFZhbHVlAHNldF9EYXRhVHlwZQBFbGVtZW50cwBTaGFyZWRTdHJp
bmdJdGVtAFRleHQAQXBwZW5kQ2hpbGQAT3BlblhtbEF0dHJpYnV0ZQBHZXRBdHRyaWJ1dGUAU2V0
QXR0cmlidXRlAHNldF9DZWxsRm9ybXVsYQBTQ19hYTc5NjliYjIwZDU0ZjEwYWNkZmMyNjQ5YzE3
OTRmYi5jc3Byb2ouUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAf1MAQwBfAGEAYQA3
ADkANgA5AGIAYgAyADAAZAA1ADQAZgAxADAAYQBjAGQAZgBjADIANgA0ADkAYwAxADcAOQA0AGYA
YgAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AAAlRABpAG0AUgBlAHAAbwByAHQAaQBuAGcARABhAHQAZQBJAEQAABNTAGgAZQBlAHQATgBhAG0A
ZQAAHVMAdABhAHIAdABDAGUAbABsAFYAYQBsAHUAZQAAD1QAcgB1AHMAdABJAEQAADNXAGEAdABl
AHIAZgBhAGwAbABUAGUAbQBwAGwAYQB0AGUARgBpAGwAZQBOAGEAbQBlAAArVwBhAHQAZQByAGYA
YQBsAGwAVABlAG0AcABsAGEAdABlAFAAYQB0AGgAABdfAEkAbgBwAHUAdABSAGEAbgBnAGUAAANc
AABFQwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAAcwBoAGUAZQB0ACAAdwBpAHQAaAAgAG4A
YQBtAGUAIAB7ADAAfQAAAQALSQBOAFAAVQBUAAAZRABJAFMAVABSAEkAQgBVAFQASQBPAE4AABN7
ADAAfQAgADoAIAB7ADEAfQAAM1UAcABkAGEAdABlACAAVwBhAHQAZQByAGYAYQBsAGwAIAB0AGUA
bQBwAGwAYQB0AGUAAEljAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABjAGUAbABsACAAdwBp
AHQAaAAgAHYAYQBsAHUAZQA9ACIAewAwAH0AIgAARVMAZQBjAHQAaQBvAG4AcwAgAFIAYQBuAGcA
ZQA9AHsAMAB9ACwAewAxAH0ALAB7ADIAfQAsAHsAMwB9ACwAewA0AH0AABdSAEUAUABPAFIAVAAg
AEQAQQBUAEUAAA1PAFUAVABQAFUAVAAAF0QASQBTAEMAUgBFAFAAQQBOAEMAWQAALVIAZQBwAG8A
cgB0AFMAZQBjAHQAaQBvAG4AcwAgAGkAcwAgAE4AVQBMAEwAABd7ADAAfQAvAHsAMQB9AC8AewAy
AH0AACNSAEUAUABPAFIAVAAgAEQAQQBUAEUAIAA9ACAAewAwAH0AAAlEAGEAdABlAAAbTQBPAEQA
RQBMACAAVgBFAFIAUwBJAE8ATgAADXMAdAByAGkAbgBnAAAzRgBJAFIAUwBUACAAQwBPAEwAVQBN
AE4AIABEAEkAUwBUAFIASQBCAFUAVABJAE8ATgAAV1YAYQByAGkAYQBiAGwAZQBOAGEAbQBlAD0A
ewAwAH0AOwAgAFYAYQByAGkAYQBiAGwAZQBUAHkAcABlAHsAMQB9ADsAIABDAGUAbABsACAAewAy
AH0AAHtWAGEAcgBpAGEAYgBsAGUATgBhAG0AZQA9AHsAMAB9ADsAIABWAGEAcgBpAGEAYgBsAGUA
VAB5AHAAZQB7ADEAfQA7ACAAVABlAG0AcABsAGEAdABlACAAdgBhAHIAaQBhAGIAbABlACAAdAB5
AHAAZQAgAHsAMgB9AABJVQBwAGQAYQB0AGUAIABXAGEAdABlAHIAZgBhAGwAbAAgAHQAZQBtAHAA
bABhAHQAZQAgAEkAbgBwAHUAdABSAGEAbgBnAGUAAAM6AAATWwBBAC0AWgBhAC0AegBdACsAAQdc
AGQAKwAAAzsAAA1EAG8AdQBiAGwAZQAAB2kAbgB0AAARQwB1AHIAcgBlAG4AYwB5AAAPTgB1AG0A
ZQByAGkAYwAAD0IAbwBvAGwAZQBhAG4AAAlUAFIAVQBFAAADMQAAAzAAAANzAAAA0WemOLySLkmi
5n+0mldB/QAIt3pcVhk04IkIiYRdzYCAzJEDBhIIBAAAEggDIAABBAgAEggDBhIVAwYSGQQAABIV
BAAAEhkFAAEBEhkECAASFQQIABIZAwYSFAMGEhgGIAIBCBIdBSABARIcAwYSDQUgAQESDQMgAA4E
IAEBDgMoAA4HIAIBEh0dCAMgAAIDIAAKBCAAEiEDKAACAygACgQoABIhAgYOCDG/OFatNk41AwYS
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
Tm9uRXhjZXB0aW9uVGhyb3dzAQD8gQAAAAAAAAAAAAAeggAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAEIIAAAAAAAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAA
AAAAAAAAAAAAAAABAAAAAABIAAAAWKAAAPADAAAAAAAAAAAAAPADNAAAAFYAUwBfAFYARQBSAFMA
SQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAuiIMVAAABAC6IgxU/AAAAAAAAAAQAAAAC
AAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIA
YQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBm
AG8AAAAsAwAAAQAwADAAMAAwADAANABiADAAAACAACsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBDAF8AYQBhADcAOQA2ADkAYgBiADIAMABkADUANABmADEAMABhAGMAZABm
AGMAMgA2ADQAOQBjADEANwA5ADQAZgBiAC4AYwBzAHAAcgBvAGoAAAAAAEAADwABAEYAaQBsAGUA
VgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADUAMAA3AC4AMwA0ADgANgAyAAAAAACAAC8AAQBJ
AG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAGEAYQA3ADkANgA5AGIAYgAyADAAZAA1ADQA
ZgAxADAAYQBjAGQAZgBjADIANgA0ADkAYwAxADcAOQA0AGYAYgAuAGMAcwBwAHIAbwBqAC4AZABs
AGwAAAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADEANAAAAIgALwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBt
AGUAAABTAEMAXwBhAGEANwA5ADYAOQBiAGIAMgAwAGQANQA0AGYAMQAwAGEAYwBkAGYAYwAyADYA
NAA5AGMAMQA3ADkANABmAGIALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAAB4ACsAAQBQAHIAbwBk
AHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfAGEAYQA3ADkANgA5AGIAYgAyADAAZAA1ADQAZgAxADAA
YQBjAGQAZgBjADIANgA0ADkAYwAxADcAOQA0AGYAYgAuAGMAcwBwAHIAbwBqAAAAAABEAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUANQAwADcALgAzADQAOAA2ADIA
AAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUANQAw
ADcALgAzADQAOAA2ADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAwMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA=]]></arrayElement></arrayElements></property>
<property id="37" name="VSTAProjectName" dataType="System.String" state="default" isArray="false" description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None">SC_aa7969bb20d54f10acdfc2649c1794fb</property>
<property id="38" name="ScriptLanguage" dataType="System.String" state="default" isArray="false" description="Specifies the programming language used by the script." typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" UITypeEditor="" containsID="false" expressionType="None">CSharp</property>
<property id="39" name="ReadOnlyVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read-only variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">User::DimReportingDateID,User::SheetName,User::StartCellValue,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath</property>
<property id="40" name="ReadWriteVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read/write variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">User::_InputRange</property>
<property id="41" name="BreakpointCollection" dataType="System.String" state="default" isArray="true" description="List of breakpoints present on the script." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="0"/></property>
<property id="42" name="UserComponentTypeName" dataType="System.String" state="default" isArray="false" description="" typeConverter="" UITypeEditor="" containsID="false" expressionType="None">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property></properties>
<inputs>
<input id="33" name="Input 0" description="" hasSideEffects="true" dangling="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="44" name="" description="" lineageId="17" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="45" name="" description="" lineageId="20" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="46" name="" description="" lineageId="29" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="139" name="" description="" lineageId="134" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="140" name="" description="" lineageId="137" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="202" name="" description="" lineageId="199" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="212" name="" description="" lineageId="209" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
</inputColumns><externalMetadataColumns isUsed="False"/></input>
</inputs>
</component>
</components>
<paths>
<path id="43" name="OLE DB Source Output" description="" startId="11" endId="33"/>
</paths></pipeline></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Run VBA script</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_3cebff10c8704deab0d1d458e2263943" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::_InputRange,User::DimReportingDateID,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath" ReadWriteVariables=""><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
//using System.Windows.Forms;
using Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;

namespace ST_3cebff10c8704deab0d1d458e2263943.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here
            string _ReportingDate;
            string _sFileName;
            string _sFilePath;
            string _sFile;
            string _InputRange;
            string _sFile1;

            _ReportingDate = Dts.Variables["DimReportingDateID"].Value.ToString();
            //_TrustID = Dts.Variables["TrustID"].Value.ToString();
            _sFileName = Dts.Variables["WaterfallTemplateFileName"].Value.ToString();
            _sFilePath = Dts.Variables["WaterfallTemplatePath"].Value.ToString();
            _InputRange = Dts.Variables["_InputRange"].Value.ToString();
            _sFile = _sFilePath + "\\" + _sFileName;

            var excelAppl = new Microsoft.Office.Interop.Excel.Application();

            excelAppl.Visible = false;
            excelAppl.DisplayAlerts = false;
            excelAppl.AlertBeforeOverwriting = false;

            Workbook wb = excelAppl.Workbooks.Open(_sFile, 0, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);

            /*
            foreach (Worksheet ws in wb.Worksheets)
            {
                if (ws.Name == "Waterfall") 
                {
                    Range r = ws.get_Range(_InputRange, _InputRange);
                    r.Value2 = r.Value2;
                    ws.Cells.Calculate();
                    //ws.Calculate();
                }
            }
             */
            //wb.Save();
            wb.Close(true, _sFile, null);
            //wb.SaveAs(_sFile1, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, XlSaveAsAccessMode.xlShared, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Marshal.ReleaseComObject(wb);
            excelAppl.Quit();
            Marshal.ReleaseComObject(excelAppl);

            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\st_3cebff10c8704deab0d1d458e2263943.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_3cebff10c8704deab0d1d458e2263943.csproj</RootNamespace>
    <AssemblyName>ST_3cebff10c8704deab0d1d458e2263943.csproj</AssemblyName>
    <ProjectGuid>{B75BD24A-220C-4703-9814-A89D3B0FE082}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.Office.Interop.Excel, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptTask</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Settings.get_Default():ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Sett" +
    "ings")]

namespace ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3cebff10c8704deab0d1d458e2263943.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3cebff10c8704deab0d1d458e2263943.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><BinaryItem Name="\bin\release\st_3cebff10c8704deab0d1d458e2263943.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJ6ZuFQAAAAAAAAAAOAAAiELAQgAABIAAAAIAAAAAAAATjEA
AAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPQwAABXAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAVBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAw
MQAAAAAAAEgAAAACAAUAuCIAADwOAAABAAAAAAAAAAAiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwEAAuAQAAAQAAEQIoDQAACm8OAAAKcgEAAHBvDwAACm8Q
AAAKbxEAAAomAigNAAAKbw4AAApyJwAAcG8PAAAKbxAAAApvEQAACgoCKA0AAApvDgAACnJbAABw
bw8AAApvEAAACm8RAAAKCwIoDQAACm8OAAAKcocAAHBvDwAACm8QAAAKbxEAAAomB3KfAABwBigS
AAAKDHMTAAAKDQkWbxQAAAoJFm8VAAAKCRZvFgAACglvFwAACggWjBoAAAF+GAAACn4YAAAKfhgA
AAp+GAAACn4YAAAKfhgAAAp+GAAACn4YAAAKfhgAAAp+GAAACn4YAAAKfhgAAAp+GAAACm8ZAAAK
EwQRBBeMHQAAAQgUbxoAAAoRBCgbAAAKJglvHAAACgkoGwAACiYCKA0AAAoWbx0AAAoqHgIoHgAA
CioafgQAAAQqLnMEAAAGgAQAAAQqHgIoIAAACioeAigiAAAKKgAAABMwAwAtAAAAAgAAEX4FAAAE
LSByowAAcNAFAAACKCMAAApvJAAACnMlAAAKCgaABQAABH4FAAAEKhp+BgAABCoeAoAGAAAEKrQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjIuMC41MDcyNwAAAAAFAGwAAABUBAAAI34AAMAE
AACoBgAAI1N0cmluZ3MAAAAAaAsAACQBAAAjVVMAjAwAABAAAAAjR1VJRAAAAJwMAACgAQAAI0Js
b2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAJgAAAAUAAAAGAAAACQAAAAEAAAAmAAAA
AgAAAA4AAAACAAAAAgAAAAMAAAAEAAAAAQAAAAYAAAABAAAAAQAAAAAACgABAAAAAAAGAA4B5QAK
ADoBMwEOAFQBPwEKAGwBMwEKAMsBugEKAPwB5wEKAGQCUgIKAHsCUgIKAJgCUgIKALcCUgIKANAC
UgIKAOkCUgIKAAQDUgIKAB8DUgIKADgDUgIKAHEDUQMKAJEDUQMSALwDrwMGAMsD5QAWACQEBAQW
ADwEBAQKAGEEMwEaAI4EbwQaAJ8EbwQaAOUEbwQKAP0EMwEKAAMFMwEaABAFbwQKAB4FMwEaACYF
bwQKAFUFNgUaAIIFbwQKAI4FUQMKAMMFsAUKAOAFMwEKAAQGUgIOADAGGgYOAEkGGgYAAAAAAQAA
AAAAAQABAAEAEAA5AEQABQABAAEAAwEAAG8AAAAJAAEAAwAAARAAfQCGAA0ABAADAAAAEAC8AIYA
EQAFAAYABgZ+ARcAVoCGARoAVoCOARoAEQCWASgAEQDbATYAEQAIAjoAUCAAAAAAhgBzARMAAQCK
IQAAAACGGHgBEwABAJIhAAAAAJYIpgEsAAEApSEAAAAAhhh4ARMAAQCZIQAAAACRGKkF/AABAK0h
AAAAAIMYeAETAAEAuCEAAAAAkwgYAj4AAQDxIQAAAACTCCwCQwABAPghAAAAAJMIOAJIAAEAAAAB
AEwCOQB4AVgAQQB4AVgASQB4AVgAUQB4AVgAWQB4AVgAYQB4AVgAaQB4AVgAcQB4AVgAeQB4AVgA
gQB4AV0AiQB4ARMAkQB4AVgACQDdA5wAmQAuBKEAoQBFBKYAqQBOBKwAIQBYBLAAsQBoBLQAuQB4
ARMAwQCsBMQAwQC4BMQAwQDKBMQAwQDvBMkA2QAIBc4AyQAZBdEA8QAwBeUA+QBdBewAwQBuBRMA
mQBzBV0ACQB4ARMACQF4ARMAGQB4ARMAEQF4ARMAIQB4ARMA2QDyBQAB2QANBggBKQB4AQ4BKQF4
ARsBCAAIAB4ACAAMACMALgATAFsBLgAbAFsBLgBTAHgBLgALACsBLgBbAIEBLgAjAFsBLgArACsB
LgAzAGEBLgA7AFsBQwBjAGIASQAzASIBaQAzASIBgQD7ACMAowALASMA8QAWAQQAAQAFAAIAAACy
ATEAAADLAU4AAABEAlMAAgADAAMAAgAHAAUAAgAIAAcAAQAJAAcABIAAAAEAAAB2FedvAAAAAAAA
RAAAAAoAAAAAAAAAAAAAAAEAxgAAAAAAAgAAAAAAAAAAAAAACgAqAQAAAAACAAAAAAAAAAAAAAAK
ADMBAAAAAAMABQAAAAAAAAAAAAoArwMAAAAACgAAAAAAAAAAAAAAAQDlAwAAAAAOAAAAAAAAAAAA
AAC7AG8EAAAAAAAAAAABAAAAXgYAAAMAAgAAAAAAADxNb2R1bGU+AFNUXzNjZWJmZjEwYzg3MDRk
ZWFiMGQxZDQ1OGUyMjYzOTQzLmNzcHJvai5kbGwAU2NyaXB0TWFpbgBTVF8zY2ViZmYxMGM4NzA0
ZGVhYjBkMWQ0NThlMjI2Mzk0My5jc3Byb2oAU2NyaXB0UmVzdWx0cwBTZXR0aW5ncwBTVF8zY2Vi
ZmYxMGM4NzA0ZGVhYjBkMWQ0NThlMjI2Mzk0My5jc3Byb2ouUHJvcGVydGllcwBSZXNvdXJjZXMA
TWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRh
c2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAG1zY29ybGliAFN5c3Rl
bQBFbnVtAFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE9iamVj
dABNYWluAC5jdG9yAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRf
RGVmYXVsdABEZWZhdWx0AFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNl
TWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQBnZXRf
UmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAdmFsdWUAU3lz
dGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBB
c3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmli
dXRlAFN5c3RlbS5BZGRJbgBBZGRJbkF0dHJpYnV0ZQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRz
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5S
dW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1
ZQBUb1N0cmluZwBTdHJpbmcAQ29uY2F0AE1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbABB
cHBsaWNhdGlvbkNsYXNzAF9BcHBsaWNhdGlvbgBzZXRfVmlzaWJsZQBzZXRfRGlzcGxheUFsZXJ0
cwBzZXRfQWxlcnRCZWZvcmVPdmVyd3JpdGluZwBXb3JrYm9va3MAZ2V0X1dvcmtib29rcwBJbnQz
MgBUeXBlAE1pc3NpbmcAV29ya2Jvb2sAT3BlbgBCb29sZWFuAF9Xb3JrYm9vawBDbG9zZQBTeXN0
ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMATWFyc2hhbABSZWxlYXNlQ29tT2JqZWN0AFF1aXQA
c2V0X1Rhc2tSZXN1bHQAQXBwbGljYXRpb24AQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNj
dG9yAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0
ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAFNUXzNjZWJmZjEwYzg3MDRkZWFiMGQxZDQ1OGUyMjYzOTQzLmNzcHJvai5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAACVEAGkAbQBSAGUAcABvAHIAdABpAG4AZwBEAGEAdABl
AEkARAAAM1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBGAGkAbABlAE4AYQBtAGUA
ACtXAGEAdABlAHIAZgBhAGwAbABUAGUAbQBwAGwAYQB0AGUAUABhAHQAaAAAF18ASQBuAHAAdQB0
AFIAYQBuAGcAZQAAA1wAAH9TAFQAXwAzAGMAZQBiAGYAZgAxADAAYwA4ADcAMAA0AGQAZQBhAGIA
MABkADEAZAA0ADUAOABlADIAMgA2ADMAOQA0ADMALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQBy
AHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAFXSz4vt5fpPgwa17Sfg19AACImEXc2AgMyR
CLd6XFYZNOCJAyAAAQIGCAMGEQwEAAAAAAQBAAAAAwYSEAQAABIQBAgAEhADBhIVAwYSGQQAABIV
BAAAEhkFAAEBEhkECAASFQQIABIZBCABAQ4EIAEBCDkBAApTY3JpcHRNYWluAwBUDgdWZXJzaW9u
AzEuMFQOCVB1Ymxpc2hlcgBUDgtEZXNjcmlwdGlvbgAEIAASTQQgABJRBSABElUcAyAAHAMgAA4G
AAMODg4OCHHpvOER6UKcBCABAQIEIAASZQIGHBMgDxJxDhwcHBwcHBwcHBwcHBwcBiADARwcHAQA
AQgcCgcFDg4OEoCBEnEDAAABBwABEm0RgI0FIAASgJEHIAIBDhKAkQQHARIVBiABARGAmQgBAAIA
AAAAAC8BACpTVF8zY2ViZmYxMGM4NzA0ZGVhYjBkMWQ0NThlMjI2Mzk0My5jc3Byb2oAAAUBAAAA
ABYBABFDb3B5cmlnaHQgQCAgMjAxNAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9u
VGhyb3dzARwxAAAAAAAAAAAAAD4xAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMQAAAAAAAAAA
AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACBAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA8AMAAAAAAAAAAAAA8AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAOdvdhUAAAEA5292FT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBFADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACwDAAABADAAMAAw
ADAAMAA0AGIAMAAAAIAAKwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwAzAGMAZQBiAGYAZgAxADAAYwA4ADcAMAA0AGQAZQBhAGIAMABkADEAZAA0ADUAOABlADIAMgA2
ADMAOQA0ADMALgBjAHMAcAByAG8AagAAAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADUANAA5ADQALgAyADgANgA0ADcAAAAAAIAALwABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AMwBjAGUAYgBmAGYAMQAwAGMAOAA3ADAANABkAGUAYQBiADAAZAAxAGQA
NAA1ADgAZQAyADIANgAzADkANAAzAC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAASAASAAEATABl
AGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAA
MQA0AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADMAYwBl
AGIAZgBmADEAMABjADgANwAwADQAZABlAGEAYgAwAGQAMQBkADQANQA4AGUAMgAyADYAMwA5ADQA
MwAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8AMwBjAGUAYgBmAGYAMQAwAGMAOAA3ADAANABkAGUAYQBiADAAZAAxAGQANAA1ADgA
ZQAyADIANgAzADkANAAzAC4AYwBzAHAAcgBvAGoAAAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADkANAAuADIAOAA2ADQANwAAAAAASAAPAAEAQQBzAHMA
ZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADkANAAuADIAOAA2ADQANwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAFAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="STOCK:SEQUENCE">
<DTS:Property DTS:Name="LockName"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="SSIS.Pipeline.2">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact">Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}</DTS:Property>
<DTS:Property DTS:Name="Description">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Pipeline.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><pipeline id="0" name="pipelineXml" description="pipelineXml" defaultBufferMaxRows="10000" engineThreads="10" defaultBufferSize="10485760" BLOBTempStoragePath="" bufferTempStoragePath="" runInOptimizedMode="true">
<components>
<component id="1" name="OLE DB Source" componentClassID="{BCEFE59B-6819-47F7-A125-63753B33ABB7}" description="OLE DB Source" localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="7" pipelineVersion="0" contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7">
<properties>
<property id="2" name="CommandTimeout" dataType="System.Int32" state="default" isArray="false" description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="3" name="OpenRowset" dataType="System.String" state="default" isArray="false" description="Specifies the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="4" name="OpenRowsetVariable" dataType="System.String" state="default" isArray="false" description="Specifies the variable that contains the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="5" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="The SQL command to be executed." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None"></property>
<property id="6" name="SqlCommandVariable" dataType="System.String" state="default" isArray="false" description="The variable that contains the SQL command to be executed." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">User::_query_GetVariableSetItemLookup</property>
<property id="7" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property>
<property id="8" name="AlwaysUseDefaultCodePage" dataType="System.Boolean" state="default" isArray="false" description="Forces the use of the DefaultCodePage property value when describing character data." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="9" name="AccessMode" dataType="System.Int32" state="default" isArray="false" description="Specifies the mode used to access the database." typeConverter="AccessMode" UITypeEditor="" containsID="false" expressionType="None">3</property>
<property id="15" name="ParameterMapping" dataType="System.String" state="default" isArray="false" description="The mappings between the parameters in the SQL command and variables." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property></properties>
<connections>
<connection id="10" name="OleDbConnection" description="The OLE DB runtime connection used to access the database." connectionManagerID="{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}"/></connections>
<outputs>
<output id="11" name="OLE DB Source Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="17" name="VariableSetItemId" description="" lineageId="17" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="16" mappedColumnId="0"/>
<outputColumn id="20" name="VariableSetId" description="" lineageId="20" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="19" mappedColumnId="0"/>
<outputColumn id="23" name="SequenceNo" description="" lineageId="23" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="22" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="True">
<externalMetadataColumn id="16" name="VariableSetItemId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="19" name="VariableSetId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="22" name="SequenceNo" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/></externalMetadataColumns></output>
<output id="12" name="OLE DB Source Error Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="18" name="VariableSetItemId" description="" lineageId="18" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="21" name="VariableSetId" description="" lineageId="21" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="24" name="SequenceNo" description="" lineageId="24" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="13" name="ErrorCode" description="" lineageId="13" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="14" name="ErrorColumn" description="" lineageId="14" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="25" name="Cache Transform" componentClassID="{A236DD44-4409-433E-A1CE-283DA18F4E0F}" description="Inserts rows into a cache." localeId="-1" usesDispositions="false" validateExternalMetadata="True" version="0" pipelineVersion="0" contactInfo="Cache Transform;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0">
<connections>
<connection id="28" name="CacheConnection" description="The connection used to access the cache." connectionManagerID="{35270CD3-4C05-4D9A-9A4F-43E82DDC69A5}"/></connections>
<inputs>
<input id="26" name="Cache Input" description="" hasSideEffects="true" dangling="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="30" name="" description="" lineageId="17" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="31" name="CacheColumnName" dataType="System.String" state="default" isArray="false" description="The cache column associated with the input column." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetItemID</property></properties></inputColumn>
<inputColumn id="32" name="" description="" lineageId="20" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="33" name="CacheColumnName" dataType="System.String" state="default" isArray="false" description="The cache column associated with the input column." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetID</property></properties></inputColumn>
<inputColumn id="34" name="" description="" lineageId="23" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="35" name="CacheColumnName" dataType="System.String" state="default" isArray="false" description="The cache column associated with the input column." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSequenceNo</property></properties></inputColumn>
</inputColumns><externalMetadataColumns isUsed="False"/></input>
</inputs>
<outputs>
<output id="27" name="Cache Output" description="" exclusionGroup="0" synchronousInputId="26" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
</components>
<paths>
<path id="29" name="OLE DB Source Output" description="" startId="11" endId="26"/>
</paths></pipeline></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="SSIS.Pipeline.2">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact">Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Save Output &amp; Discrepancy</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}</DTS:Property>
<DTS:Property DTS:Name="Description">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Pipeline.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><pipeline id="0" name="pipelineXml" description="pipelineXml" defaultBufferMaxRows="10000" engineThreads="10" defaultBufferSize="10485760" BLOBTempStoragePath="" bufferTempStoragePath="" runInOptimizedMode="true">
<components>
<component id="1" name="Get Output &amp; Discrepancy" componentClassID="{2E42D45B-F83C-400F-8D77-61DDE6A7DF29}" description="Executes a custom script." localeId="-1" usesDispositions="false" validateExternalMetadata="True" version="4" pipelineVersion="0" contactInfo="Executes a custom script.;Microsoft Corporation; Microsoft SqlServer v10; © 2007 Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4">
<properties>
<property id="5" name="SourceCode" dataType="System.String" state="cdata" isArray="true" description="Stores the source code of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="18"><arrayElement dataType="System.String"><![CDATA[\main.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* Microsoft SQL Server Integration Services Script Component
*  Write scripts using Microsoft Visual C# 2008.
*  ScriptMain is the entry point class of the script.*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    private string _ReportingDate;
    private string _sFileName;
    private string _sFilePath;
    private string _sFile;
    private SpreadsheetDocument _spreadsheetDocument;
    private Sheet _sheet;
    private WorksheetPart _worksheetPart;
    private SheetData _sheetData;
    private SharedStringTablePart _sharedStringTablePart;
    private DocumentFormat.OpenXml.StringValue _sheetReferenceId;
    private string _sSheetName;
    private string _StartCellValue;
    private int Count = 0;
    private string _TrustID;
    private WaterfallReport _wr;
    private string _sInputRange;
    private string _sOutputRange;

    public override void PreExecute()
    {
        base.PreExecute();
        /*
          Add your code here for preprocessing or remove if not needed
        */
        _ReportingDate = Variables.DimReportingDateID;
        _TrustID = Variables.TrustID;
        _StartCellValue = Variables.StartCellValue;  //"REPORT DATE";
        _sFileName = Variables.WaterfallTemplateFileName;
        _sFilePath = Variables.WaterfallTemplatePath;
        _sSheetName = Variables.SheetName;
        _sFile = _sFilePath + "\\" + _sFileName;

        _spreadsheetDocument = SpreadsheetDocument.Open(_sFile, true);
        _sheet = _spreadsheetDocument.WorkbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == _sSheetName);
        _sheetReferenceId = _sheet.Id;
        if (_sheet == null) throw new Exception(string.Format("Could not find sheet with name {0}", _sSheetName));

        _worksheetPart = (WorksheetPart)_spreadsheetDocument.WorkbookPart.GetPartById(_sheetReferenceId);
        _sheetData = _worksheetPart.Worksheet.GetFirstChild<SheetData>();
        _sharedStringTablePart = _spreadsheetDocument.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
        _worksheetPart.Worksheet.Save();
        _sharedStringTablePart = null;
        _sheetData = null;
        _worksheetPart = null;
        _sheet = null;
        _spreadsheetDocument.Close();
        _spreadsheetDocument.Dispose();
        _spreadsheetDocument = null;
        _wr = null;
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */
        bool bFireAgain = true;
        string sMsg = "";

        sMsg = string.Format("ReportingDate={0}, TrustID={1}, File={2}, StartCellValue={3} ", _ReportingDate, _TrustID, _sFile, _StartCellValue);
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", sMsg, "", 0, ref bFireAgain);

        if (_sheetData == null)
        {
            ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "_sheetData is not set ", "", 0, ref bFireAgain);
        }
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "check _sharedStringTablePart", "", 0, ref bFireAgain);

        if (_sharedStringTablePart == null)
        {
            ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "_sharedStringTablePart is not set ", "", 0, ref bFireAgain);
        }
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "get StartCell", "", 0, ref bFireAgain);
        Cell StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "check StartCell", "", 0, ref bFireAgain);
        if (StartCell == null)
        {
            sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
            ComponentMetaData.FireInformation(1000, "Save output & discrepancy", sMsg, "", 0, ref bFireAgain);
        }
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "create waterfall report object", "", 0, ref bFireAgain);
        _wr = new WaterfallReport(_sheetData, _sharedStringTablePart, StartCell);
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", _wr.TS, "", 0, ref bFireAgain);

        sMsg = string.Format("Sections Range={0},{1},{2},{3},{4}", _wr.ReportSections["REPORT DATE"].GetSectionRange(), _wr.ReportSections["INPUT"].GetSectionRange(), _wr.ReportSections["OUTPUT"].GetSectionRange(), _wr.ReportSections["DISTRIBUTION"].GetSectionRange(), _wr.ReportSections["DISCREPANCY"].GetSectionRange());
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", sMsg, "", 0, ref bFireAgain);
        if (_wr.ReportSections == null)
        {
            ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "ReportSections is NULL", "", 0, ref bFireAgain);
        }
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", "MoveToLastRow", "", 0, ref bFireAgain);
        _wr.MoveToLastRow();
        _wr.MoveToSectionFirstCell("REPORT DATE");
        sMsg = string.Format("{0} : {1}", _wr.GetCell().CellReference, _wr.GetCellValue());
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        string ReportDate = string.Format("{0}/{1}/{2}", _ReportingDate.Substring(6, 2), _ReportingDate.Substring(4, 2), _ReportingDate.Substring(0, 4));
        sMsg = string.Format("CALCULATED REPORT DATE = {0}", ReportDate);
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", sMsg, "", 0, ref bFireAgain);
        string CellRef = _wr.GetColumnName(_wr.ColumnIndex()) + _wr.GetDataRow().RowIndex.Value.ToString();
        if (_wr.GetCellValue(CellRef) == ReportDate)
        {
            sMsg = string.Format(" REPORT DATE = {0}, CellValue = {1}", ReportDate, _wr.GetCellValue());
            ComponentMetaData.FireInformation(1000, "Save output & discrepancy", sMsg, "", 0, ref bFireAgain);
            /*
            _wr.MoveToSectionFirstCell("OUTPUT");
            int ColNumber = _wr.ReportSections["OUTPUT"].ColEndIndex - _wr.ReportSections["OUTPUT"].ColStartIndex + 1;
            sMsg = string.Format("{0} : {1}, {2}", _wr.GetCell().CellReference.Value, ExcelReader.GetCellValue(_wr.GetCell(), _sharedStringTablePart), ColNumber.ToString());
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

            for (int i = 0; i < ColNumber; i++)
            {
                sMsg = string.Format("{0} , {1}, {2}, {3}", _wr.ColumnIndex(), _wr.ReportSections["OUTPUT"].ColStartIndex, _wr.ReportSections["OUTPUT"].ColEndIndex, _wr.ReportSections["INPUT"].GetColNumber());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                Output0Buffer.AddRow();
                Output0Buffer.VariableName = "";
                Output0Buffer.VariableType = "OUTPUT";
                Output0Buffer.VariableValue = _wr.GetCellValue();
                Output0Buffer.VariableSequenceNo = _wr.GetReportColIndex();
                Output0Buffer.VariableSetCode = _TrustID;
                Output0Buffer.DimReportingDateID = int.Parse(_ReportingDate);

                _wr.MoveToNextCell();
            }

            _wr.MoveToSectionFirstCell("DISCREPANCY");
            ColNumber = _wr.ReportSections["DISCREPANCY"].ColEndIndex - _wr.ReportSections["DISCREPANCY"].ColStartIndex + 1;
            for (int i = 0; i < ColNumber; i++)
            {
                Output0Buffer.AddRow();
                Output0Buffer.VariableName = "";
                Output0Buffer.VariableType = "DISCREPANCY";
                Output0Buffer.VariableValue = _wr.GetCellValue();
                Output0Buffer.VariableSequenceNo = _wr.GetReportColIndex();
                Output0Buffer.VariableSetCode = _TrustID;
                Output0Buffer.DimReportingDateID = int.Parse(_ReportingDate);

                _wr.MoveToNextCell();
            }
                        */

            ReadSection("OUTPUT", ReportDate);
            ReadSection("DISCREPANCY", ReportDate);
        }
    }
    public void ReadSection(string SectionName, string ReportDate)
    {
        bool bFireAgain = true;
        string sMsg = "";
        long DimReportingDateID = 0;

        string[] aReportDate = ReportDate.Split('/');

        if (aReportDate.Length == 3)
        {
            long.TryParse(aReportDate[2] + aReportDate[1] + aReportDate[0], out DimReportingDateID);
        }

        _wr.MoveToSectionFirstCell(SectionName);
        int ColNumber = _wr.ReportSections[SectionName].GetColNumber();
        sMsg = string.Format("{0} : {1}, {2}", _wr.GetCell().CellReference.Value, ExcelReader.GetCellValue(_wr.GetCell(), _sharedStringTablePart), ColNumber.ToString());
        ComponentMetaData.FireInformation(1000, "Save output & discrepancy", sMsg, "", 0, ref bFireAgain);

        string CellRef = "";
        for (int i = 0; i < ColNumber; i++)
        {
            //sMsg = string.Format("{0} , {1}, {2}, {3}", _wr.ColumnIndex(), _wr.ReportSections["OUTPUT"].ColStartIndex, _wr.ReportSections["OUTPUT"].ColEndIndex, _wr.ReportSections["INPUT"].GetColNumber());
            //ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            string ColName = _wr.GetColumnName(_wr.ColumnIndex());
            CellRef = ColName + _wr.GetDataRow().RowIndex.Value.ToString();
            Cell cell = _wr.GetCell(CellRef);

            Output0Buffer.AddRow();
            Output0Buffer.VariableName = _wr.GetVariableName();
            Output0Buffer.VariableType = SectionName;

            Output0Buffer.VariableSequenceNo = _wr.GetReportColIndex();
            Output0Buffer.VariableSetCode = _TrustID;
            Output0Buffer.DimReportingDateID = int.Parse(_ReportingDate);

            if (cell == null)
            {
                sMsg = string.Format("section {0} could not find cell {1}  ", SectionName, CellRef);
                ComponentMetaData.FireInformation(1000, "Read Waterfall template", sMsg, "", 0, ref bFireAgain);
                Output0Buffer.VariableValue = null;
            }
            else
            {
                sMsg = string.Format("{0} : {1}, {2}, {3}", cell.CellReference.Value, ExcelReader.GetCellValue(cell, _sharedStringTablePart), _wr.GetReportColIndex(), _wr.GetVariableName());
                ComponentMetaData.FireInformation(1000, "Read Waterfall template", sMsg, "", 0, ref bFireAgain);
                Output0Buffer.VariableValue = _wr.GetCellValue(CellRef);
            }

            _wr.MoveToNextCell();
        }
    }
}

public class WaterfallReport
{
    private SheetData _sheetData;
    private SharedStringTablePart _sharedStringTablePart;
    private Dictionary<string, WaterfallReportSection> _ReportSections = new Dictionary<string, WaterfallReportSection>();
    //private Row _rColumnName;
    private Row _rData;
    private Row _rRowType;
    private Row _rFirstDataRow;
    private int _CurrentColIndex;
    private Row _rVariableName;
    private string _TS;

    public WaterfallReport(SheetData sd, SharedStringTablePart sst, Cell start)
    {
            StringBuilder sb = new StringBuilder("WaterfallReport:");
            _sheetData = sd;
            _sharedStringTablePart = sst;
            int RowTypeIndex = ExcelNavigator.GetRowIndex(start.CellReference) - 1;
            int RowVariableName = RowTypeIndex - 5;
            sb.Append("try;");
            try
            {

            _rRowType = ExcelNavigator.GetRow(_sheetData, RowTypeIndex);
            /*
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));
            */
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            sb.Append("ReportSection REPORT DATE;");
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            sb.Append("INPUT;");
            _ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            sb.Append("MODEL VERSION;");
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            sb.Append("OUTPUT;");
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            sb.Append("DISTRIBUTION;");
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));
            sb.Append("DISCREPANCY;");
            _TS = sb.ToString();

            _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + 1);
            _rFirstDataRow = _rData;
            _rVariableName = ExcelNavigator.GetRow(_sheetData, RowVariableName);
        }
            catch { _TS = _TS + sb.ToString(); }
    }

    public Dictionary<string, WaterfallReportSection> ReportSections
    {
        get { return this._ReportSections; }
    }

    public string TS
    {
        get { return _TS; }
    }
/*
    private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
    {
        int ColStart = 0;
        int ColEnd = 0;
        string CellStartName = "";
        string CellEndName = "";
        Cell cell;
        string sLastCellValue = "";
        string sLastCellName = "";
        string sCellValue = "";
        string sCellName = "";

        WaterfallReportSection wrs = null;

        int ColCount = row.Descendants<Cell>().Count<Cell>();
        for (int i = StartIndex; i <= ColCount - 1; i++)
        {
            cell = row.Descendants<Cell>().ElementAt(i);
            sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToUpper();
            sCellName = cell.CellReference.ToString();
            if (sCellValue != sLastCellValue && sCellValue == SectionName.ToUpper())
            {
                CellStartName = sCellName;
                ColStart = i;
            }
            if (sCellValue != sLastCellValue && sLastCellValue == SectionName.ToUpper())
            {
                CellEndName = sLastCellName;
                ColEnd = i - 1;
                break;
            }
            if (i == ColCount - 1)
            {
                CellEndName = sCellName;
                ColEnd = i;
            }
            sLastCellValue = sCellValue.ToUpper();
            sLastCellName = cell.CellReference.ToString();
        }
        if (CellStartName != "" && CellEndName != "")
        {
            wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName);
        }
        return wrs;
    }
    */

    private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
    {
        int ColStart = 0;
        int ColEnd = 0;
        string CellStartName = "";
        string CellEndName = "";
        Cell cell;
        string sLastCellValue = "";
        string sLastCellName = "";
        string sCellValue = "";
        string sCellName = "";
        StringBuilder sb = new StringBuilder("GetReportSection:");

 
        WaterfallReportSection wrs = null;
        Dictionary<string, string> cnl = new Dictionary<string, string>();
        sb.Append("try;");
        try
        {
            int ColCount = row.Descendants<Cell>().Count<Cell>();
            sb.Append("count=").Append(ColCount.ToString()).Append(";");
            for (int i = StartIndex; i <= ColCount - 1; i++)
            {
                sb.Append("i=").Append(i.ToString()).Append(";");
                cell = row.Descendants<Cell>().ElementAt(i);
                sb.Append("Get cell;");
                //sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToString().ToUpper();
                sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart);
                if (!string.IsNullOrEmpty(sCellValue))
                { sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToUpper(); }

                sb.Append("Cell value=").Append(sCellValue).Append(";");
                sCellName = cell.CellReference.ToString();
                sb.Append(sCellName).Append(":").Append(sCellValue).Append(":").Append(sLastCellValue).Append(";");
                if (sCellValue == SectionName.ToUpper())
                {
                    cnl.Add(i.ToString(), ExcelNavigator.GetColumnName(sCellName));
                }
                if (sCellValue != sLastCellValue && sCellValue == SectionName.ToUpper())
                {
                    CellStartName = sCellName;
                    ColStart = i;
                }
                if (sCellValue != sLastCellValue && sLastCellValue == SectionName.ToUpper())
                {
                    CellEndName = sLastCellName;
                    ColEnd = i - 1;
                    break;
                }
                if (i == ColCount - 1)
                {
                    CellEndName = sCellName;
                    ColEnd = i;
                }

                sLastCellValue = sCellValue;
                sLastCellName = cell.CellReference.ToString();
            }
            if (CellStartName != "" && CellEndName != "")
            {
                sb.Append("now create report;");
                wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName, cnl);
            }
            _TS = _TS + sb.ToString();
            return wrs;
        }
        catch { _TS = _TS + sb.ToString(); return null; }
    }

    public bool MoveToNextRow()
    {
        _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value));
        return true;
    }

    public bool MoveToPrevRow()
    {
        bool ret = false;
        if (_rData.RowIndex - 2 > _rRowType.RowIndex)
        {
            _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value - 2));
            ret = true;
        }
        return ret;
    }

    public bool MoveToNextCell()
    {
        bool ret = false;
        if (_CurrentColIndex + 1 <= _ReportSections["DISCREPANCY"].ColEndIndex)
        {
            _CurrentColIndex++;
            ret = true;
        }
        return ret;
    }

    public bool MoveToPrevCell()
    {
        bool ret = false;
        if (_CurrentColIndex - 1 <= _ReportSections["REPORT DATE"].ColStartIndex)
        {
            _CurrentColIndex--;
            ret = true;
        }
        return ret;
    }

    public bool MoveToSectionFirstCell(string sSectionName)
    {
        _CurrentColIndex = _ReportSections[sSectionName].ColStartIndex;
        return true;
    }

    public bool MoveToLastRow()
    {
        string sCellsList;
        string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
        Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
        if (cells != null && cells.Count > 0)
        {
            Cell LastFilledCell = cells.Last<KeyValuePair<string, Cell>>().Value;
            int FirstEmptyRowIndex = ExcelNavigator.GetRowIndex(LastFilledCell.CellReference) - 1;
            _rData = ExcelNavigator.GetRow(_sheetData, FirstEmptyRowIndex);
        }
        return true;
    }

    public string GetCellValue()
    {
        try
        {
            Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            string sTypeCellName = ExcelNavigator.GetColumnName(cell.CellReference.Value) + (_rRowType.RowIndex - 4).ToString();
            Cell DataTypeCell = ExcelNavigator.GetCellByName(_sheetData, sTypeCellName);
            string DataType = ExcelReader.GetCellValue(DataTypeCell, _sharedStringTablePart);
            string value = ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            if (DataType == "Date" || DataType == "Data Type")
            {
                double dbDate;
                if (double.TryParse(value, out dbDate))
                {
                    value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                }

            }
            return value;
        }
        catch { return null; }
    }

    public string GetCellValue(string CellReference)
    {
        try
        {
            string sTypeCellName = ExcelNavigator.GetColumnName(CellReference) + (_rRowType.RowIndex - 4).ToString();
            Cell DataTypeCell = ExcelNavigator.GetCellByName(_sheetData, sTypeCellName);
            string DataType = ExcelReader.GetCellValue(DataTypeCell, _sharedStringTablePart);

            Cell cell = ExcelNavigator.GetCellByName(_sheetData, CellReference);
            string value = ExcelReader.GetCellValue(cell, _sharedStringTablePart);

            if (DataType == "Date" || DataType == "Data Type")
            {
                double dbDate;
                if (double.TryParse(value, out dbDate))
                {
                    value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                }

            }
            return value;
        }
        catch { return null; }
    }

    public string GetValueType()
    {
        Cell cell = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex);
        return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
    }

    public bool UpdateCellValue(string sValue, string sDataType)
    {
        Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
        {
            Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
            Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
            ExcelWriter.CopyCellStyle(FromCell, cell);
        }
        return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
    }

    public bool UpdateCellValue(string sValue, string sDataType, string CellReference)
    {
        try
        {
            //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            Cell cell = this.GetCell(CellReference);
            if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
            {
                //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                string ColName = ExcelNavigator.GetColumnName(CellReference);
                string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                ExcelWriter.CopyCellStyle(FromCell, cell);
            }
            return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
        }
        catch { return false; }
    }


    public bool CopyFormula()
    {
        //StringBuilder sb1 = new StringBuilder();

        try
        {
            Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
            {
                //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                //sb1.Append(cell.CellReference.Value).Append(":").Append(FromCell.CellReference.Value).Append("=");
                if (FromCell.CellFormula != null)
                {
                    string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                    string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                    string sFormulaRef = FromCell.CellFormula.Reference.Value;
                    string sFormulaText = FromCell.CellFormula.Text;
                    CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                    //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                    //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                    cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                    cell.Append(cf);
                    //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                }
                //cell.CellValue.Remove();
            }

            //sb1 = null;
            return true;
        }
        catch { return false; }

    }

    public bool CopyFormula(string CellReference)
    {
        //StringBuilder sb1 = new StringBuilder();

        try
        {
            //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            Cell cell = this.GetCell(CellReference);
            if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
            {

                Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                string ColName = ExcelNavigator.GetColumnName(CellReference);
                string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                string FromCellRef = "";
                if (FromCell == null) { FromCellRef = "null"; } else { FromCellRef = FromCell.CellReference.Value; }
                string sOldFormulaType = "";
                string sNewFormulaType = "";
                if (FromCell.CellFormula != null)
                {
                    CellFormula cf;
                    string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                    string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                    string sFormulaRef = "";
                    if (FromCell.CellFormula.Reference != null)
                    { sFormulaRef = FromCell.CellFormula.Reference.Value; }
                    string sFormulaText = "";
                    if (!string.IsNullOrEmpty(FromCell.CellFormula.Text))
                    { sFormulaText = FromCell.CellFormula.Text; }
                    //FromCell.CellFormula.SharedIndex
                    //CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                    sOldFormulaType = "";
                    if (FromCell.CellFormula.FormulaType != null)
                    { sOldFormulaType = FromCell.CellFormula.FormulaType.Value.ToString(); }
                    sNewFormulaType = "";
                    if (FromCell.CellFormula.FormulaType.Value == CellFormulaValues.Shared)
                    {
                        sNewFormulaType = sOldFormulaType;
                        //cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                        cf = new CellFormula() { FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                        // update formula reference in the first row
                        Cell FirstCell = ExcelNavigator.GetCellByName(_sheetData, ColName + _rFirstDataRow.RowIndex.Value.ToString());
                        if (!string.IsNullOrEmpty(FirstCell.CellFormula.Reference.Value))
                        {
                            string sFirstCellFormulaRef = FirstCell.CellFormula.Reference.Value;
                            FirstCell.CellFormula.Reference.Value = sFirstCellFormulaRef.Replace(sOldRowIndex, sNewRowIndex);
                        }
                    }
                    else
                    {
                        cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType };
                        cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                    }
                    //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                    //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                    cell.Append(cf);
                    //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                }
                else
                {

                }
                //cell.CellValue.Remove();

            }

            return true;
        }
        catch { return false; }

    }

    public bool IsSectionLastColumn(string sSectionName)
    {
        bool ret = false;
        if (_CurrentColIndex == _ReportSections[sSectionName].ColEndIndex)
        { ret = true; }
        return ret;
    }

    public bool IsSectionFirstColumn(string sSectionName)
    {
        bool ret = false;
        if (_CurrentColIndex == _ReportSections[sSectionName].ColStartIndex)
        { ret = true; }
        return ret;
    }

    public Cell GetCell()
    {
        try
        {
            return _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        }
        catch { return null; }
    }

    public Cell GetCell(string CellReference)
    {
        try
        {
            return (Cell)_rData.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, CellReference, true) == 0).First();
            //sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
        }
        catch { return null; }
    }

    public int ColumnIndex()
    {
        return _CurrentColIndex;
    }
    public Row GetDataRow()
    {
        return _rData;
    }
    public Row GetTypeRow()
    {
        return _rRowType;
    }
    public int GetReportColIndex()
    {
        int ColIndex = 0;

        if (this._CurrentColIndex >= this._ReportSections["INPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["INPUT"].ColEndIndex)
        {
            ColIndex = this._CurrentColIndex - this._ReportSections["INPUT"].ColStartIndex + 1;
        }

        if (this._CurrentColIndex >= this._ReportSections["OUTPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["OUTPUT"].ColEndIndex)
        {
            ColIndex = this._ReportSections["INPUT"].GetColNumber();
            ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["OUTPUT"].ColStartIndex + 1;
        }

        if (this._CurrentColIndex >= this._ReportSections["DISTRIBUTION"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISTRIBUTION"].ColEndIndex)
        {
            ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber();
            ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISTRIBUTION"].ColStartIndex + 1;
        }

        if (this._CurrentColIndex >= this._ReportSections["DISCREPANCY"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISCREPANCY"].ColEndIndex)
        {
            ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber() + this._ReportSections["DISTRIBUTION"].GetColNumber();
            ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISCREPANCY"].ColStartIndex + 1;
        }

        return ColIndex;
    }

    public bool VerifyRow()
    {
        string CellRef = "";
        string LastCellRef = "";
        Cell LastCell = null;
        //StringBuilder sb1 = new StringBuilder();
        //StringBuilder sb2 = new StringBuilder();
        //StringBuilder sb3 = new StringBuilder();

        foreach (KeyValuePair<string, WaterfallReportSection> rs in _ReportSections.OrderBy(w => w.Value.ColStartIndex))
        {
            foreach (KeyValuePair<string, string> cn in rs.Value.ColNameList.OrderBy(t => int.Parse(t.Key)))
            {
                CellRef = cn.Value + _rData.RowIndex.ToString();
                if (LastCell == null) { LastCellRef = ""; }
                else { LastCellRef = LastCell.CellReference.Value; }
                //sb1.Append(rs.Key).Append(":").Append(CellRef).Append(":").Append(LastCellRef).Append(";");
                try
                {
                    Cell e = _rData.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, CellRef, true) == 0).FirstOrDefault<Cell>();
                    if (e == null)
                    {
                        e = new Cell() { CellReference = CellRef };
                        //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                        if (LastCell == null) { _rData.InsertAfterSelf<Cell>(e); }
                        else { _rData.InsertAfter<Cell>(e, LastCell); }

                    }
                    LastCell = e;
                    //sb2.Append(e.CellReference.Value).Append(";");
                }
                catch
                {
                    Cell e = new Cell() { CellReference = CellRef };
                    //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                    _rData.InsertAfter<Cell>(e, LastCell);
                    LastCell = e;
                    //sb3.Append(e.CellReference.Value).Append(";");
                }

            }
        }

        return true;
    }

    public string GetColumnName(int ColIndex)
    {
        string CellRef = "";
        try
        {
            CellRef = _rRowType.Descendants<Cell>().ElementAt(ColIndex).CellReference.Value;
            return ExcelNavigator.GetColumnName(CellRef);
        }
        catch { return null; }
    }
    public string GetVariableName()
    {
        //Cell cell = _rVariableName.Descendants<Cell>().ElementAt(_CurrentColIndex);
        //return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        string CellRef = "";
        try
        {
            CellRef = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex).CellReference.Value;
            string ColName = ExcelNavigator.GetColumnName(CellRef);
            string VarNameCellRef = ColName + _rVariableName.RowIndex.Value.ToString();
            Cell cell = (Cell)_rVariableName.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, VarNameCellRef, true) == 0).First();
            return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        }
        catch { return null; }
    }
}

public class WaterfallReportSection
{
    private string _SectionName;
    private int _ColStartIndex;
    private string _CellStartName;
    private int _ColEndIndex;
    private string _CellEndName;
    private int _FieldsCount;
    private Dictionary<string, string> _ColNameList;
/*
    public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName)
    {
        // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
        this._SectionName = sName;
        this._ColStartIndex = ColStart;
        this._CellStartName = CellStartName;
        this._ColEndIndex = ColEnd;
        this._CellEndName = CellEndName;
    }
    */
    public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName, Dictionary<string, string> ColNameList)
    {
        // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
        this._SectionName = sName;
        this._ColStartIndex = ColStart;
        this._CellStartName = CellStartName;
        this._ColEndIndex = ColEnd;
        this._CellEndName = CellEndName;
        this._ColNameList = ColNameList;
    }

    public string SectionName
    {
        get { return this._SectionName; }
        set { this._SectionName = value; }
    }
    public string CellStartName
    {
        get { return this._CellStartName; }
        set { this._CellStartName = value; }
    }
    public string CellEndName
    {
        get { return this._CellEndName; }
        set { this._CellEndName = value; }
    }
    public int ColStartIndex
    {
        get { return this._ColStartIndex; }
        set { this._ColStartIndex = value; }
    }
    public int ColEndIndex
    {
        get { return this._ColEndIndex; }
        set { this._ColEndIndex = value; }
    }
    public Dictionary<string, string> ColNameList
    {
        get { return this._ColNameList; }
        //set { this._ColNameList = value; }
    }

    public string GetSectionRange()
    {
        return this._CellStartName + ":" + this._CellEndName;
    }
    public int GetColNumber()
    {
        return this._ColEndIndex - this._ColStartIndex + 1;
    }
}

public static class ExcelNavigator
{
    public static string GetColumnName(string sCellName)
    {
        Regex regex = new Regex("[A-Za-z]+");
        Match match = regex.Match(sCellName);

        return match.Value;
    }

    public static int GetRowIndex(string sCellName)
    {
        Regex regex = new Regex(@"\d+");
        Match match = regex.Match(sCellName);

        return int.Parse(match.Value);
    }

    public static Row GetRow(SheetData sd, int RowIndex)
    {
        return sd.Descendants<Row>().ElementAt(RowIndex);

    }

    private static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
    {
        /*
        string value = null;

        value = theCell.InnerText;
        if (theCell.DataType != null && theCell.DataType.HasValue)
        {
            if (theCell.DataType.Value == CellValues.SharedString)
            {
                if (sstp != null)
                {
                    value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                }
            }
        }
         */

        return ExcelReader.GetCellValue(theCell, sstp);
    }

    public static Cell GetCellByName(SheetData sd, string cellName)
    {
        return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
    }

    public static Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
    {
        try
        {
            return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
        }
        catch { return null; }
    }

    public static string GetNextInColCellName(string sCellName)
    {
        return GetColumnName(sCellName) + (GetRowIndex(sCellName) + 1).ToString();
    }

    public static string GetPrevInColCellName(string sCellName)
    {
        return GetColumnName(sCellName) + (GetRowIndex(sCellName) - 1).ToString();
    }

    public static string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
    {
        StringBuilder sb = new StringBuilder();
        Cell cell;

        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
        cell = null;
        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

        return sb.ToString();
    }

    public static Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
    {
        string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
        StringBuilder sb = new StringBuilder();
        int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
        Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


        IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                        .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
        if (cells != null)
        {
            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                    {
                        FilledCells.Add(c.CellReference, c);
                        sb.Append(c.CellReference.Value).Append(";");
                    }
                }
            }
        }
        CellList = sb.ToString();
        return FilledCells;
    }

    public static string GetCellRangeNames(IEnumerable<Cell> cells)
    {
        StringBuilder sb = new StringBuilder();

        if (cells.Count<Cell>() > 0)
        {
            foreach (Cell c in cells)
            {
                if (c.CellValue != null)
                    sb.Append(c.CellReference.Value).Append(";");
            }
        }
        return sb.ToString();
    }
}

public static class ExcelWriter
{
    public static bool UpdateCellValue(SharedStringTablePart sstp, Cell cell, string sValue, string sDataType)
    {
        string val;
        switch (sDataType)
        {
            case "Double":
                cell.CellValue = new CellValue(sValue);
                break;
            case "int":
                cell.CellValue = new CellValue(sValue);
                break;
            case "Currency":
                cell.CellValue = new CellValue(sValue);
                break;
            case "Date":
                cell.CellValue = new CellValue(sValue);
                break;
            case "Boolean":
                if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
                if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
                {
                    cell.CellValue = new CellValue(val);
                }
                else
                {
                    cell.DataType = CellValues.Boolean;
                    cell.CellValue = new CellValue(val);

                }
                break;
            case "string":
                cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                cell.CellValue = new CellValue(InsertSharedStringItem(sstp, sValue).ToString());
                break;
        }

        return true;
    }

    public static int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
    {
        int i = 0;
        if (sstp != null)
        {
            foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
            {
                if (item.InnerText == sValue) { return i; }
                i++;
            }

        }
        sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
        sstp.SharedStringTable.Save();

        return i;
    }

    public static bool CopyCellStyle(Cell FromCell, Cell ToCell)
    {
        bool ret = true;
        OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
        if (FromAttr != null)
        {
            ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
        }

        return ret;
    }
}

public static class ExcelReader
{
    public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
    {
        string value = null;

        if (theCell.CellValue != null)
        {
            value = theCell.CellValue.InnerText;

            if (theCell.DataType != null && theCell.DataType.HasValue)
            {

                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
                /*
                if (theCell.DataType.Value == CellValues.Date)
                {
                    double dbDate;
                    if (double.TryParse(value, out dbDate))
                    {
                        value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                    }

                }
                 */
            }
        }

        return value;
    }

}]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.resx]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Settings.get_Default():SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Sett" +
    "ings")]

namespace SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.settings]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\assemblyinfo.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_92fda0c48d7748e1af043a9a182cb066.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_92fda0c48d7748e1af043a9a182cb066.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\bufferwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes)
        : base(Buffer, BufferColumnIndexes)
    {
    }

    public String VariableName
    {
        set
        {
            this[0] = value;
        }
    }
    public bool VariableName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String VariableValue
    {
        set
        {
            this[1] = value;
        }
    }
    public bool VariableValue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String VariableType
    {
        set
        {
            this[2] = value;
        }
    }
    public bool VariableType_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 VariableSequenceNo
    {
        set
        {
            this[3] = value;
        }
    }
    public bool VariableSequenceNo_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String VariableSetCode
    {
        set
        {
            this[4] = value;
        }
    }
    public bool VariableSetCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int64 DimReportingDateID
    {
        set
        {
            this[5] = value;
        }
    }
    public bool DimReportingDateID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\sc_92fda0c48d7748e1af043a9a182cb066.csproj]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>SC_92fda0c48d7748e1af043a9a182cb066.csproj</RootNamespace>
    <AssemblyName>SC_92fda0c48d7748e1af043a9a182cb066.csproj</AssemblyName>
    <ProjectGuid>{086282CE-D56E-4A51-90DB-7FE10E305A18}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.0.5022.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase">
      <RequiredTargetFramework>3.0</RequiredTargetFramework>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Compile Include="main.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to the add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptComponent</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\componentwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == 4)
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]));
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String DimReportingDateID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["DimReportingDateID"].Value);
        }
    }

    public String SheetName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["SheetName"].Value);
        }
    }

    public String StartCellValue
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["StartCellValue"].Value);
        }
    }

    public String TrustID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["TrustID"].Value);
        }
    }

    public String WaterfallTemplateFileName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplateFileName"].Value);
        }
    }

    public String WaterfallTemplatePath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplatePath"].Value);
        }
    }

}
]]></arrayElement></arrayElements></property>
<property id="6" name="BinaryCode" dataType="System.String" state="cdata" isArray="true" description="Stores the binary representation of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="2"><arrayElement dataType="System.String"><![CDATA[\bin\release\sc_92fda0c48d7748e1af043a9a182cb066.csproj.dll]]></arrayElement><arrayElement dataType="System.String"><![CDATA[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
hQAACm+GAAAKFyoAGzAFAH0AAAAbAAARFgoCLEQCb4wAAApvFQAAK2+OAAAKDSsdCW+PAAAKCwdv
kAAACgMoHQAACiwEBgzeSgYXWAoJb3kAAAot294KCSwGCW96AAAK3AJvjAAACheNKwAAARMEEQQW
A3ORAAAKohEEc5IAAApvFgAAKyYCb4wAAApvLwAACgYqCCoAAAABEAAAAgAWACk/AAoAAAAAEzAF
ADYAAAAcAAARFwoCcnkIAHBykwEAcG+UAAAKCwNyeQgAcHKTAQBwEgEolQAACm9HAAAKc5YAAApv
lwAACgYqAAATMAIAVQAAAB0AABEUCgJvgwAACixJAm+DAAAKb5AAAAoKAm+HAAAKLDUCb4cAAApv
mAAACiwoAm+HAAAKb5kAAAoZMxoDLBcDb4wAAAoGKEIAAAooFwAAK2+QAAAKCgYqJgIDBCiaAAAK
KiYCFgMomwAACipaAywIAhYonAAACipyfQgAcHOdAAAKeiYCFwMomwAACipaAywIAhconAAACipy
fQgAcHOdAAAKeiYCGAMomwAACipaAywIAhgonAAACipyfQgAcHOdAAAKejoCGQOMOwAAASibAAAK
KloDLAgCGSicAAAKKnJ9CABwc50AAAp6JgIaAyibAAAKKloDLAgCGiicAAAKKnJ9CABwc50AAAp6
OgIbA4w6AAABKJsAAAoqWgMsCAIbKJwAAAoqcn0IAHBznQAACnoeAiieAAAKKh4CKJ8AAAoqHgIo
oAAACioAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBt
c2NvcmxpYiwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2Vu
PWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAA
AAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAAPAU
AAAjfgAAXBUAAHgYAAAjU3RyaW5ncwAAAADULQAAHAkAACNVUwDwNgAAEAAAACNHVUlEAAAAADcA
AMAHAAAjQmxvYgAAAAAAAAACAAABVxWiCQkLAAAA+gEzABYAAAEAAABSAAAAFAAAADYAAAB1AAAA
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
GwBcAExBAAAAAIYAaxanBFwAZUEAAAAAhgCDFqcEXQA5QgAAAACGGAoCGwBeAEFCAAAAAIYA1han
BF4AAAABAK4LAAABALQLAAACALwLAAADAMYLAAABAM4LAAABAM4LAAABAIkIAAACANgLAAABAEMQ
AAABAOMLAAACAOYLAAADAOoLAAABAPALAAACAIkIAAADAPsLAAABAP8LAAABAAwMAAABABoMAAAC
ACEMAAABABoMAAACACEMAAADAAwMAAABAAwMAAABAP8LAAABAP8LAAABAAwMAAABACsMAAABAJoU
AAABANMUAAABADQMAAACADoMAAADAJUIAAAEAEMMAAAFAKMIAAAGAMkIAAABAK4LAAABAK4LAAAB
AK4LAAABAK4LAAABAK4LAAABAEoMAAABAEoMAAABAOMLAAACAFQMAAABAF0MAAACAGUMAAABAOML
AAACAGoMAAABAOMLAAACAGUMAAADAHMMAAABAEoMAAABAEoMAAABAOMLAAACAGUMAAADAH0MAAAE
AFQMAAABAOMLAAACAIgMAgADAJYMAAABAMsMAAABABQXAAABAGUMAAACANEMAAADABoMAAAEACEM
AAABAGUMAAACABoMAAABANYMAAACAN8MAAABAF0MAAACAGUMAAABAOYMAAACAO0MAAABAK4LAAAB
AK4LAAABAK4LAAABAK4LAAABAK4LAAABAK4LAAABAK4LAAABAK4LAAABAK4LAAABAK4LAAABAK4L
AAABAK4LAAABAEkUAAABAEkUAAABAEkUAAABAEkUAAABAEkUAAABAEkUAAABAEkUAAABAEkUkQAK
AhsAmQAKAh8BoQAKAh8BqQAKAh8BsQAKAh8BuQAKAh8BwQAKAh8ByQAKAh8B0QAKAh8B2QAKAh8B
4QAKAiQB6QAKAhsA8QAKAhsACQAKAhsA+QDQDsYB+QDrDs4BKQAKAtQBEQEKAuEBIQEKAhsAEQAK
AhsAGQAKAhsAGQBeD/UBGQDLD/8BKQHxDwUCMQH6DwwCQQEKAhsASQBFEBYCaQBOEBsCOQFaECEC
GQBOBRsAOQFmECcCQQBtEC4CQQB/EDUCSQGZEDsCWQG1EEECDAAKAlkCaQHrEF8CSQD6EBYCOQEB
EXMCcQEKAh8BeQEzEXkCUQBJEYACWQFXEYYCeQFlEUECaQHrEJYCGQBZBRsAkQGLERsAmQGfERsA
mQGlERsAOQEBEaICGQATEqkCoQEpEq8CFADxD8ICqQFCEhYCOQEBEckCOQFUEtACOQEBEdYCeQBq
Et4CHAD6D+sCwQGTEmcAOQFmEPACOQGhEgQD0QGtEgsDaQD6D2cA2QGTEmcA2QG8EkQBFAAKAhsA
4QEKAh8B4QHcEiUDFADjEiwDCQCTEmcAJAAKAhsAaQEgBUgDaQHnElMDOQHxEmADOQH/EmcAJADj
EiwDOQEHEyECsQFOEIEDLAAVE/AAaQEfE5YCNAD6D6gD8QGtEsQD+QFDE8sD+QFOE9ID+QGTEtMA
qQFjExcEAQJzExYCCQKYE2cAAQIKAhsAOQGhEx0EaQBOECMEAQKpEykEPABOEDgEAQLVE0QECQLl
Ex8BWQHcElAEAQLuE3IEPAD6D+sCAQL+E94CAQIOFH0EaQAeFB8BOQFLFK0ERAAKAlkCaQFTFL0E
aQFZFJYCTAD6D6gDVAD8FOsCXAAKAlkCaQEZFToFZAAvFW0FbAA9FesCdAAKAlkCfAAvFW0FhAA9
FesCVAD6D6gDgQAKAhsAqQFJFSkEWQFbFbcFWQFrFb8FMQKWFcoAOQKlERsAQQIKAh8BQQIKFhkG
UQL6D2cA4QEKAhsALAAKAhsAjAAKAlkClAAvFW0FnAA9FesCqQEWF3oGLADjEiwDWQIKAh8BqQEk
F60GqQE9F7QGpABOEMgGpABOEDgEqQFKF9QGpAAKAuAGYQBpF+wGWQF/F0ECrAAvFW0FtAA9FesC
WQGZF2cAeQIKAh8BcQIKAlAEWQGsF7cFWQHJFx0HgQL6D2cAgQIKAiUHWQHWFywHiQL1F8oApAD6
D+sCIQAKAqcBIQACGEQHIQALGCQBkQIKAh8BIQC5ChsAIQDAChsAIQDPCsoAKQCTAOgBLgBbAJcH
LgBjAKAHLgATAEoHLgAbAHoHLgAjAHoHLgArAHoHLgAzAEoHLgA7AIAHLgBDAHoHQwBrAMEBSQCT
AOgBYQCbAMEB4wDTAMEBwwGbAMEB4wGbAMEBAwKbAMEBIwKbAMEBQwKbAMEBYwKbAMEBgwKbAMEB
QAObAMEBYQSbAMEBgQSbAMEBgQWbAMEB4AabAMEBAAebAMEBQAqbAMEB3AH7AfYCEgM0A2UDiAOt
A9gD6wP+AwMEDARYBIQE1QTKBQkGDgYgBi4GMwZCBoAGngbmBgkHMwdABwIAAQADAAMABgAEAAgA
CgAJAAwADQASAAAAvQEvAAAAPAI0AAAAYAJCAAAAZgNrAAAAeQNrAAAAgwNrAAAAkgNrAAAAmgNr
AAAAtANrAAAAQwf+AAAAUgdrAAAAiQhrAAAAlQhrAAAAowhrAAAArwgyAQAAvQgyAQAAyQg2AQAA
2wprAAAA6Aq5AQAA/AprAAAACgu5AQAAHwtrAAAALAu5AQAAQAsyAQAAUwu5AQAAbQtrAAAAfQu5
AQAAZgO9AQAAlAu5AQIAAgADAAIAAwAFAAEABAAFAAIABQAHAAIADwAJAAIAEAALAAIAEQANAAIA
EgAPAAIAEwARAAIAFAATAAIAHAAVAAIAHQAXAAIAOgAZAAEAOwAZAAIAPAAbAAEAPQAbAAEAPwAd
AAIAPgAdAAIAQAAfAAEAQQAfAAIAQgAhAAEAQwAhAAIARAAjAAEAWAAlAAEAWQAnAAEAWgApAAEA
WwArAAEAXAAtAAEAXQAvAAEAXgAxAAEAXwAzAAEAYAA1AAEAYQA3AAEAYgA5AAEAYwA7AFACugLk
AjwDjAOfAy8EtAQaBSMFKwVgBXcFhQWeBaoFXAZrBnIGvwb4BgAHBIAAAAEAAAB9FfxkAAAAAAAA
Xg4AAAIAAAAAAAAAAAAAAAEADQEAAAAAAgAAAAAAAAAAAAAAAQAWAQAAAAAKAAAAAAAAAAAAAAAK
AFEBAAAAAAoAAAAAAAAAAAAAAAoAigIAAAAAAgAAAJ4TAAAAAAAAcgD2AwAAAAAKAAAAAAAAAAAA
AAAKAG8PAAAAAAMABQAAAAAAAAAAAAEAwRAAAAAACgAAAAAAAAAAAAAACgCtEQAAAAAAAAAAAQAA
AC0YAAAOAAgADwAIABAACAARAAoAEgAKABMACgAUAAoARwBLAksASwJXAIwCWQCRAlsAkQJHAEMD
kwBDA5UAQwOjAJQD0wBDA9UAQwPdAFQF3QCTBVsAQwPvAEMD8QBDA0cAKQaVACkGowBDA90AZQYb
AfIGJwHyBpUAOgcAAAAAADxNb2R1bGU+AFNDXzkyZmRhMGM0OGQ3NzQ4ZTFhZjA0M2E5YTE4MmNi
MDY2LmNzcHJvai5kbGwAUmVzb3VyY2VzAFNDXzkyZmRhMGM0OGQ3NzQ4ZTFhZjA0M2E5YTE4MmNi
MDY2LmNzcHJvai5Qcm9wZXJ0aWVzAFNldHRpbmdzAFVzZXJDb21wb25lbnQAQ29ubmVjdGlvbnMA
VmFyaWFibGVzAFNjcmlwdE1haW4AV2F0ZXJmYWxsUmVwb3J0AFdhdGVyZmFsbFJlcG9ydFNlY3Rp
b24ARXhjZWxOYXZpZ2F0b3IARXhjZWxXcml0ZXIARXhjZWxSZWFkZXIAT3V0cHV0MEJ1ZmZlcgBt
c2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0
dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZl
ci5EdHMuUGlwZWxpbmUAU2NyaXB0Q29tcG9uZW50AFNjcmlwdEJ1ZmZlcgBTeXN0ZW0uUmVzb3Vy
Y2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0
dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZh
dWx0AEZpbmlzaE91dHB1dHMATWFya091dHB1dHNGaW5pc2hlZABNaWNyb3NvZnQuU3FsU2VydmVy
LlBpcGVsaW5lSG9zdABQaXBlbGluZUJ1ZmZlcgBQcmltZU91dHB1dABDcmVhdGVOZXdPdXRwdXRS
b3dzAFBhcmVudENvbXBvbmVudABnZXRfRGltUmVwb3J0aW5nRGF0ZUlEAGdldF9TaGVldE5hbWUA
Z2V0X1N0YXJ0Q2VsbFZhbHVlAGdldF9UcnVzdElEAGdldF9XYXRlcmZhbGxUZW1wbGF0ZUZpbGVO
YW1lAGdldF9XYXRlcmZhbGxUZW1wbGF0ZVBhdGgARGltUmVwb3J0aW5nRGF0ZUlEAFNoZWV0TmFt
ZQBTdGFydENlbGxWYWx1ZQBUcnVzdElEAFdhdGVyZmFsbFRlbXBsYXRlRmlsZU5hbWUAV2F0ZXJm
YWxsVGVtcGxhdGVQYXRoAF9SZXBvcnRpbmdEYXRlAF9zRmlsZU5hbWUAX3NGaWxlUGF0aABfc0Zp
bGUARG9jdW1lbnRGb3JtYXQuT3BlblhtbABEb2N1bWVudEZvcm1hdC5PcGVuWG1sLlBhY2thZ2lu
ZwBTcHJlYWRzaGVldERvY3VtZW50AF9zcHJlYWRzaGVldERvY3VtZW50AERvY3VtZW50Rm9ybWF0
Lk9wZW5YbWwuU3ByZWFkc2hlZXQAU2hlZXQAX3NoZWV0AFdvcmtzaGVldFBhcnQAX3dvcmtzaGVl
dFBhcnQAU2hlZXREYXRhAF9zaGVldERhdGEAU2hhcmVkU3RyaW5nVGFibGVQYXJ0AF9zaGFyZWRT
dHJpbmdUYWJsZVBhcnQAU3RyaW5nVmFsdWUAX3NoZWV0UmVmZXJlbmNlSWQAX3NTaGVldE5hbWUA
X1N0YXJ0Q2VsbFZhbHVlAENvdW50AF9UcnVzdElEAF93cgBfc0lucHV0UmFuZ2UAX3NPdXRwdXRS
YW5nZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAFJlYWRTZWN0aW9uAFN5c3RlbS5Db2xsZWN0aW9u
cy5HZW5lcmljAERpY3Rpb25hcnlgMgBfUmVwb3J0U2VjdGlvbnMAUm93AF9yRGF0YQBfclJvd1R5
cGUAX3JGaXJzdERhdGFSb3cAX0N1cnJlbnRDb2xJbmRleABfclZhcmlhYmxlTmFtZQBfVFMAQ2Vs
bABnZXRfUmVwb3J0U2VjdGlvbnMAZ2V0X1RTAEdldFJlcG9ydFNlY3Rpb24ATW92ZVRvTmV4dFJv
dwBNb3ZlVG9QcmV2Um93AE1vdmVUb05leHRDZWxsAE1vdmVUb1ByZXZDZWxsAE1vdmVUb1NlY3Rp
b25GaXJzdENlbGwATW92ZVRvTGFzdFJvdwBHZXRDZWxsVmFsdWUAR2V0VmFsdWVUeXBlAFVwZGF0
ZUNlbGxWYWx1ZQBDb3B5Rm9ybXVsYQBJc1NlY3Rpb25MYXN0Q29sdW1uAElzU2VjdGlvbkZpcnN0
Q29sdW1uAEdldENlbGwAQ29sdW1uSW5kZXgAR2V0RGF0YVJvdwBHZXRUeXBlUm93AEdldFJlcG9y
dENvbEluZGV4AFZlcmlmeVJvdwBHZXRDb2x1bW5OYW1lAEdldFZhcmlhYmxlTmFtZQBSZXBvcnRT
ZWN0aW9ucwBUUwBfU2VjdGlvbk5hbWUAX0NvbFN0YXJ0SW5kZXgAX0NlbGxTdGFydE5hbWUAX0Nv
bEVuZEluZGV4AF9DZWxsRW5kTmFtZQBfRmllbGRzQ291bnQAX0NvbE5hbWVMaXN0AGdldF9TZWN0
aW9uTmFtZQBzZXRfU2VjdGlvbk5hbWUAZ2V0X0NlbGxTdGFydE5hbWUAc2V0X0NlbGxTdGFydE5h
bWUAZ2V0X0NlbGxFbmROYW1lAHNldF9DZWxsRW5kTmFtZQBnZXRfQ29sU3RhcnRJbmRleABzZXRf
Q29sU3RhcnRJbmRleABnZXRfQ29sRW5kSW5kZXgAc2V0X0NvbEVuZEluZGV4AGdldF9Db2xOYW1l
TGlzdABHZXRTZWN0aW9uUmFuZ2UAR2V0Q29sTnVtYmVyAFNlY3Rpb25OYW1lAENlbGxTdGFydE5h
bWUAQ2VsbEVuZE5hbWUAQ29sU3RhcnRJbmRleABDb2xFbmRJbmRleABDb2xOYW1lTGlzdABHZXRS
b3dJbmRleABHZXRSb3cAR2V0Q2VsbEJ5TmFtZQBHZXRDZWxsQnlDZWxsVmFsdWUAR2V0TmV4dElu
Q29sQ2VsbE5hbWUAR2V0UHJldkluQ29sQ2VsbE5hbWUAR2V0UmFuZ2VDZWxsTmFtZXMAR2V0Rmls
bGVkQ29sdW1uQ2VsbFJhbmdlAElFbnVtZXJhYmxlYDEAR2V0Q2VsbFJhbmdlTmFtZXMASW5zZXJ0
U2hhcmVkU3RyaW5nSXRlbQBDb3B5Q2VsbFN0eWxlAHNldF9WYXJpYWJsZU5hbWUAc2V0X1Zhcmlh
YmxlTmFtZV9Jc051bGwAc2V0X1ZhcmlhYmxlVmFsdWUAc2V0X1ZhcmlhYmxlVmFsdWVfSXNOdWxs
AHNldF9WYXJpYWJsZVR5cGUAc2V0X1ZhcmlhYmxlVHlwZV9Jc051bGwAc2V0X1ZhcmlhYmxlU2Vx
dWVuY2VObwBzZXRfVmFyaWFibGVTZXF1ZW5jZU5vX0lzTnVsbABzZXRfVmFyaWFibGVTZXRDb2Rl
AHNldF9WYXJpYWJsZVNldENvZGVfSXNOdWxsAHNldF9EaW1SZXBvcnRpbmdEYXRlSUQAc2V0X0Rp
bVJlcG9ydGluZ0RhdGVJRF9Jc051bGwAQWRkUm93AFNldEVuZE9mUm93c2V0AEVuZE9mUm93c2V0
AFZhcmlhYmxlTmFtZQBWYXJpYWJsZU5hbWVfSXNOdWxsAFZhcmlhYmxlVmFsdWUAVmFyaWFibGVW
YWx1ZV9Jc051bGwAVmFyaWFibGVUeXBlAFZhcmlhYmxlVHlwZV9Jc051bGwAVmFyaWFibGVTZXF1
ZW5jZU5vAFZhcmlhYmxlU2VxdWVuY2VOb19Jc051bGwAVmFyaWFibGVTZXRDb2RlAFZhcmlhYmxl
U2V0Q29kZV9Jc051bGwARGltUmVwb3J0aW5nRGF0ZUlEX0lzTnVsbAB2YWx1ZQBPdXRwdXRzAE91
dHB1dElEcwBCdWZmZXJzAENvbXBvbmVudABSZXBvcnREYXRlAHNkAHNzdABzdGFydABTdGFydElu
ZGV4AHJvdwBzU2VjdGlvbk5hbWUAQ2VsbFJlZmVyZW5jZQBzVmFsdWUAc0RhdGFUeXBlAENvbElu
ZGV4AHNOYW1lAENvbFN0YXJ0AENvbEVuZABzQ2VsbE5hbWUAUm93SW5kZXgAdGhlQ2VsbABzc3Rw
AGNlbGxOYW1lAENlbGxWYWx1ZQBzQ2VsbFZhbHVlAFN0YXJ0Q2VsbE5hbWUAQ2VsbExpc3QAU3lz
dGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAE91dEF0dHJpYnV0ZQBjZWxscwBjZWxsAEZyb21D
ZWxsAFRvQ2VsbABCdWZmZXIAQnVmZmVyQ29sdW1uSW5kZXhlcwBTeXN0ZW0uUmVmbGVjdGlvbgBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJs
eVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0
dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU0NfOTJmZGEwYzQ4
ZDc3NDhlMWFmMDQzYTlhMTgyY2IwNjYuY3Nwcm9qAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dl
ck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21I
YW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JC
cm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRB
dHRyaWJ1dGUALmNjdG9yAEdldENvbHVtbkluZGV4ZXMATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNS
dW50aW1lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIASURUU1Zh
cmlhYmxlczEwMABnZXRfUmVhZE9ubHlWYXJpYWJsZXMASURUU1ZhcmlhYmxlMTAwAGdldF9JdGVt
AGdldF9WYWx1ZQBTdHJpbmcAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5UG9pbnRBdHRyaWJ1dGUA
PFByZUV4ZWN1dGU+Yl9fMABzAGdldF9OYW1lAG9wX0ltcGxpY2l0AG9wX0VxdWFsaXR5AENvbmNh
dABPcGVuAFdvcmtib29rUGFydABnZXRfV29ya2Jvb2tQYXJ0AFdvcmtib29rAGdldF9Xb3JrYm9v
awBPcGVuWG1sRWxlbWVudABEZXNjZW5kYW50cwBTeXN0ZW0uQ29yZQBGdW5jYDIAU3lzdGVtLkxp
bnEARW51bWVyYWJsZQBGaXJzdE9yRGVmYXVsdABnZXRfSWQARm9ybWF0AEV4Y2VwdGlvbgBPcGVu
WG1sUGFydENvbnRhaW5lcgBPcGVuWG1sUGFydABHZXRQYXJ0QnlJZABXb3Jrc2hlZXQAZ2V0X1dv
cmtzaGVldABHZXRGaXJzdENoaWxkAEdldFBhcnRzT2ZUeXBlAE9wZW5YbWxQYXJ0Um9vdEVsZW1l
bnQAU2F2ZQBPcGVuWG1sUGFja2FnZQBDbG9zZQBEaXNwb3NlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RFRTUGlwZWxpbmVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIA
SURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAGdldF9Db21wb25lbnRNZXRhRGF0YQBGaXJlSW5mb3Jt
YXRpb24AQ2VsbFR5cGUAZ2V0X0NlbGxSZWZlcmVuY2UAU3Vic3RyaW5nAFVJbnQzMlZhbHVlAGdl
dF9Sb3dJbmRleABPcGVuWG1sU2ltcGxlVmFsdWVgMQBVSW50MzIAVG9TdHJpbmcAQ2hhcgBTcGxp
dABJbnQ2NABUcnlQYXJzZQBJbnQzMgBQYXJzZQBTeXN0ZW0uVGV4dABTdHJpbmdCdWlsZGVyAEFw
cGVuZABBZGQARWxlbWVudEF0AElzTnVsbE9yRW1wdHkAVG9VcHBlcgBvcF9JbmVxdWFsaXR5AGdl
dF9Db3VudABMYXN0AEtleVZhbHVlUGFpcmAyAERvdWJsZQBEYXRlVGltZQBGcm9tT0FEYXRlAGdl
dF9EYXRlAENlbGxGb3JtdWxhAGdldF9DZWxsRm9ybXVsYQBnZXRfUmVmZXJlbmNlAE9wZW5YbWxM
ZWFmVGV4dEVsZW1lbnQAZ2V0X1RleHQAUmVwbGFjZQBzZXRfUmVmZXJlbmNlAEVudW1WYWx1ZWAx
AENlbGxGb3JtdWxhVmFsdWVzAHNldF9Gb3JtdWxhVHlwZQBzZXRfVGV4dABnZXRfRm9ybXVsYVR5
cGUAZ2V0X1NoYXJlZEluZGV4AHNldF9TaGFyZWRJbmRleABzZXRfVmFsdWUAPD5jX19EaXNwbGF5
Q2xhc3M1ADxHZXRDZWxsPmJfXzMAYwBDb21wYXJlAFdoZXJlAEZpcnN0ADw+Y19fRGlzcGxheUNs
YXNzZgBDZWxsUmVmADxWZXJpZnlSb3c+Yl9fYgA8VmVyaWZ5Um93PmJfXzkAdwBDUyQ8PjlfX0Nh
Y2hlZEFub255bW91c01ldGhvZERlbGVnYXRlYwA8VmVyaWZ5Um93PmJfX2EAdABDUyQ8PjlfX0Nh
Y2hlZEFub255bW91c01ldGhvZERlbGVnYXRlZABnZXRfS2V5AElPcmRlcmVkRW51bWVyYWJsZWAx
AE9yZGVyQnkASUVudW1lcmF0b3JgMQBHZXRFbnVtZXJhdG9yAGdldF9DdXJyZW50AHNldF9DZWxs
UmVmZXJlbmNlAEluc2VydEFmdGVyU2VsZgBJbnNlcnRBZnRlcgBTeXN0ZW0uQ29sbGVjdGlvbnMA
SUVudW1lcmF0b3IATW92ZU5leHQASURpc3Bvc2FibGUAPD5jX19EaXNwbGF5Q2xhc3MxMgBWYXJO
YW1lQ2VsbFJlZgA8R2V0VmFyaWFibGVOYW1lPmJfXzExAFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHBy
ZXNzaW9ucwBSZWdleABNYXRjaABDYXB0dXJlADw+Y19fRGlzcGxheUNsYXNzMQA8R2V0Q2VsbEJ5
TmFtZT5iX18wADxHZXRDZWxsQnlDZWxsVmFsdWU+Yl9fMwA8PmNfX0Rpc3BsYXlDbGFzczkAPEdl
dFJhbmdlQ2VsbE5hbWVzPmJfXzcAPEdldFJhbmdlQ2VsbE5hbWVzPmJfXzgAPD5jX19EaXNwbGF5
Q2xhc3NlAHNTdGFyQ2VsbHRDb2x1bW5OYW1lAGlTdGFydENlbGxSb3dJbmRleAA8R2V0RmlsbGVk
Q29sdW1uQ2VsbFJhbmdlPmJfX2IAPEdldEZpbGxlZENvbHVtbkNlbGxSYW5nZT5iX19jAHIAZ2V0
X0NlbGxWYWx1ZQBzZXRfQ2VsbFZhbHVlAENlbGxWYWx1ZXMAZ2V0X0RhdGFUeXBlAHNldF9EYXRh
VHlwZQBTaGFyZWRTdHJpbmdUYWJsZQBnZXRfU2hhcmVkU3RyaW5nVGFibGUARWxlbWVudHMAU2hh
cmVkU3RyaW5nSXRlbQBnZXRfSW5uZXJUZXh0AFRleHQAQXBwZW5kQ2hpbGQAT3BlblhtbEF0dHJp
YnV0ZQBHZXRBdHRyaWJ1dGUAU2V0QXR0cmlidXRlAE9wZW5YbWxTaW1wbGVUeXBlAGdldF9IYXNW
YWx1ZQBzZXRfSXRlbQBTZXROdWxsAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AU0NfOTJmZGEw
YzQ4ZDc3NDhlMWFmMDQzYTlhMTgyY2IwNjYuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwAAAH9TAEMAXwA5ADIAZgBkAGEAMABjADQAOABkADcANwA0ADgAZQAxAGEAZgAwADQA
MwBhADkAYQAxADgAMgBjAGIAMAA2ADYALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAJUQAaQBtAFIAZQBwAG8AcgB0AGkAbgBnAEQAYQB0AGUA
SQBEAAATUwBoAGUAZQB0AE4AYQBtAGUAAB1TAHQAYQByAHQAQwBlAGwAbABWAGEAbAB1AGUAAA9U
AHIAdQBzAHQASQBEAAAzVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABsAGEAdABlAEYAaQBsAGUA
TgBhAG0AZQAAK1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBQAGEAdABoAAADXAAA
RUMAbwB1AGwAZAAgAG4AbwB0ACAAZgBpAG4AZAAgAHMAaABlAGUAdAAgAHcAaQB0AGgAIABuAGEA
bQBlACAAewAwAH0AAAEAe1IAZQBwAG8AcgB0AGkAbgBnAEQAYQB0AGUAPQB7ADAAfQAsACAAVABy
AHUAcwB0AEkARAA9AHsAMQB9ACwAIABGAGkAbABlAD0AewAyAH0ALAAgAFMAdABhAHIAdABDAGUA
bABsAFYAYQBsAHUAZQA9AHsAMwB9ACAAADNTAGEAdgBlACAAbwB1AHQAcAB1AHQAIAAmACAAZABp
AHMAYwByAGUAcABhAG4AYwB5AAAtXwBzAGgAZQBlAHQARABhAHQAYQAgAGkAcwAgAG4AbwB0ACAA
cwBlAHQAIAAAOWMAaABlAGMAawAgAF8AcwBoAGEAcgBlAGQAUwB0AHIAaQBuAGcAVABhAGIAbABl
AFAAYQByAHQAAEVfAHMAaABhAHIAZQBkAFMAdAByAGkAbgBnAFQAYQBiAGwAZQBQAGEAcgB0ACAA
aQBzACAAbgBvAHQAIABzAGUAdAAgAAAbZwBlAHQAIABTAHQAYQByAHQAQwBlAGwAbAAAH2MAaABl
AGMAawAgAFMAdABhAHIAdABDAGUAbABsAABJYwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAA
YwBlAGwAbAAgAHcAaQB0AGgAIAB2AGEAbAB1AGUAPQAiAHsAMAB9ACIAAD1jAHIAZQBhAHQAZQAg
AHcAYQB0AGUAcgBmAGEAbABsACAAcgBlAHAAbwByAHQAIABvAGIAagBlAGMAdAAARVMAZQBjAHQA
aQBvAG4AcwAgAFIAYQBuAGcAZQA9AHsAMAB9ACwAewAxAH0ALAB7ADIAfQAsAHsAMwB9ACwAewA0
AH0AABdSAEUAUABPAFIAVAAgAEQAQQBUAEUAAAtJAE4AUABVAFQAAA1PAFUAVABQAFUAVAAAGUQA
SQBTAFQAUgBJAEIAVQBUAEkATwBOAAAXRABJAFMAQwBSAEUAUABBAE4AQwBZAAAtUgBlAHAAbwBy
AHQAUwBlAGMAdABpAG8AbgBzACAAaQBzACAATgBVAEwATAAAG00AbwB2AGUAVABvAEwAYQBzAHQA
UgBvAHcAABN7ADAAfQAgADoAIAB7ADEAfQAAM1UAcABkAGEAdABlACAAVwBhAHQAZQByAGYAYQBs
AGwAIAB0AGUAbQBwAGwAYQB0AGUAABd7ADAAfQAvAHsAMQB9AC8AewAyAH0AADlDAEEATABDAFUA
TABBAFQARQBEACAAUgBFAFAATwBSAFQAIABEAEEAVABFACAAPQAgAHsAMAB9AABHIABSAEUAUABP
AFIAVAAgAEQAQQBUAEUAIAA9ACAAewAwAH0ALAAgAEMAZQBsAGwAVgBhAGwAdQBlACAAPQAgAHsA
MQB9AAAdewAwAH0AIAA6ACAAewAxAH0ALAAgAHsAMgB9AABLcwBlAGMAdABpAG8AbgAgAHsAMAB9
ACAAYwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAAYwBlAGwAbAAgAHsAMQB9ACAAIAAAL1IA
ZQBhAGQAIABXAGEAdABlAHIAZgBhAGwAbAAgAHQAZQBtAHAAbABhAHQAZQAAJ3sAMAB9ACAAOgAg
AHsAMQB9ACwAIAB7ADIAfQAsACAAewAzAH0AACFXAGEAdABlAHIAZgBhAGwAbABSAGUAcABvAHIA
dAA6AAAJdAByAHkAOwAANVIAZQBwAG8AcgB0AFMAZQBjAHQAaQBvAG4AIABSAEUAUABPAFIAVAAg
AEQAQQBUAEUAOwAADUkATgBQAFUAVAA7AAAbTQBPAEQARQBMACAAVgBFAFIAUwBJAE8ATgAAHU0A
TwBEAEUATAAgAFYARQBSAFMASQBPAE4AOwAAD08AVQBUAFAAVQBUADsAABtEAEkAUwBUAFIASQBC
AFUAVABJAE8ATgA7AAAZRABJAFMAQwBSAEUAUABBAE4AQwBZADsAACNHAGUAdABSAGUAcABvAHIA
dABTAGUAYwB0AGkAbwBuADoAAA1jAG8AdQBuAHQAPQAAAzsAAAVpAD0AABNHAGUAdAAgAGMAZQBs
AGwAOwAAF0MAZQBsAGwAIAB2AGEAbAB1AGUAPQAAAzoAACVuAG8AdwAgAGMAcgBlAGEAdABlACAA
cgBlAHAAbwByAHQAOwAACUQAYQB0AGUAABNEAGEAdABhACAAVAB5AHAAZQAAFWQAZAAvAE0ATQAv
AHkAeQB5AHkAABNbAEEALQBaAGEALQB6AF0AKwABB1wAZAArAAANRABvAHUAYgBsAGUAAAdpAG4A
dAAAEUMAdQByAHIAZQBuAGMAeQAAD0IAbwBvAGwAZQBhAG4AAA1zAHQAcgBpAG4AZwAACVQAUgBV
AEUAAAMxAAADMAAAA3MAAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUAcgB0AHkAIABjAGEAbgBu
AG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABBAHMAcwBpAGcAbgAgAGEA
IAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAAaQBuAHMAdABlAGEAZAAu
AAAAAFwkePIKjO5Hhua9+QokJ5IACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUE
AAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAMGEhQDBhIYAwYSNAkgAwEIHQgdEh0D
BhINBSABARINAyAADgMoAA4CBg4IMb84Vq02TjUDBhIhAwYSJQMGEikDBhItAwYSMQMGEjUCBggD
BhIgBSACAQ4OCAYVEjkCDhIkAwYSPQkgAwESLRIxEkEJIAAVEjkCDhIkCCADEiQIDhI9AyAAAgQg
AQIOBCABDg4FIAICDg4GIAMCDg4OBCAAEkEFIAESQQ4DIAAIBCAAEj0EIAEOCAkoABUSOQIOEiQH
BhUSOQIODg4gBgEOCA4IDhUSOQIODgQgAQEOBCABAQgIIAAVEjkCDg4DKAAICCgAFRI5Ag4OBAAB
Dg4EAAEIDgcAAhI9Ei0IBwACDhJBEjEHAAISQRItDgkAAxJBEi0SMQ4JAAQOEi0SMQ4IDgADFRI5
Ag4SQRItDhAOCQABDhUSRQESQQkABAISMRJBDg4GAAIIEjEOBwACAhJBEkEHIAIBEh0dCAQgAQEC
BCABAQoDKAACAygACgQBAAAABwABEn0RgIEFIAASgIUHIAIBDhKAhQQHARIVBiABARGAjQgBAAIA
AAAAAAMAAAEFIAEdCAgDBwEIBSAAEoCVBiABEoCZHAMgABwFIAECEiUEIAASNQUAAQ4SNQUAAgIO
DgYAAw4ODg4GAAISIQ4CBSAAEoClBSAAEoCpCTABABUSRQEeAAQKARIlCBUSgLECEiUCBSACARwY
ExABAh4AFRJFAR4AFRKAsQIeAAIFAAIODhwGIAESgMEOBSAAEoDFBTABAB4ABAoBEi0ECgESMQsQ
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
bgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEUAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBv
AAAALAMAAAEAMAAwADAAMAAwADQAYgAwAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQA
aQBvAG4AAAAAAFMAQwBfADkAMgBmAGQAYQAwAGMANAA4AGQANwA3ADQAOABlADEAYQBmADAANAAz
AGEAOQBhADEAOAAyAGMAYgAwADYANgAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYA
ZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQA1ADAAMQAuADIANQA4ADUAMgAAAAAAgAAvAAEASQBu
AHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwA5ADIAZgBkAGEAMABjADQAOABkADcANwA0ADgA
ZQAxAGEAZgAwADQAMwBhADkAYQAxADgAMgBjAGIAMAA2ADYALgBjAHMAcAByAG8AagAuAGQAbABs
AAAAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAxADQAAACIAC8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBDAF8AOQAyAGYAZABhADAAYwA0ADgAZAA3ADcANAA4AGUAMQBhAGYAMAA0ADMAYQA5AGEA
MQA4ADIAYwBiADAANgA2AC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAAeAArAAEAUAByAG8AZAB1
AGMAdABOAGEAbQBlAAAAAABTAEMAXwA5ADIAZgBkAGEAMABjADQAOABkADcANwA0ADgAZQAxAGEA
ZgAwADQAMwBhADkAYQAxADgAMgBjAGIAMAA2ADYALgBjAHMAcAByAG8AagAAAAAARAAPAAEAUABy
AG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADUAMAAxAC4AMgA1ADgANQAyAAAA
AABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADUAMAAx
AC4AMgA1ADgANQAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACAAAAMAAAAQDcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement></arrayElements></property>
<property id="7" name="VSTAProjectName" dataType="System.String" state="default" isArray="false" description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None">SC_92fda0c48d7748e1af043a9a182cb066</property>
<property id="8" name="ScriptLanguage" dataType="System.String" state="default" isArray="false" description="Specifies the programming language used by the script." typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" UITypeEditor="" containsID="false" expressionType="None">CSharp</property>
<property id="9" name="ReadOnlyVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read-only variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">User::DimReportingDateID,User::SheetName,User::StartCellValue,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath</property>
<property id="10" name="ReadWriteVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read/write variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None"></property>
<property id="11" name="BreakpointCollection" dataType="System.String" state="default" isArray="true" description="List of breakpoints present on the script." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="0"/></property>
<property id="12" name="UserComponentTypeName" dataType="System.String" state="default" isArray="false" description="" typeConverter="" UITypeEditor="" containsID="false" expressionType="None">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property></properties>
<outputs>
<output id="4" name="Output 0" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="true" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="20" name="VariableName" description="" lineageId="20" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="22" name="VariableValue" description="" lineageId="22" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="23" name="VariableType" description="" lineageId="23" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="24" name="VariableSequenceNo" description="" lineageId="24" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="98" name="VariableSetCode" description="" lineageId="98" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="99" name="DimReportingDateID" description="" lineageId="99" precision="0" scale="0" length="0" dataType="i8" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="101" name="Lookup" componentClassID="{27648839-180F-45E6-838D-AFF53DF682D2}" description="Looks up values in a reference dataset by using exact matching." localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="5" pipelineVersion="0" contactInfo="Lookup;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;5">
<properties>
<property id="104" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="Specifies the SQL statement that generates the lookup table." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="Notify"></property>
<property id="105" name="SqlCommandParam" dataType="System.String" state="default" isArray="false" description="Specifies a SQL statement that uses parameters to generate the lookup table." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="Notify">select * from () [refTable]
where [refTable].[VariableSequenceNo] = ?</property>
<property id="106" name="ConnectionType" dataType="System.Int32" state="default" isArray="false" description="Specifies the type of connection used to access the reference dataset." typeConverter="LookupConnectionType" UITypeEditor="" containsID="false" expressionType="None">1</property>
<property id="108" name="CacheType" dataType="System.Int32" state="default" isArray="false" description="Specifies the cache type of the lookup table." typeConverter="CacheType" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="109" name="NoMatchBehavior" dataType="System.Int32" state="default" isArray="false" description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set." typeConverter="LookupNoMatchBehavior" UITypeEditor="" containsID="false" expressionType="None">1</property>
<property id="110" name="NoMatchCachePercentage" dataType="System.Int32" state="default" isArray="false" description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="111" name="MaxMemoryUsage" dataType="System.Int32" state="default" isArray="false" description="Maximum Memory Usage for Reference Cache on a 32 bit platform." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">25</property>
<property id="112" name="MaxMemoryUsage64" dataType="System.Int64" state="default" isArray="false" description="Maximum Memory Usage for Reference Cache on a 64 bit platform." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">25</property>
<property id="113" name="ReferenceMetadataXml" dataType="System.String" state="default" isArray="false" description="Indicates whether to reference metadata in an XML format." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="VariableSequenceNo" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="VariableSetID" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="VariableSetItemID" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
<property id="114" name="ParameterMap" dataType="System.String" state="default" isArray="false" description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons." typeConverter="" UITypeEditor="" containsID="true" expressionType="None">#24;</property>
<property id="115" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property></properties>
<connections>
<connection id="121" name="CacheConnection" description="Connection manager used to access lookup data." connectionManagerID="{35270CD3-4C05-4D9A-9A4F-43E82DDC69A5}"/></connections>
<inputs>
<input id="102" name="Lookup Input" description="" hasSideEffects="false" dangling="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="122" name="" description="" lineageId="24" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="123" name="JoinToReferenceColumn" dataType="System.String" state="default" isArray="false" description="Specifies the column in the reference table that a column joins." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSequenceNo</property>
<property id="124" name="CopyFromReferenceColumn" dataType="System.Null" state="default" isArray="false" description="Specifies the column in the reference table from which a column is copied." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"/></properties></inputColumn>
</inputColumns><externalMetadataColumns isUsed="False"/></input>
</inputs>
<outputs>
<output id="103" name="Lookup Match Output" description="" exclusionGroup="1" synchronousInputId="102" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="Lookup" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="125" name="VariableSetID" description="" lineageId="125" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Copy Column" errorRowDisposition="NotUsed" truncationRowDisposition="FailComponent" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="126" name="CopyFromReferenceColumn" dataType="System.String" state="default" isArray="false" description="Specifies the column in the reference table from which a column is copied." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetID</property></properties></outputColumn>
<outputColumn id="127" name="VariableSetItemID" description="" lineageId="127" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Copy Column" errorRowDisposition="NotUsed" truncationRowDisposition="FailComponent" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="128" name="CopyFromReferenceColumn" dataType="System.String" state="default" isArray="false" description="Specifies the column in the reference table from which a column is copied." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetItemID</property></properties></outputColumn></outputColumns><externalMetadataColumns isUsed="False"/></output>
<output id="116" name="Lookup No Match Output" description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;" exclusionGroup="1" synchronousInputId="102" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><externalMetadataColumns isUsed="False"/></output>
<output id="117" name="Lookup Error Output" description="" exclusionGroup="1" synchronousInputId="102" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="118" name="ErrorCode" description="" lineageId="118" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="119" name="ErrorColumn" description="" lineageId="119" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="129" name="OLE DB Destination" componentClassID="{5A0B62E8-D91D-49F5-94A5-7BE58DE508F0}" description="OLE DB Destination" localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="4" pipelineVersion="0" contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4">
<properties>
<property id="130" name="CommandTimeout" dataType="System.Int32" state="default" isArray="false" description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="131" name="OpenRowset" dataType="System.String" state="default" isArray="false" description="Specifies the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">[dbo].[tblFactVariableSet]</property>
<property id="132" name="OpenRowsetVariable" dataType="System.String" state="default" isArray="false" description="Specifies the variable that contains the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="133" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="The SQL command to be executed." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None"></property>
<property id="134" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property>
<property id="135" name="AlwaysUseDefaultCodePage" dataType="System.Boolean" state="default" isArray="false" description="Forces the use of the DefaultCodePage property value when describing character data." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="136" name="AccessMode" dataType="System.Int32" state="default" isArray="false" description="Specifies the mode used to access the database." typeConverter="AccessMode" UITypeEditor="" containsID="false" expressionType="None">3</property>
<property id="138" name="FastLoadKeepIdentity" dataType="System.Boolean" state="default" isArray="false" description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="139" name="FastLoadKeepNulls" dataType="System.Boolean" state="default" isArray="false" description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="140" name="FastLoadOptions" dataType="System.String" state="default" isArray="false" description="Specifies options to be used with fast load.  Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">CHECK_CONSTRAINTS</property>
<property id="141" name="FastLoadMaxInsertCommitSize" dataType="System.Int32" state="default" isArray="false" description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">2147483647</property></properties>
<connections>
<connection id="137" name="OleDbConnection" description="The OLE DB runtime connection used to access the database." connectionManagerID="{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}"/></connections>
<inputs>
<input id="142" name="OLE DB Destination Input" description="" hasSideEffects="true" dangling="false" errorOrTruncationOperation="Insert" errorRowDisposition="FailComponent" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="151" name="" description="" lineageId="99" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="147" mappedColumnId="0"/>
<inputColumn id="152" name="" description="" lineageId="125" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="148" mappedColumnId="0"/>
<inputColumn id="153" name="" description="" lineageId="127" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="149" mappedColumnId="0"/>
<inputColumn id="154" name="" description="" lineageId="22" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="150" mappedColumnId="0"/>
</inputColumns><externalMetadataColumns isUsed="True">
<externalMetadataColumn id="147" name="DimReportingDateId" description="" precision="0" scale="0" length="0" dataType="i8" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="148" name="VariableSetId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="149" name="VariableSetItemId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="150" name="Value" description="" precision="0" scale="0" length="0" dataType="nText" codePage="0" mappedColumnId="0"/></externalMetadataColumns></input>
</inputs>
<outputs>
<output id="143" name="OLE DB Destination Error Output" description="" exclusionGroup="1" synchronousInputId="142" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="144" name="ErrorCode" description="" lineageId="144" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="145" name="ErrorColumn" description="" lineageId="145" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
</components>
<paths>
<path id="120" name="Output 0" description="" startId="4" endId="102"/>
<path id="146" name="Lookup Match Output" description="" startId="103" endId="142"/>
</paths></pipeline></DTS:ObjectData></DTS:Executable>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property>
<DTS:Property DTS:Name="DTSID">{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="ObjectName">Save Output And Discrepancy</DTS:Property>
<DTS:Property DTS:Name="DTSID">{093A48B6-FB37-427F-9CA1-549FDEF08F3B}</DTS:Property>
<DTS:Property DTS:Name="Description">Sequence Container</DTS:Property>
<DTS:Property DTS:Name="CreationName">STOCK:SEQUENCE</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Package End</DTS:Property>
<DTS:Property DTS:Name="DTSID">{e3e67043-53b3-4add-896d-084a328a227d}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_83059d981e574cc5bbf87157e2b358e5" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::RowCount" ReadWriteVariables="User::ActionMessage"><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

namespace ST_848435bfb57946dbb79b15f1e7c27e4c.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here


            Dts.Variables["ActionMessage"].Value += string.Format("Total rows imported: {0}", Dts.Variables["RowCount"].Value.ToString());

            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Settings.get_Default():ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Sett" +
    "ings")]

namespace ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_848435bfb57946dbb79b15f1e7c27e4c.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_848435bfb57946dbb79b15f1e7c27e4c.csproj")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\st_83059d981e574cc5bbf87157e2b358e5.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><NoStandardLibraries>false</NoStandardLibraries><RootNamespace>ST_848435bfb57946dbb79b15f1e7c27e4c.csproj</RootNamespace><AssemblyName>st_83059d981e574cc5bbf87157e2b358e5</AssemblyName><ProjectGuid>{AFDA0C04-758C-47D3-A559-18565E4D34FA}</ProjectGuid></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}"><ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ScriptTask</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem><BinaryItem Name="\bin\release\st_815a2eea3e644d02ab87873774593f8e.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADG6XVIAAAAAAAAAAOAAAiELAQgAABAAAAAIAAAAAAAAri4A
AAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFQuAABXAAAAAEAAACgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAtA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAACgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACQ
LgAAAAAAAEgAAAACAAUA6CEAAGwMAAABAAAAAAAAADAhAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA0AAAoqEzADAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDgAACm8PAAAKcxAAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqAzAFAFsAAAAAAAAA
AigTAAAKbxQAAApygQAAcG8VAAAKJW8WAAAKcp0AAHACKBMAAApvFAAACnLPAABwbxUAAApvFgAA
Cm8XAAAKKBgAAAooGQAACm8aAAAKAigTAAAKFm8bAAAKKh4CKBwAAAoqGn4GAAAEKi5zCAAABoAG
AAAEKh4CKB4AAAoqAAAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291
cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3
AAAAAAUAbAAAANgDAAAjfgAARAQAAMwFAAAjU3RyaW5ncwAAAAAQCgAA5AAAACNVUwD0CgAAEAAA
ACNHVUlEAAAABAsAAGgBAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAdAAAA
BQAAAAYAAAAJAAAAAQAAAB4AAAACAAAADgAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAAB
AAAAAAAKAAEAAAAAAAYAzwDIAAoAHgH1AAYAOgHIAA4AVAE/AQYAfQFsAQYArgGZAQYAXQJLAgYA
dAJLAgYAkQJLAgYAsAJLAgYAyQJLAgYA4gJLAgYA/QJLAgYAGANLAgYAMQNLAgYAagNKAwYAigNK
AwYA3wPMAwYA/APIAAYAAQTIAAYAJQRLAg4AUQQ7BA4AagQ7BBIAjAR/BAoAmwT1ABYA9ATUBBYA
DAXUBAYAMQXIAAYAXwVKAwAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQABABAAcgB9AAkAAwAF
AAMBAACoAAAADQADAAcAAAEQALYAPAARAAYABwARAI0BEwARALoBFwAGBgkCOQBWgBECPABWgBkC
PAARACECSgBQIAAAAACDGMoBGwABAFggAAAAAJMI0AEfAAEAkSAAAAAAkwjkASQAAQCYIAAAAACT
CPABKQABAKAgAAAAAIYABAIbAAIAByEAAAAAhhjKARsAAgAPIQAAAACWCDECTgACACIhAAAAAIYY
ygEbAAIAFiEAAAAAkRh6BewAAgAAAAEARQI5AMoBWABBAMoBWABJAMoBWABRAMoBWABZAMoBWABh
AMoBWABpAMoBWABxAMoBWAB5AMoBWACBAMoBXQCJAMoBGwCRAMoBGwAJAMoBGwCZABMEYgCZAC4E
aQApAMoBbgCxAMoBegDBAMoBWAARAK0EwwDJAP4EyADRABUFzQDZAB4F0wAJACgF1wDhADgF2wDh
AD8F4QDZAEYF5wDJAFAFXQARAMoBGwDpAMoBGwAhAMoBGwAIABAAQAAIABQARQApAIsAgAAuABMA
IAEuABsAIAEuACMAIAEuAFMAPQEuAAsA8AAuACsA8AAuADsAIAEuAFsARgEuADMAJgFDAGMARQBJ
AIsAgABjAJMAiQDBAOsARQB1AAIAAQAFAAMAAAB9AS8AAAD8ATQAAAA9AlMAAgACAAMAAgADAAUA
AQAEAAUAAgAHAAcABIAAAAEAAACtE/A+AAAAAAAAqAMAAAIAAAAAAAAAAAAAAAEAvwAAAAAACgAA
AAAAAAAAAAAACgDWAAAAAAACAAAAAAAAAAAAAAABAMgAAAAAAAMABQAAAAAAAAAAAAEAfwQAAAAA
CgAAAAAAAAAAAAAACgC1BAAAAAAAAAAAAQAAAIEFAAAEAAMAAAAAAAA8TW9kdWxlPgBzdF84MTVh
MmVlYTNlNjQ0ZDAyYWI4Nzg3Mzc3NDU5M2Y4ZS5kbGwAUmVzb3VyY2VzAFNUXzg0ODQzNWJmYjU3
OTQ2ZGJiNzliMTVmMWU3YzI3ZTRjLmNzcHJvai5Qcm9wZXJ0aWVzAFNjcmlwdE1haW4AU1RfODQ4
NDM1YmZiNTc5NDZkYmI3OWIxNWYxZTdjMjdlNGMuY3Nwcm9qAFNjcmlwdFJlc3VsdHMAU2V0dGlu
Z3MAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdz
QmFzZQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0u
R2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291
cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAE1haW4AdmFsdWVfXwBT
dWNjZXNzAEZhaWx1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAdmFsdWUA
U3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0
ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNl
cwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAHN0XzgxNWEyZWVhM2U2NDRkMDJhYjg3ODczNzc0NTkzZjhlAFN5c3RlbS5EaWFnbm9z
dGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRN
b2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAU3lzdGVt
LkFkZEluAEFkZEluQXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0
LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFy
aWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5n
AFN0cmluZwBGb3JtYXQAQ29uY2F0AHNldF9WYWx1ZQBzZXRfVGFza1Jlc3VsdABDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1RfODQ4NDM1YmZiNTc5NDZkYmI3OWIxNWYxZTdjMjdl
NGMuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAH9TAFQAXwA4ADQAOAA0
ADMANQBiAGYAYgA1ADcAOQA0ADYAZABiAGIANwA5AGIAMQA1AGYAMQBlADcAYwAyADcAZQA0AGMA
LgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA
G0EAYwB0AGkAbwBuAE0AZQBzAHMAYQBnAGUAADFUAG8AdABhAGwAIAByAG8AdwBzACAAaQBtAHAA
bwByAHQAZQBkADoAIAB7ADAAfQAAEVIAbwB3AEMAbwB1AG4AdAAAAAAA2OKH4rKfPEyoTSsqOSxk
NQAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAAS
GQIGCAMGERAEAAAAAAQBAAAAAwYSFAQAABIUBAgAEhQEIAEBDgQgAQEIBgABEk0RUQQgABJVBiAC
AQ4SVQQHARIVBSABARFdCAEAAgAAAAAAOQEAClNjcmlwdE1haW4DAFQOB1ZlcnNpb24DMS4wVA4J
UHVibGlzaGVyAFQOC0Rlc2NyaXB0aW9uAAQgABJlBCAAEmkFIAESbRwDIAAcAyAADgUAAg4OHAUA
Ag4cHAQgAQEcAwAAAS8BACpTVF84NDg0MzViZmI1Nzk0NmRiYjc5YjE1ZjFlN2MyN2U0Yy5jc3By
b2oAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxMwAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9u
RXhjZXB0aW9uVGhyb3dzAQAAAHwuAAAAAAAAAAAAAJ4uAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACQLgAAAAAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACBA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAANADAAAAAAAAAAAAANADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDwPq0TAAABAPA+rRM/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAQwAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAMAwAAAQAwADAA
MAAwADAANABiADAAAACAACsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8AOAA0ADgANAAzADUAYgBmAGIANQA3ADkANAA2AGQAYgBiADcAOQBiADEANQBmADEAZQA3AGMA
MgA3AGUANABjAC4AYwBzAHAAcgBvAGoAAAAAAEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAA
AAAAMQAuADAALgA1ADAAMwA3AC4AMQA2ADEAMQAyAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwA
TgBhAG0AZQAAAHMAdABfADgAMQA1AGEAMgBlAGUAYQAzAGUANgA0ADQAZAAwADIAYQBiADgANwA4
ADcAMwA3ADcANAA1ADkAMwBmADgAZQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkA
cgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQAzAAAAeAAoAAEATwBy
AGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAHMAdABfADgAMQA1AGEAMgBlAGUAYQAzAGUA
NgA0ADQAZAAwADIAYQBiADgANwA4ADcAMwA3ADcANAA1ADkAMwBmADgAZQAuAGQAbABsAAAAeAAr
AAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA4ADQAOAA0ADMANQBiAGYAYgA1ADcA
OQA0ADYAZABiAGIANwA5AGIAMQA1AGYAMQBlADcAYwAyADcAZQA0AGMALgBjAHMAcAByAG8AagAA
AAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADAAMwA3AC4A
MQA2ADEAMQAyAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA1ADAAMwA3AC4AMQA2ADEAMQAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAACwPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 1</DTS:Property>
<DTS:Property DTS:Name="DTSID">{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 2</DTS:Property>
<DTS:Property DTS:Name="DTSID">{AB496C3A-93FE-4100-A8D5-29E61EAAA654}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{e3e67043-53b3-4add-896d-084a328a227d}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 3</DTS:Property>
<DTS:Property DTS:Name="DTSID">{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{85077271-c80f-4698-970f-ba4608fb992a}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E8158A79-71EE-4D9D-914D-0408152A7F52}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 4</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="ObjectName">TrustWaterfall</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7AC3B400-85D0-4B72-A321-57B6637128B5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Package.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D41C6659-576A-4F31-9F0A-BF740B07D7D3}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;TaskHost xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsDataFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="17" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="14764" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="0" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Executes a custom script." left="1085" top="3016" logicalid="7" controlid="1" masterid="0" hint1="0" hint2="0" width="5873" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f11600008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/components/1" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Looks up values in a reference dataset by using exact matching." left="1429" top="6535" logicalid="8" controlid="2" masterid="0" hint1="0" hint2="0" width="5344" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000e01400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/components/101" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3622" top="3781" logicalid="9" controlid="3" masterid="0" hint1="0" hint2="0" width="879" height="3254" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/paths/120" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="2" sourceattachpoint="11" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4021" y="4180" /&gt;
      &lt;point x="4021" y="5357" /&gt;
      &lt;point x="4101" y="5357" /&gt;
      &lt;point x="4101" y="6535" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="OLE DB Destination" left="1588" top="10001" logicalid="10" controlid="4" masterid="0" hint1="0" hint2="0" width="5079" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000d71300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/components/129" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3702" top="7300" logicalid="11" controlid="5" masterid="0" hint1="0" hint2="0" width="825" height="3201" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1"&gt;
          &lt;adornment percentpos="50.5584192439863" controlid="7" width="2970" height="344" side="0" behavior="2" himetric="1177" distfromline="175" startobj="0" x="982" y="9025" visible="1" allowoverlap="1" usepercent="1" /&gt;
        &lt;/polyline&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/paths/146" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="2" destid="4" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4101" y="7699" /&gt;
      &lt;point x="4101" y="8850" /&gt;
      &lt;point x="4127" y="8850" /&gt;
      &lt;point x="4127" y="10001" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Text" left="982" top="9025" logicalid="13" controlid="7" masterid="5" hint1="0" hint2="0" width="2970" height="344" noresize="1" nomove="0" nodefaultattachpoints="1" autodrag="1" usedefaultiddshape="1" selectable="0" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="1" groupcollapsed="0" tabstop="0" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000200009a0b000058010000030000000000050000800800008001000000350001000000900144420100065461686f6d6113004c006f006f006b007500700020004d00610074006300680020004f007500740070007500740000000000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="AnnotationAdornment" value="-1" vartype="11" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsDataFlowDiagram&gt;&lt;dwd:DtsComponentDesignerPropertiesList&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;129	TableInfoObjectType&lt;/dwd:key&gt;&lt;dwd:value xsi:type="xsd:string"&gt;Table&lt;/dwd:value&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;129	DataSourceViewID&lt;/dwd:key&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;101	OverwriteParamsSQLProp&lt;/dwd:key&gt;&lt;dwd:value xsi:type="xsd:boolean"&gt;false&lt;/dwd:value&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;/dwd:DtsComponentDesignerPropertiesList&gt;&lt;/TaskHost&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{9272CE6E-9CA0-427A-A376-EA2B529E2B95}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;Output 0&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;Lookup Input&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}-120</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7039359F-1D38-4525-8994-F53F4A0457A0}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;Lookup Match Output&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;OLE DB Destination Input&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}-146</DTS:Property>
<DTS:Property DTS:Name="DTSID">{2A6EF4E0-FB64-4AED-B087-1D1D14CA41D3}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{983B5BA4-28EA-4D87-A6E1-08EF1D0AEAAE}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{463001FB-B0CA-4C2A-A21E-DFE660AB862A}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingLeft&gt;-53&lt;/dwd:BoundingLeft&gt;&lt;dwd:BoundingTop&gt;-3809&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="31" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="-1053" scrolltop="-4809" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="15690" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="1" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="473" top="-3809" logicalid="15" controlid="1" masterid="0" hint1="0" hint2="0" width="5265" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000911400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{85077271-c80f-4698-970f-ba4608fb992a}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="577" top="14316" logicalid="16" controlid="2" masterid="0" hint1="0" hint2="0" width="5106" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f21300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{e3e67043-53b3-4add-896d-084a328a227d}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="526" top="1191" logicalid="17" controlid="3" masterid="0" hint1="0" hint2="0" width="5159" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000271400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="551" top="3785" logicalid="18" controlid="4" masterid="0" hint1="0" hint2="0" width="5107" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f31300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2705" top="1956" logicalid="19" controlid="5" masterid="0" hint1="0" hint2="0" width="800" height="2329" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="3" destid="4" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="2355" /&gt;
      &lt;point x="3105" y="3070" /&gt;
      &lt;point x="3104" y="3070" /&gt;
      &lt;point x="3104" y="3785" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="688" top="10583" logicalid="20" controlid="6" masterid="7" hint1="0" hint2="0" width="5238" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000761400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsContainerObjectManagedBridge.2" tooltip="Sequence Container" left="-53" top="6647" logicalid="21" controlid="7" masterid="0" hint1="0" hint2="0" width="6589" height="5821" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000bd190000bd160000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="Caption" value="Save Output And Discrepancy" vartype="8" /&gt;
        &lt;property name="CaptionHeight" value="1164" vartype="3" /&gt;
        &lt;property name="Collapsed" value="0" vartype="11" /&gt;
        &lt;property name="CollapsedWidth" value="7357" vartype="3" /&gt;
        &lt;property name="LogicalObject" value="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" vartype="8" /&gt;
        &lt;property name="RealHeight" value="0" vartype="3" /&gt;
        &lt;property name="RealWidth" value="0" vartype="3" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1605" top="4550" logicalid="22" controlid="8" masterid="0" hint1="0" hint2="0" width="2036" height="2597" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{AB496C3A-93FE-4100-A8D5-29E61EAAA654}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="4" destid="7" sourceattachpoint="5" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2004" y="4949" /&gt;
      &lt;point x="2004" y="6222" /&gt;
      &lt;point x="3241" y="6222" /&gt;
      &lt;point x="3241" y="6647" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2731" top="12069" logicalid="23" controlid="9" masterid="0" hint1="0" hint2="0" width="910" height="2747" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="7" destid="2" sourceattachpoint="11" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3241" y="12468" /&gt;
      &lt;point x="3241" y="13392" /&gt;
      &lt;point x="3130" y="13392" /&gt;
      &lt;point x="3130" y="14316" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="819" top="8339" logicalid="24" controlid="10" masterid="7" hint1="0" hint2="0" width="4815" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000cf1200008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2827" top="9104" logicalid="25" controlid="11" masterid="0" hint1="0" hint2="0" width="880" height="1979" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="10" destid="6" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3226" y="9503" /&gt;
      &lt;point x="3226" y="10043" /&gt;
      &lt;point x="3307" y="10043" /&gt;
      &lt;point x="3307" y="10583" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="479" top="-1204" logicalid="26" controlid="12" masterid="0" hint1="0" hint2="0" width="5345" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000e11400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2706" top="-3044" logicalid="27" controlid="13" masterid="0" hint1="0" hint2="0" width="845" height="2340" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E8158A79-71EE-4D9D-914D-0408152A7F52}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="12" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="-2645" /&gt;
      &lt;point x="3105" y="-1924" /&gt;
      &lt;point x="3151" y="-1924" /&gt;
      &lt;point x="3151" y="-1204" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1652" top="-439" logicalid="28" controlid="14" masterid="0" hint1="0" hint2="0" width="1853" height="2130" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="12" destid="3" sourceattachpoint="5" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2051" y="-40" /&gt;
      &lt;point x="2051" y="883" /&gt;
      &lt;point x="3105" y="883" /&gt;
      &lt;point x="3105" y="1191" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;dwd:PersistedViewPortLeft&gt;-1053&lt;/dwd:PersistedViewPortLeft&gt;&lt;dwd:PersistedViewPortTop&gt;-4809&lt;/dwd:PersistedViewPortTop&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{7AC3B400-85D0-4B72-A321-57B6637128B5}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{AB829A2B-BD08-4A19-9370-B6EF1535C7FF}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;TaskHost xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsDataFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="10" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="14764" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="0" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;&lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;&lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="OLE DB Source" left="1879" top="3016" logicalid="4" controlid="1" masterid="0" hint1="0" hint2="0" width="4286" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;&lt;control&gt;&lt;ddsxmlobjectstreaminitwrapper binary="00080000be1000008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;&lt;ddsxmlobj&gt;&lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}/components/1" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Inserts rows into a cache." left="2091" top="5794" logicalid="5" controlid="2" masterid="0" hint1="0" hint2="0" width="4154" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;&lt;control&gt;&lt;ddsxmlobjectstreaminitwrapper binary="000800003a1000008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;&lt;ddsxmlobj&gt;&lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}/components/25" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3623" top="3781" logicalid="6" controlid="3" masterid="0" hint1="0" hint2="0" width="945" height="2513" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;&lt;control&gt;&lt;ddsxmlobj&gt;&lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;&lt;ddsxmlobj&gt;&lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}/paths/29" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="2" sourceattachpoint="7" destattachpoint="6" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;&lt;point x="4022" y="4180" /&gt;
      &lt;point x="4022" y="4987" /&gt;
      &lt;point x="4168" y="4987" /&gt;
      &lt;point x="4168" y="5794" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsDataFlowDiagram&gt;&lt;dwd:DtsComponentDesignerPropertiesList&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;1	DataSourceViewID&lt;/dwd:key&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;/dwd:DtsComponentDesignerPropertiesList&gt;&lt;/TaskHost&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{CC92A6D2-B1CB-45C2-AC1D-484AB9885A8C}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;OLE DB Source Output&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;Cache Input&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}-29</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E87BE653-E648-4752-BF5B-CC11234064ED}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{AB496C3A-93FE-4100-A8D5-29E61EAAA654}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{AFD5F65E-B39E-47F9-83E5-B0ED7DBCE568}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{E8158A79-71EE-4D9D-914D-0408152A7F52}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{60C412FF-6B34-4FCE-AFD4-8BF82890096F}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3DFE021B-03BE-4CAD-803D-B4F655A3EC9B}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;TaskHost xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsDataFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="10" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="14764" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="0" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="OLE DB Source" left="1615" top="3016" logicalid="4" controlid="1" masterid="0" hint1="0" hint2="0" width="4814" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000ce1200008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}/components/1" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Executes a custom script." left="1773" top="6746" logicalid="5" controlid="2" masterid="0" hint1="0" hint2="0" width="4497" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000911100008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}/components/31" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3622" top="3781" logicalid="6" controlid="3" masterid="0" hint1="0" hint2="0" width="800" height="3465" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}/paths/43" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="2" sourceattachpoint="9" destattachpoint="6" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4022" y="4180" /&gt;
      &lt;point x="4022" y="5463" /&gt;
      &lt;point x="4021" y="5463" /&gt;
      &lt;point x="4021" y="6746" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsDataFlowDiagram&gt;&lt;dwd:DtsComponentDesignerPropertiesList&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;1	DataSourceViewID&lt;/dwd:key&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;/dwd:DtsComponentDesignerPropertiesList&gt;&lt;/TaskHost&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{77A713AC-B692-433A-92DB-97EE4E63E818}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;OLE DB Source Output&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;Input 0&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}-43</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D037481B-4D8F-496E-A320-1C9A8DE2240C}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingLeft&gt;-53&lt;/dwd:BoundingLeft&gt;&lt;dwd:BoundingTop&gt;-3809&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="31" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="-1053" scrolltop="-4809" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="15690" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="1" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="473" top="-3809" logicalid="15" controlid="1" masterid="0" hint1="0" hint2="0" width="5265" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000911400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{85077271-c80f-4698-970f-ba4608fb992a}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="577" top="14316" logicalid="16" controlid="2" masterid="0" hint1="0" hint2="0" width="5106" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f21300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{e3e67043-53b3-4add-896d-084a328a227d}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="526" top="1191" logicalid="17" controlid="3" masterid="0" hint1="0" hint2="0" width="5159" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000271400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="551" top="3785" logicalid="18" controlid="4" masterid="0" hint1="0" hint2="0" width="5107" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f31300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2705" top="1956" logicalid="19" controlid="5" masterid="0" hint1="0" hint2="0" width="800" height="2329" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="3" destid="4" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="2355" /&gt;
      &lt;point x="3105" y="3070" /&gt;
      &lt;point x="3104" y="3070" /&gt;
      &lt;point x="3104" y="3785" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="688" top="10583" logicalid="20" controlid="6" masterid="7" hint1="0" hint2="0" width="5238" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000761400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsContainerObjectManagedBridge.2" tooltip="Sequence Container" left="-53" top="6647" logicalid="21" controlid="7" masterid="0" hint1="0" hint2="0" width="6589" height="5821" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000bd190000bd160000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="Caption" value="Save Output And Discrepancy" vartype="8" /&gt;
        &lt;property name="CaptionHeight" value="1164" vartype="3" /&gt;
        &lt;property name="Collapsed" value="0" vartype="11" /&gt;
        &lt;property name="CollapsedWidth" value="7357" vartype="3" /&gt;
        &lt;property name="LogicalObject" value="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" vartype="8" /&gt;
        &lt;property name="RealHeight" value="0" vartype="3" /&gt;
        &lt;property name="RealWidth" value="0" vartype="3" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1605" top="4550" logicalid="22" controlid="8" masterid="0" hint1="0" hint2="0" width="2036" height="2597" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{AB496C3A-93FE-4100-A8D5-29E61EAAA654}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="4" destid="7" sourceattachpoint="5" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2004" y="4949" /&gt;
      &lt;point x="2004" y="6222" /&gt;
      &lt;point x="3241" y="6222" /&gt;
      &lt;point x="3241" y="6647" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2731" top="12069" logicalid="23" controlid="9" masterid="0" hint1="0" hint2="0" width="910" height="2747" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="7" destid="2" sourceattachpoint="11" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3241" y="12468" /&gt;
      &lt;point x="3241" y="13392" /&gt;
      &lt;point x="3130" y="13392" /&gt;
      &lt;point x="3130" y="14316" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="819" top="8339" logicalid="24" controlid="10" masterid="7" hint1="0" hint2="0" width="4815" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000cf1200008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2827" top="9104" logicalid="25" controlid="11" masterid="0" hint1="0" hint2="0" width="880" height="1979" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="10" destid="6" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3226" y="9503" /&gt;
      &lt;point x="3226" y="10043" /&gt;
      &lt;point x="3307" y="10043" /&gt;
      &lt;point x="3307" y="10583" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="479" top="-1204" logicalid="26" controlid="12" masterid="0" hint1="0" hint2="0" width="5345" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000e11400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2706" top="-3044" logicalid="27" controlid="13" masterid="0" hint1="0" hint2="0" width="845" height="2340" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E8158A79-71EE-4D9D-914D-0408152A7F52}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="12" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="-2645" /&gt;
      &lt;point x="3105" y="-1924" /&gt;
      &lt;point x="3151" y="-1924" /&gt;
      &lt;point x="3151" y="-1204" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1652" top="-439" logicalid="28" controlid="14" masterid="0" hint1="0" hint2="0" width="1853" height="2130" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="12" destid="3" sourceattachpoint="5" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2051" y="-40" /&gt;
      &lt;point x="2051" y="883" /&gt;
      &lt;point x="3105" y="883" /&gt;
      &lt;point x="3105" y="1191" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;dwd:PersistedViewPortLeft&gt;-1053&lt;/dwd:PersistedViewPortLeft&gt;&lt;dwd:PersistedViewPortTop&gt;-4809&lt;/dwd:PersistedViewPortTop&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">package-diagram</DTS:Property>
<DTS:Property DTS:Name="DTSID">{DF4EC702-5F0C-4462-BF0C-B83D88BDFE3D}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable></DTS:Executable>