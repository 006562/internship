<?xml version="1.0"?><DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts" DTS:ExecutableType="SSIS.Package.2">
<DTS:Property DTS:Name="PackageFormatVersion">3</DTS:Property>
<DTS:Property DTS:Name="VersionComments"></DTS:Property>
<DTS:Property DTS:Name="CreatorName">TSYDEV\tfs_l048057</DTS:Property>
<DTS:Property DTS:Name="CreatorComputerName">AU2104SDVDEV23</DTS:Property>
<DTS:Property DTS:Name="CreationDate" DTS:DataType="7">10/3/2014 4:59:15 PM</DTS:Property>
<DTS:Property DTS:Name="PackageType">5</DTS:Property>
<DTS:Property DTS:Name="ProtectionLevel">1</DTS:Property>
<DTS:Property DTS:Name="MaxConcurrentExecutables">1</DTS:Property>
<DTS:Property DTS:Name="PackagePriorityClass">0</DTS:Property>
<DTS:Property DTS:Name="VersionMajor">1</DTS:Property>
<DTS:Property DTS:Name="VersionMinor">0</DTS:Property>
<DTS:Property DTS:Name="VersionBuild">427</DTS:Property>
<DTS:Property DTS:Name="VersionGUID">{689AB6A5-AD7B-4D9B-9700-8AB5F0425ADA}</DTS:Property>
<DTS:Property DTS:Name="EnableConfig">0</DTS:Property>
<DTS:Property DTS:Name="CheckpointFileName"></DTS:Property>
<DTS:Property DTS:Name="SaveCheckpoints">0</DTS:Property>
<DTS:Property DTS:Name="CheckpointUsage">0</DTS:Property>
<DTS:Property DTS:Name="SuppressConfigurationWarnings">0</DTS:Property>
<DTS:ConnectionManager>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">OLEDB</DTS:Property><DTS:PropertyExpression DTS:Name="ConnectionString">@[User::OLEDBConnString_DAL_SEC]</DTS:PropertyExpression><DTS:ObjectData><DTS:ConnectionManager>
<DTS:Property DTS:Name="Retain">0</DTS:Property>
<DTS:Property DTS:Name="ConnectionString">Data Source=AU2104SDSSQL01\DAL_SEC;Initial Catalog=DAL_SEC;Provider=SQLNCLI10.1;Integrated Security=SSPI;</DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:ConnectionManager>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">TrustWaterfall_1</DTS:Property>
<DTS:Property DTS:Name="DTSID">{baa14379-5d50-498d-8b8d-e54350987958}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">FILE</DTS:Property><DTS:PropertyExpression DTS:Name="ConnectionString">@[User::LogPath] + @[System::PackageName] + "_" +  (DT_WSTR, 4)DATEPART("yyyy", @[System::StartTime]) + RIGHT("0" + (DT_WSTR, 2)DATEPART("mm", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("dd", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("hh", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("mi", @[System::StartTime]), 2) + RIGHT("0" + (DT_WSTR, 2)DATEPART("ss", @[System::StartTime]), 2)  +  ".log"</DTS:PropertyExpression><DTS:ObjectData><DTS:ConnectionManager>
<DTS:Property DTS:Name="FileUsageType">1</DTS:Property>
<DTS:Property DTS:Name="ConnectionString">E:\TSSWCFServices\TaskProcessServices\R4.Task\Logs\TrustWaterfall_1_20150113095713.log</DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:ConnectionManager>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VAriableSetItemLookup</DTS:Property>
<DTS:Property DTS:Name="DTSID">{35270CD3-4C05-4D9A-9A4F-43E82DDC69A5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">CACHE</DTS:Property><DTS:ObjectData><DTS:ConnectionManager>
<DTS:Property DTS:Name="UseFile">0</DTS:Property>
<DTS:Property DTS:Name="UseEncryption">0</DTS:Property>
<DTS:Property DTS:Name="RetainData">-1</DTS:Property>
<DTS:CacheColumn>
<DTS:Property DTS:Name="DataType">3</DTS:Property>
<DTS:Property DTS:Name="Length">0</DTS:Property>
<DTS:Property DTS:Name="Precision">0</DTS:Property>
<DTS:Property DTS:Name="Scale">0</DTS:Property>
<DTS:Property DTS:Name="CodePage">0</DTS:Property>
<DTS:Property DTS:Name="IndexPosition">1</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VariableSequenceNo</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E8598C73-5717-4577-B874-0A819380AEDA}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:CacheColumn>
<DTS:CacheColumn>
<DTS:Property DTS:Name="DataType">3</DTS:Property>
<DTS:Property DTS:Name="Length">0</DTS:Property>
<DTS:Property DTS:Name="Precision">0</DTS:Property>
<DTS:Property DTS:Name="Scale">0</DTS:Property>
<DTS:Property DTS:Name="CodePage">0</DTS:Property>
<DTS:Property DTS:Name="IndexPosition">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VariableSetID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D46543F4-B964-4720-BADD-AF6423BADE33}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:CacheColumn>
<DTS:CacheColumn>
<DTS:Property DTS:Name="DataType">3</DTS:Property>
<DTS:Property DTS:Name="Length">0</DTS:Property>
<DTS:Property DTS:Name="Precision">0</DTS:Property>
<DTS:Property DTS:Name="Scale">0</DTS:Property>
<DTS:Property DTS:Name="CodePage">0</DTS:Property>
<DTS:Property DTS:Name="IndexPosition">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">VariableSetItemID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{DBAE1D59-B2AD-46B4-A25C-2E210E3C7670}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:CacheColumn>
<DTS:Property DTS:Name="ConnectionString"></DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:LogProvider>
<DTS:Property DTS:Name="ConfigString">TrustWaterfall_1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">SSIS log provider for Text files</DTS:Property>
<DTS:Property DTS:Name="DTSID">{59903F26-B829-4F25-8629-EC874FCBBE93}</DTS:Property>
<DTS:Property DTS:Name="Description">Writes log entries for events to a CSV file</DTS:Property>
<DTS:Property DTS:Name="CreationName">DTS.LogProviderTextFile.2</DTS:Property><DTS:ObjectData><InnerObject/></DTS:ObjectData></DTS:LogProvider>
<DTS:Property DTS:Name="LastModifiedProductVersion">10.50.1600.1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">3081</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">-1</DTS:Property>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"Data Source=" + @[User::DBServer_DAL_SEC] + ";Initial Catalog=" + @[User::DBName_DAL_SEC] + ";Integrated Security=SSPI;"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Data Source=AU2104SDSSQL01\DAL_SEC;Initial Catalog=DAL_SEC;Integrated Security=SSPI;</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_ConnString_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3FA6D438-386A-4CA1-B325-24ED33D42F4A}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_InputRange</DTS:Property>
<DTS:Property DTS:Name="DTSID">{FF0399BD-5058-46AE-883C-20CCA4CB1E8F}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"exec dbo.usp_GetFactVariableSet " + @[User::DimReportingDateID] + ", '" + @[User::TrustID] + "'"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">exec dbo.usp_GetFactVariableSet 20141013, 'I'</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_query_GetFactVariableSet</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6F992E59-3A5F-4F6B-AC97-3F9C8A3DD960}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"select si.VariableSetItemId, si.VariableSetId, SequenceNo 
from tblVariableSetItem si 
inner join tblVariableSet vs on si.VariableSetId = vs.VariableSetId 
where vs.VariableSetCode = '" +  @[User::TrustID]+ "' and vs.IsCurrent = 1 and si.IsEnabled = 1"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">select si.VariableSetItemId, si.VariableSetId, SequenceNo 
from tblVariableSetItem si 
inner join tblVariableSet vs on si.VariableSetId = vs.VariableSetId 
where vs.VariableSetCode = 'I' and vs.IsCurrent = 1 and si.IsEnabled = 1</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">_query_GetVariableSetItemLookup</DTS:Property>
<DTS:Property DTS:Name="DTSID">{1D9443B3-F906-4D08-950B-8E5449D6D9A1}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">ActionMessage</DTS:Property>
<DTS:Property DTS:Name="DTSID">{0A30E82A-2B75-47EC-B112-AAFFF04B6AC3}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">DAL_SEC</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">DBName_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{C092151B-57A3-44F5-8CDF-6FC96200B3E4}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">AU2104SDSSQL01\DAL_SEC</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">DBServer_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7BD9D867-B75F-41DE-97F3-DDA6F13C40DD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">20141013</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">DimReportingDateID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6D8C3392-DD2B-48E7-B4D8-683A44055A43}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">E:\TSSWCFServices\TaskProcessServices\R4.Task\Logs\</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">LogPath</DTS:Property>
<DTS:Property DTS:Name="DTSID">{507ADF37-8DA9-4D0E-99C9-FFED6E026E03}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression">"Data Source=" + @[User::DBServer_DAL_SEC] + ";Initial Catalog=" + @[User::DBName_DAL_SEC] + ";Provider=SQLNCLI10.1;Integrated Security=SSPI;"</DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">-1</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Data Source=AU2104SDSSQL01\DAL_SEC;Initial Catalog=DAL_SEC;Provider=SQLNCLI10.1;Integrated Security=SSPI;</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">OLEDBConnString_DAL_SEC</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3EA9F974-C524-4BF4-B604-16568C22886E}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">6789</DTS:Property><DTS:VariableValue DTS:DataType="3">0</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">RowCount</DTS:Property>
<DTS:Property DTS:Name="DTSID">{1EA392F7-2C94-43C1-A998-3D32B32F95AD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">SessionID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{92FC159E-94BB-4EFD-B1C0-A71EA3CF8A08}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Waterfall</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">SheetName</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3ACCBCAF-A133-4B32-A8CA-F2503A20BBB5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">REPORT DATE</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">StartCellValue</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D7223528-363E-4FF6-8F87-B046AB889EAC}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">I</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">TrustID</DTS:Property>
<DTS:Property DTS:Name="DTSID">{39A2D41B-0672-493B-A4C6-93F81733E4FD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Crusade 2007-1E RBA Template v8.xlsm</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">WaterfallTemplateFileName</DTS:Property>
<DTS:Property DTS:Name="DTSID">{F5CDCF8A-DCAB-47CA-9026-64ED4311BE0E}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">E:\TSSWCFServices\TaskProcessServices\R4.Task\Working</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">WaterfallTemplatePath</DTS:Property>
<DTS:Property DTS:Name="DTSID">{6CC99235-0C70-4177-8883-B3BA584FF6FD}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">1</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8">3,7,OnError,13,OnInformation,12,OnTaskFailed</DTS:Property>
<DTS:Property DTS:Name="ColumnFilter" DTS:EventName="OnError">
<DTS:Property DTS:Name="Computer">-1</DTS:Property>
<DTS:Property DTS:Name="Operator">-1</DTS:Property>
<DTS:Property DTS:Name="SourceName">-1</DTS:Property>
<DTS:Property DTS:Name="SourceID">-1</DTS:Property>
<DTS:Property DTS:Name="ExecutionID">-1</DTS:Property>
<DTS:Property DTS:Name="MessageText">-1</DTS:Property>
<DTS:Property DTS:Name="DataBytes">-1</DTS:Property></DTS:Property>
<DTS:Property DTS:Name="ColumnFilter" DTS:EventName="OnInformation">
<DTS:Property DTS:Name="Computer">-1</DTS:Property>
<DTS:Property DTS:Name="Operator">-1</DTS:Property>
<DTS:Property DTS:Name="SourceName">-1</DTS:Property>
<DTS:Property DTS:Name="SourceID">-1</DTS:Property>
<DTS:Property DTS:Name="ExecutionID">-1</DTS:Property>
<DTS:Property DTS:Name="MessageText">-1</DTS:Property>
<DTS:Property DTS:Name="DataBytes">-1</DTS:Property></DTS:Property>
<DTS:Property DTS:Name="ColumnFilter" DTS:EventName="OnTaskFailed">
<DTS:Property DTS:Name="Computer">-1</DTS:Property>
<DTS:Property DTS:Name="Operator">-1</DTS:Property>
<DTS:Property DTS:Name="SourceName">-1</DTS:Property>
<DTS:Property DTS:Name="SourceID">-1</DTS:Property>
<DTS:Property DTS:Name="ExecutionID">-1</DTS:Property>
<DTS:Property DTS:Name="MessageText">-1</DTS:Property>
<DTS:Property DTS:Name="DataBytes">-1</DTS:Property></DTS:Property><DTS:SelectedLogProvider DTS:InstanceID="{59903F26-B829-4F25-8629-EC874FCBBE93}"/></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Package Initialise</DTS:Property>
<DTS:Property DTS:Name="DTSID">{85077271-c80f-4698-970f-ba4608fb992a}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_2d479114748d45ca91e00b4ffab8a801" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::LogPath,User::OLEDBConnString_DAL_SEC,User::SessionID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath" ReadWriteVariables=""><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;

namespace ST_84e426a1e0734af192fb72ef1fa02444.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here

            string sMsg = null;
            string sLogPath = Dts.Variables["LogPath"].Value.ToString();
            string sSessionID = Dts.Variables["SessionID"].Value.ToString();
            string sDataSource = Dts.Variables["OLEDBConnString_DAL_SEC"].Value.ToString();
            string sFileName = Dts.Variables["WaterfallTemplateFileName"].Value.ToString();
            string sFilePath = Dts.Variables["WaterfallTemplatePath"].Value.ToString();

            bool bfireAgain = true;


            sMsg = string.Format("Package input parameters: SessionID={0}; LogPath={1}; Data Source={2}; FilePath={3}; FileName={4}", sSessionID, sLogPath, sDataSource, sFilePath, sFileName);
            Dts.Events.FireInformation(1000, "Package Initialisation", sMsg, null, 0, ref bfireAgain);

            
            if (!Directory.Exists(sLogPath))
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                sMsg = string.Format("Package Init: Log Path {0} does not exist", sLogPath);
                throw new Exception(sMsg);
            }
            if (!Directory.Exists(sFilePath))
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                sMsg = string.Format("Package Init: Waterfall template Path {0} does not exist", sFilePath);
                throw new Exception(sMsg);
            }
            if (!File.Exists(sFilePath + "\\" + sFileName))
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                sMsg = string.Format("Package Init: Waterfall template file {0} does not exist", sFilePath + "\\" + sFileName);
                throw new Exception(sMsg);
            }
          
            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Settings.get_Default():ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties.Sett" +
    "ings")]

namespace ST_84e426a1e0734af192fb72ef1fa02444.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_84e426a1e0734af192fb72ef1fa02444.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_84e426a1e0734af192fb72ef1fa02444.csproj")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\st_2d479114748d45ca91e00b4ffab8a801.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><NoStandardLibraries>false</NoStandardLibraries><RootNamespace>ST_84e426a1e0734af192fb72ef1fa02444.csproj</RootNamespace><AssemblyName>st_2d479114748d45ca91e00b4ffab8a801</AssemblyName><ProjectGuid>{9DEF5CB7-43F9-4697-B2BF-861187EC0526}</ProjectGuid></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}"><ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ScriptTask</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem><BinaryItem Name="\bin\release\st_2d479114748d45ca91e00b4ffab8a801.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAF8CW1QAAAAAAAAAAOAAAiELAQgAABQAAAAIAAAAAAAADjMA
AAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALgyAABTAAAAAEAAACgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFBMAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAACgEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
MgAAAAAAAEgAAAACAAUAICMAAJgPAAABAAAAAAAAAGgiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBwCUAQAAAQAAERQKAigNAAAKbw4AAApyAQAAcG8PAAAK
bxAAAApvEQAACgsCKA0AAApvDgAACnIRAABwbw8AAApvEAAACm8RAAAKDAIoDQAACm8OAAAKciUA
AHBvDwAACm8QAAAKbxEAAAoNAigNAAAKbw4AAApyVQAAcG8PAAAKbxAAAApvEQAAChMEAigNAAAK
bw4AAApyiQAAcG8PAAAKbxAAAApvEQAAChMFFxMGcrUAAHAbjQQAAAETBxEHFgiiEQcXB6IRBxgJ
ohEHGREFohEHGhEEohEHKBIAAAoKAigNAAAKbxMAAAog6AMAAHJ6AQBwBhQWEgZvFAAACgcoFQAA
Ci0fAigNAAAKF28WAAAKcqgBAHAHKBcAAAoKBnMYAAAKehEFKBUAAAotIAIoDQAAChdvFgAACnL8
AQBwEQUoFwAACgoGcxgAAAp6EQVybgIAcBEEKBkAAAooGgAACi0sAigNAAAKF28WAAAKcnICAHAR
BXJuAgBwEQQoGQAACigXAAAKCgZzGAAACnoCKA0AAAoWbxYAAAoqHgIoGwAACioafgQAAAQqLnME
AAAGgAQAAAQqHgIoHQAACioeAigfAAAKKgATMAMALQAAAAIAABF+BQAABC0gcuQCAHDQBQAAAigg
AAAKbyEAAApzIgAACgoGgAUAAAR+BQAABCoafgYAAAQqHgKABgAABCoAAAAAtAAAAM7K774BAAAA
kQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj0y
LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkj
U3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAA
AEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAABAEAAAjfgAAfAQAABwGAAAjU3Ry
aW5ncwAAAACYCgAAZAMAACNVUwD8DQAAEAAAACNHVUlEAAAADA4AAIwBAAAjQmxvYgAAAAAAAAAC
AAABVx2iAQkDAAAA+gEzABYAAAEAAAAhAAAABQAAAAYAAAAJAAAAAQAAACMAAAACAAAADgAAAAIA
AAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAAAKAAEAAAAAAAYABwHeAAoAMwEsAQ4ATQE4
AQoAZQEsAQoAxAGzAQoA9QHgAQoAXQJLAgoAdAJLAgoAkQJLAgoAsAJLAgoAyQJLAgoA4gJLAgoA
/QJLAgoAGANLAgoAMQNLAgoAagNKAwoAigNKAxIA2QPMAwYA6APeABYAQQQhBBYAWQQhBAoAfgQs
AQYAjATeAAoAxQS7BAoA5QQsAQoA9gS7BAoA+wRKAwoAMAUdBQoATQUsAQoAUgUsAQoAdgVLAg4A
ogWMBQ4AuwWMBQAAAAABAAAAAAABAAEAAQAQADIAPQAFAAEAAQADAQAAaAAAAAkAAQADAAABEAB2
AH8ADQAEAAMAAAAQALUAfwARAAUABgAGBncBFwBWgH8BGgBWgIcBGgARAI8BKAARANQBNgARAAEC
OgBQIAAAAACGAGwBEwABAPAhAAAAAIYYcQETAAEA+CEAAAAAlgifASwAAQALIgAAAACGGHEBEwAB
AP8hAAAAAJEYFgXpAAEAEyIAAAAAgxhxARMAAQAcIgAAAACTCBECPgABAFUiAAAAAJMIJQJDAAEA
XCIAAAAAkwgxAkgAAQAAAAEARQI5AHEBWABBAHEBWABJAHEBWABRAHEBWABZAHEBWABhAHEBWABp
AHEBWABxAHEBWAB5AHEBWACBAHEBXQCJAHEBEwCRAHEBWAAJAPoDnACZAEsEoQChAGIEpgCpAGsE
rAAhAHUEsACxAIUEtACZAKAEuwC5AKsEwADBAM8EywCZANYEXQCxAIUE0ADJAHEBWACxAO8E1gDR
AM8EywAJAHEBEwDZAHEBEwAZAHEBEwDhAHEBEwAhAHEBEwDpAGQF7QDpAH8F9AApAHEB+QABAXEB
BQEIAAgAHgAIAAwAIwAuABMARQEuABsARQEuAFMAYgEuAAsAFQEuAFsAawEuACMARQEuACsAFQEu
ADMASwEuADsARQFDAGMAYgBJABsBDAFpABsBDAGBAOMAIwCjAPMAIwDdAAABBAABAAUAAgAAAKsB
MQAAAMQBTgAAAD0CUwACAAMAAwACAAcABQACAAgABwABAAkABwAEgAAAAQAAAC8Vh3EAAAAAAACo
AwAACgAAAAAAAAAAAAAAAQC/AAAAAAACAAAAAAAAAAAAAAAKACMBAAAAAAIAAAAAAAAAAAAAAAoA
LAEAAAAAAwAFAAAAAAAAAAAACgDMAwAAAAAKAAAAAAAAAAAAAAABAAIEAAAAAAAAAAABAAAA0AUA
AAMAAgAAAAAAADxNb2R1bGU+AHN0XzJkNDc5MTE0NzQ4ZDQ1Y2E5MWUwMGI0ZmZhYjhhODAxLmRs
bABTY3JpcHRNYWluAFNUXzg0ZTQyNmExZTA3MzRhZjE5MmZiNzJlZjFmYTAyNDQ0LmNzcHJvagBT
Y3JpcHRSZXN1bHRzAFNldHRpbmdzAFNUXzg0ZTQyNmExZTA3MzRhZjE5MmZiNzJlZjFmYTAyNDQ0
LmNzcHJvai5Qcm9wZXJ0aWVzAFJlc291cmNlcwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRh
c2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRP
YmplY3RNb2RlbEJhc2UAbXNjb3JsaWIAU3lzdGVtAEVudW0AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAT2JqZWN0AE1haW4ALmN0b3IAdmFsdWVfXwBTdWNjZXNz
AEZhaWx1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAU3lzdGVtLlJlc291
cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3Vs
dHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUA
c2V0X0N1bHR1cmUAQ3VsdHVyZQB2YWx1ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0
aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1
dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAc3RfMmQ0NzkxMTQ3NDhkNDVjYTkxZTAw
YjRmZmFiOGE4MDEAU3lzdGVtLkFkZEluAEFkZEluQXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVs
AGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0A
Z2V0X1ZhbHVlAFRvU3RyaW5nAFN0cmluZwBGb3JtYXQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRf
RXZlbnRzAEZpcmVJbmZvcm1hdGlvbgBTeXN0ZW0uSU8ARGlyZWN0b3J5AEV4aXN0cwBzZXRfVGFz
a1Jlc3VsdABFeGNlcHRpb24AQ29uY2F0AEZpbGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUA
LmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5
cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2Vt
Ymx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlU3RhdGUAU1RfODRlNDI2YTFlMDczNGFmMTkyZmI3MmVmMWZhMDI0NDQuY3Nwcm9q
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAAAPTABvAGcAUABhAHQAaAAAE1MAZQBz
AHMAaQBvAG4ASQBEAAAvTwBMAEUARABCAEMAbwBuAG4AUwB0AHIAaQBuAGcAXwBEAEEATABfAFMA
RQBDAAAzVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABsAGEAdABlAEYAaQBsAGUATgBhAG0AZQAA
K1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBQAGEAdABoAACAw1AAYQBjAGsAYQBn
AGUAIABpAG4AcAB1AHQAIABwAGEAcgBhAG0AZQB0AGUAcgBzADoAIABTAGUAcwBzAGkAbwBuAEkA
RAA9AHsAMAB9ADsAIABMAG8AZwBQAGEAdABoAD0AewAxAH0AOwAgAEQAYQB0AGEAIABTAG8AdQBy
AGMAZQA9AHsAMgB9ADsAIABGAGkAbABlAFAAYQB0AGgAPQB7ADMAfQA7ACAARgBpAGwAZQBOAGEA
bQBlAD0AewA0AH0AAC1QAGEAYwBrAGEAZwBlACAASQBuAGkAdABpAGEAbABpAHMAYQB0AGkAbwBu
AABTUABhAGMAawBhAGcAZQAgAEkAbgBpAHQAOgAgAEwAbwBnACAAUABhAHQAaAAgAHsAMAB9ACAA
ZABvAGUAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AABxUABhAGMAawBhAGcAZQAgAEkAbgBpAHQAOgAg
AFcAYQB0AGUAcgBmAGEAbABsACAAdABlAG0AcABsAGEAdABlACAAUABhAHQAaAAgAHsAMAB9ACAA
ZABvAGUAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AAADXAAAcVAAYQBjAGsAYQBnAGUAIABJAG4AaQB0
ADoAIABXAGEAdABlAHIAZgBhAGwAbAAgAHQAZQBtAHAAbABhAHQAZQAgAGYAaQBsAGUAIAB7ADAA
fQAgAGQAbwBlAHMAIABuAG8AdAAgAGUAeABpAHMAdAAAf1MAVABfADgANABlADQAMgA2AGEAMQBl
ADAANwAzADQAYQBmADEAOQAyAGYAYgA3ADIAZQBmADEAZgBhADAAMgA0ADQANAAuAGMAcwBwAHIA
bwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAC6B7Azgj1qR7vp
aUithIaqAAiJhF3NgIDMkQi3elxWGTTgiQMgAAECBggDBhEMBAAAAAAEAQAAAAMGEhAEAAASEAQI
ABIQAwYSFQMGEhkEAAASFQQAABIZBQABARIZBAgAEhUECAASGQQgAQEOBCABAQg5AQAKU2NyaXB0
TWFpbgMAVA4HVmVyc2lvbgMxLjBUDglQdWJsaXNoZXIAVA4LRGVzY3JpcHRpb24ABCAAEk0EIAAS
UQUgARJVHAMgABwDIAAOBgACDg4dHAQgABJdCiAGAQgODg4IEAIEAAECDgUAAg4OHAYAAw4ODg4L
BwgODg4ODg4CHRwDAAABBgABEnUReQQgABJ9BiACAQ4SfQQHARIVBiABARGAhQgBAAIAAAAAAC8B
ACpTVF84NGU0MjZhMWUwNzM0YWYxOTJmYjcyZWYxZmEwMjQ0NC5jc3Byb2oAAAUBAAAAABYBABFD
b3B5cmlnaHQgQCAgMjAxMwAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dz
AQAA4DIAAAAAAAAAAAAA/jIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAyAAAAAAAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgQAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAADQAwAAAAAAAAAAAADQAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAh3EvFQAAAQCHcS8VPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEMAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAADAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADgANABlADQAMgA2AGEAMQBlADAANwAzADQAYQBmADEAOQAyAGYAYgA3ADIAZQBmADEAZgBhADAA
MgA0ADQANAAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAA
ADEALgAwAC4ANQA0ADIAMwAuADIAOQAwADYAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4A
YQBtAGUAAABzAHQAXwAyAGQANAA3ADkAMQAxADQANwA0ADgAZAA0ADUAYwBhADkAMQBlADAAMABi
ADQAZgBmAGEAYgA4AGEAOAAwADEALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIA
aQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAMwAAAHgAKAABAE8AcgBp
AGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABzAHQAXwAyAGQANAA3ADkAMQAxADQANwA0ADgA
ZAA0ADUAYwBhADkAMQBlADAAMABiADQAZgBmAGEAYgA4AGEAOAAwADEALgBkAGwAbAAAAHgAKwAB
AFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AOAA0AGUANAAyADYAYQAxAGUAMAA3ADMA
NABhAGYAMQA5ADIAZgBiADcAMgBlAGYAMQBmAGEAMAAyADQANAA0AC4AYwBzAHAAcgBvAGoAAAAA
AEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADIAMwAuADIA
OQAwADYAMwAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANQA0ADIAMwAuADIAOQAwADYAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAEDMAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">1</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Prepare OUTPUT</DTS:Property>
<DTS:Property DTS:Name="DTSID">{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_a7b701b3746943d2bcc4744e85a99b00" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::DimReportingDateID,User::SheetName,User::StartCellValue,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath" ReadWriteVariables="User::_InputRange"><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
//using System.Windows.Forms;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;

namespace ST_a7b701b3746943d2bcc4744e85a99b00.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        private string _ReportingDate;
        private string _sFileName;
        private string _sFilePath;
        private string _sFile;
        private SpreadsheetDocument _spreadsheetDocument;
        private Sheet _sheet;
        private WorksheetPart _worksheetPart;
        private SheetData _sheetData;
        private SharedStringTablePart _sharedStringTablePart;
        private DocumentFormat.OpenXml.StringValue _sheetReferenceId;
        private string _sSheetName;
        private string _StartCellValue;
        private string _TrustID;
        private WaterfallReport _wr;
        private string _sInputRange;

        public void Main()
        {
            // TODO: Add your code here
            PreExecute();

            bool bFireAgain = true;
            string sMsg = "";

            var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
            if (StartCell == null)
            {
                sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
                Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);
            }
            _wr = new WaterfallReport(_sheetData, _sharedStringTablePart, StartCell);
            sMsg = string.Format("Sections Range={0},{1},{2},{3},{4}", _wr.ReportSections["REPORT DATE"].GetSectionRange(), _wr.ReportSections["INPUT"].GetSectionRange(), _wr.ReportSections["OUTPUT"].GetSectionRange(), _wr.ReportSections["DISTRIBUTION"].GetSectionRange(), _wr.ReportSections["DISCREPANCY"].GetSectionRange());
            Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);
            if (_wr.ReportSections == null)
            {
                Dts.Events.FireInformation(1000, "Prepare Waterfall template", "ReportSections is NULL", "", 0, ref bFireAgain);
            }

            //_wr.MoveToLastRow();
            string ReportDate = string.Format("{0}/{1}/{2}",  _ReportingDate.Substring(6, 2), _ReportingDate.Substring(4, 2), _ReportingDate.Substring(0, 4));
            int RowIndex = _wr.GetRowIndex(ReportDate);
            if (RowIndex > 0)
            {
                sMsg = string.Format("found the report date = {0} at row = {1}", ReportDate, RowIndex);
                Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);
                _wr.MoveToRow(RowIndex);
            }
            Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Moved to the last row", "", 0, ref bFireAgain);

            //_wr.MoveToNextRow();

            sMsg = string.Format("{0} : {1}", _wr.GetCell().CellReference.Value, _wr.GetCellValue());
            Dts.Events.FireInformation(1000, "Row start position", sMsg, "", 0, ref bFireAgain);

            //Dts.Events.FireInformation(1000, "Row start position", _wr.GetDataRow().InnerXml, "", 0, ref bFireAgain);

            _wr.VerifyRow();
            //Dts.Events.FireInformation(1000, "Verify Row", _wr.TS1, "", 0, ref bFireAgain);
            //Dts.Events.FireInformation(1000, "Verify Row", _wr.TS2, "", 0, ref bFireAgain);
            //Dts.Events.FireInformation(1000, "Verify Row", _wr.TS3, "", 0, ref bFireAgain);
            _worksheetPart.Worksheet.Save();

            Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Row Verified", "", 0, ref bFireAgain);

            _wr.MoveToSectionFirstCell("INPUT");

            sMsg = string.Format("Set first input cell: {0}", _wr.ReportSections["INPUT"].ColStartIndex);
            Dts.Events.FireInformation(1000, "Prepare Waterfall template", sMsg, "", 0, ref bFireAgain);


            _sInputRange = _wr.GetCell().CellReference.Value;

            /*
            Cell cell = _wr.GetCell();
            if (cell == null) { Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Output start position - no cell", "", 0, ref bFireAgain); }

            int ColNumber = _wr.ReportSections["OUTPUT"].GetColNumber();

            for (int i = 0; i < ColNumber; i++)
                {
                    _wr.CopyFormula();
                    _wr.UpdateCellValue("", "");
                    if (_wr.GetCell().CellValue != null) { _wr.GetCell().CellValue.Remove(); }
                    //sMsg = string.Format("{0} , {1}, {2}, {3}", i, _wr.GetCell().CellReference.Value, _wr.GetReportColIndex(), _wr.GetColumnName(_wr.ColumnIndex()));
                    //Dts.Events.FireInformation(1000, "CopyFormula OUTPUT", sMsg, "", 0, ref bFireAgain);
                    _wr.MoveToNextCell();
                }
                //Dts.Events.FireInformation(1000, "CopyFormula OUTPUT", _wr.TS1, "", 0, ref bFireAgain);
                Dts.Events.FireInformation(1000, "Prepare Waterfall template", "Move to DISCREPANCY", "", 0, ref bFireAgain);
                 /*
                _wr.MoveToSectionFirstCell("DISCREPANCY");
                ColNumber = _wr.ReportSections["DISCREPANCY"].GetColNumber();
                for (int i = 0; i < ColNumber - 1; i++)
                {
                    _wr.CopyFormula();
                    _wr.UpdateCellValue("", "");
                    if (_wr.GetCell() != null &&_wr.GetCell().CellValue != null) { _wr.GetCell().CellValue.Remove(); }
                    sMsg = string.Format("{0} , {1}, {2}", i, _wr.GetReportColIndex(), _wr.GetCellValue());
                    Dts.Events.FireInformation(1000, "CopyFormula DISCREPANCY", sMsg, "", 0, ref bFireAgain);

                    _wr.MoveToNextCell();
                }
            */
            
            PostExecute();
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void PreExecute()
        {
        /*
          Add your code here for preprocessing or remove if not needed
        */
        _ReportingDate = Dts.Variables["DimReportingDateID"].Value.ToString();
        _TrustID = Dts.Variables["TrustID"].Value.ToString();
        _StartCellValue = Dts.Variables["StartCellValue"].Value.ToString();  //"REPORT DATE";
        _sFileName = Dts.Variables["WaterfallTemplateFileName"].Value.ToString();
        _sFilePath = Dts.Variables["WaterfallTemplatePath"].Value.ToString();
        _sSheetName = Dts.Variables["SheetName"].Value.ToString();
        _sFile = _sFilePath + "\\" + _sFileName;

        _spreadsheetDocument = SpreadsheetDocument.Open(_sFile, true);
        _sheet = _spreadsheetDocument.WorkbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == _sSheetName);
        _sheetReferenceId = _sheet.Id;
        if (_sheet == null) throw new Exception(string.Format("Could not find sheet with name {0}", _sSheetName));

        _worksheetPart = (WorksheetPart)_spreadsheetDocument.WorkbookPart.GetPartById(_sheetReferenceId);
        _sheetData = _worksheetPart.Worksheet.GetFirstChild<SheetData>();
        _sharedStringTablePart = _spreadsheetDocument.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
        }

    public void PostExecute()
    {
        Dts.Variables["_InputRange"].Value = _sInputRange;
        _worksheetPart.Worksheet.Save();
        _sharedStringTablePart = null;
        _sheetData = null;
        _worksheetPart = null;
        _sheet = null;
        _spreadsheetDocument.Close();
        _spreadsheetDocument.Dispose();
        _spreadsheetDocument = null;
        _wr = null;
    }

  }

    public class WaterfallReport
    {
        private SheetData _sheetData;
        private SharedStringTablePart _sharedStringTablePart;
        private Dictionary<string, WaterfallReportSection> _ReportSections = new Dictionary<string, WaterfallReportSection>();
        //private Row _rColumnName;
        private Row _rData;
        private Row _rRowType;
        private int _CurrentColIndex;
        private Row _rVariableName;
        private Row _rFirstDataRow;
        private string _TS1 = "";
        private string _TS2 = "";
        private string _TS3 = "";

        public WaterfallReport(SheetData sd, SharedStringTablePart sst, Cell start)
        {
            _sheetData = sd;
            _sharedStringTablePart = sst;
            int RowTypeIndex = ExcelNavigator.GetRowIndex(start.CellReference) - 1;
            int RowVariableName = RowTypeIndex - 5;

            _rRowType = ExcelNavigator.GetRow(_sheetData, RowTypeIndex);
            /*
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            //_ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            //_ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));
            */
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            _ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            //_ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));

            _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + 1);
            _rFirstDataRow = _rData;
            _rVariableName = ExcelNavigator.GetRow(_sheetData, RowVariableName);
        }

        public Dictionary<string, WaterfallReportSection> ReportSections
        {
            get { return this._ReportSections; }
        }
        public string TS1 { get { return _TS1; } }
        public string TS2 { get { return _TS2; } }
        public string TS3 { get { return _TS3; } }

        private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
        {
            int ColStart = 0;
            int ColEnd = 0;
            string CellStartName = "";
            string CellEndName = "";
            Cell cell;
            string sLastCellValue = "";
            string sLastCellName = "";
            string sCellValue = "";
            string sCellName = "";

            WaterfallReportSection wrs = null;
            Dictionary<string, string> cnl = new Dictionary<string, string>();

            int ColCount = row.Descendants<Cell>().Count<Cell>();
            for (int i = StartIndex; i <= ColCount - 1; i++)
            {
                cell = row.Descendants<Cell>().ElementAt(i);
                sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToString().ToUpper();
                sCellName = cell.CellReference.ToString();
                if (sCellValue == SectionName)
                {
                    cnl.Add(i.ToString(), ExcelNavigator.GetColumnName(sCellName));
                }
                if (sCellValue != sLastCellValue && sCellValue == SectionName.ToUpper())
                {
                    CellStartName = sCellName;
                    ColStart = i;
                }
                if (sCellValue != sLastCellValue && sLastCellValue == SectionName.ToUpper())
                {
                    CellEndName = sLastCellName;
                    ColEnd = i - 1;
                    break;
                }
                if (i == ColCount - 1)
                {
                    CellEndName = sCellName;
                    ColEnd = i;
                }

                sLastCellValue = sCellValue;
                sLastCellName = cell.CellReference.ToString();
            }
            if (CellStartName != "" && CellEndName != "")
            {
                wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName, cnl);
            }
            return wrs;
        }

        public bool MoveToNextRow()
        {
            _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value));
            return true;
        }

        public bool MoveToPrevRow()
        {
            bool ret = false;
            if (_rData.RowIndex - 2 > _rRowType.RowIndex)
            {
                _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value - 2));
                ret = true;
            }
            return ret;
        }

        public bool MoveToNextCell()
        {
            bool ret = false;
            if (_CurrentColIndex + 1 <= _ReportSections["DISCREPANCY"].ColEndIndex)
            {
                _CurrentColIndex++;
                ret = true;
            }
            return ret;
        }

        public bool MoveToPrevCell()
        {
            bool ret = false;
            if (_CurrentColIndex - 1 <= _ReportSections["REPORT DATE"].ColStartIndex)
            {
                _CurrentColIndex--;
                ret = true;
            }
            return ret;
        }

        public bool MoveToSectionFirstCell(string sSectionName)
        {
            _CurrentColIndex = _ReportSections[sSectionName].ColStartIndex;
            return true;
        }

        public bool MoveToLastRow()
        {
            string sCellsList;
            string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
            Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
            if (cells != null && cells.Count > 0)
            {
                Cell LastFilledCell = cells.Last<KeyValuePair<string, Cell>>().Value;
                int FirstEmptyRowIndex = ExcelNavigator.GetRowIndex(LastFilledCell.CellReference) - 1;
                _rData = ExcelNavigator.GetRow(_sheetData, FirstEmptyRowIndex);
            }
            return true;
        }

        public bool MoveToRow(int RowIndex)
        {
            try
            {
                int RowTypeIndex = (int)(_rRowType.RowIndex.Value);
                _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + RowIndex);
                return true;
            }
            catch { return false; }
        }

        public int GetRowIndex(string ReportDate)
        {
            string sCellsList;
            string value;
            int RowIndex = 0;

            value = DateTime.Parse(ReportDate).ToOADate().ToString();
            string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
            Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
            if (cells != null && cells.Count > 0)
            {
                KeyValuePair<string, Cell>[] acells = cells.ToArray<KeyValuePair<string, Cell>>();

                for (int i = 0; i < acells.Length; i++)
                {
                    KeyValuePair<string, Cell> cell = acells[i];
                    if (cell.Value.CellValue.InnerText == value)
                    {
                        RowIndex = i + 1;
                        break;
                    }
                }
            }
            return RowIndex;
        }


        public string GetCellValue()
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                string sTypeCellName = ExcelNavigator.GetColumnName(cell.CellReference.Value) + (_rRowType.RowIndex - 4).ToString();
                Cell DataTypeCell = ExcelNavigator.GetCellByName(_sheetData, sTypeCellName);
                string DataType = ExcelReader.GetCellValue(DataTypeCell, _sharedStringTablePart);
                string value = ExcelReader.GetCellValue(cell, _sharedStringTablePart);
                if (DataType == "Date" || DataType == "Data Type")
                {
                    double dbDate;
                    if (double.TryParse(value, out dbDate))
                    {
                        value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                    }

                }
                return value;
            }
            catch { return null; }
        }

        public string GetCellValue(string CellReference)
        {
            try
            {
                string sTypeCellName = ExcelNavigator.GetColumnName(CellReference) + (_rRowType.RowIndex - 4).ToString();
                Cell DataTypeCell = ExcelNavigator.GetCellByName(_sheetData, sTypeCellName);
                string DataType = ExcelReader.GetCellValue(DataTypeCell, _sharedStringTablePart);

                Cell cell = ExcelNavigator.GetCellByName(_sheetData, CellReference);
                string value = ExcelReader.GetCellValue(cell, _sharedStringTablePart);

                if (DataType == "Date" || DataType == "Data Type")
                {
                    double dbDate;
                    if (double.TryParse(value, out dbDate))
                    {
                        value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                    }

                }
                return value;
            }
            catch { return null; }
        }

        public string GetValueType()
        {
            Cell cell = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex);
            return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        }

        public bool UpdateCellValue(string sValue, string sDataType)
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
            
        }

        public bool CopyFormula()
        {
            StringBuilder sb1 = new StringBuilder();

            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    sb1.Append(cell.CellReference.Value).Append(":").Append(FromCell.CellReference.Value).Append("=");
                    if (FromCell.CellFormula != null)
                    {
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        string sFormulaRef = FromCell.CellFormula.Reference.Value;
                        string sFormulaText = FromCell.CellFormula.Text;
                        CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                        cell.Append(cf);
                        sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                    }
                    //cell.CellValue.Remove();
                }
                _TS1 = _TS1 + sb1.ToString();
                sb1 = null;
                return true;
            }
            catch { return false; }

        }

        public bool CopyFormula(string CellReference)
        {
            StringBuilder sb1 = new StringBuilder();

            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = this.GetCell(CellReference);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {

                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    string ColName = ExcelNavigator.GetColumnName(CellReference);
                    string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                    Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                    string FromCellRef = "";
                    if (FromCell == null) { FromCellRef = "null"; } else { FromCellRef = FromCell.CellReference.Value; }
                    string sOldFormulaType = "";
                    string sNewFormulaType = "";
                    if (FromCell.CellFormula != null)
                    {
                        sb1.Append("1");
                        CellFormula cf;
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        sb1.Append("1a");
                        string sFormulaRef = "";
                        if (FromCell.CellFormula.Reference != null)
                        { sFormulaRef = FromCell.CellFormula.Reference.Value; }
                        sb1.Append("1b");
                        string sFormulaText = "";
                        if (!string.IsNullOrEmpty(FromCell.CellFormula.Text))
                        { sFormulaText = FromCell.CellFormula.Text; }
                        //FromCell.CellFormula.SharedIndex
                        //CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        sb1.Append("2");
                        sOldFormulaType = "";
                        if (FromCell.CellFormula.FormulaType != null)
                        { sOldFormulaType = FromCell.CellFormula.FormulaType.Value.ToString(); }
                        sNewFormulaType = "";
                        sb1.Append("3");
                        if (FromCell.CellFormula.FormulaType.Value == CellFormulaValues.Shared)
                        {
                            sb1.Append("4");
                            sNewFormulaType = sOldFormulaType;
                            //cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                            cf = new CellFormula() { FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                            // update formula reference in the first row
                            Cell FirstCell = ExcelNavigator.GetCellByName(_sheetData, ColName + _rFirstDataRow.RowIndex.Value.ToString());
                            sb1.Append("5");
                            if (!string.IsNullOrEmpty(FirstCell.CellFormula.Reference.Value))
                            {
                                string sFirstCellFormulaRef = FirstCell.CellFormula.Reference.Value;
                                FirstCell.CellFormula.Reference.Value = sFirstCellFormulaRef.Replace(sOldRowIndex, sNewRowIndex);
                            }
                        }
                        else
                        {
                            sb1.Append("6");
                            cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType };
                            cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                        }
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        sb1.Append("7");
                        cell.Append(cf);
                        //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                    }
                    else
                    {
                        sb1.Append("8");
                        sb1.Append(FromCellRef).Append(" = ").Append("no formula");
                    }
                    //cell.CellValue.Remove();
                    //sb1.Append(cell.CellReference.Value).Append(",").Append(sNewFormulaType).Append(" = ").Append(FromCellRef).Append(",").Append(sOldFormulaType).Append(";");
                    sb1.Append(cell.CellReference.Value).Append(" = ").Append(FromCellRef).Append(";");
                }
                _TS1 = _TS1 + sb1.ToString();
                sb1 = null;
                return true;
            }
            catch { _TS1 = _TS1 + sb1.ToString(); return false; }

        }

        public bool IsSectionLastColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColEndIndex)
            { ret = true; }
            return ret;
        }

        public bool IsSectionFirstColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColStartIndex)
            { ret = true; }
            return ret;
        }

        public Cell GetCell()
        {
            return _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        }

        public Cell GetCell(string CellReference)
        {
            try
            {
                return (Cell)_rData.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, CellReference, true) == 0).First();
                //sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
            }
            catch { return null; }
        }

        public int ColumnIndex()
        {
            return _CurrentColIndex;
        }

        public Row GetDataRow()
        {
            return _rData;
        }

        public Row GetTypeRow()
        {
            return _rRowType;
        }

        public int GetReportColIndex()
        {
            int ColIndex = 0;

            if (this._CurrentColIndex >= this._ReportSections["INPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["INPUT"].ColEndIndex)
            {
                ColIndex = this._CurrentColIndex - this._ReportSections["INPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["OUTPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["OUTPUT"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["OUTPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISTRIBUTION"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISTRIBUTION"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISTRIBUTION"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISCREPANCY"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISCREPANCY"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber() + this._ReportSections["DISTRIBUTION"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISCREPANCY"].ColStartIndex + 1;
            }

            return ColIndex;
        }

        public bool VerifyRow()
        {
            string CellRef = "";
            string LastCellRef = "";
            Cell LastCell = null;
            StringBuilder sb1 = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            StringBuilder sb3 = new StringBuilder();

            foreach (KeyValuePair<string, WaterfallReportSection> rs in _ReportSections.OrderBy(w => w.Value.ColStartIndex))
            {
                foreach (KeyValuePair<string, string> cn in rs.Value.ColNameList.OrderBy(t => int.Parse(t.Key)))
                {
                    CellRef = cn.Value + _rData.RowIndex.ToString();
                    if (LastCell == null) { LastCellRef = ""; }
                    else { LastCellRef = LastCell.CellReference.Value; }
                    sb1.Append(rs.Key).Append(":").Append(CellRef).Append(":").Append(LastCellRef).Append(";");                    
                    try
                    {
                        Cell e = _rData.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, CellRef, true) == 0).FirstOrDefault<Cell>();
                        if (e == null)
                        {
                            e = new Cell() { CellReference = CellRef };
                            //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                            if (LastCell == null){ _rData.InsertAfterSelf<Cell>(e);}
                            else{_rData.InsertAfter<Cell>(e, LastCell);}

                        }
                        LastCell = e;
                        sb2.Append(e.CellReference.Value).Append(";");
                    }
                    catch
                    {
                        Cell e = new Cell() { CellReference = CellRef };
                        //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                        _rData.InsertAfter<Cell>(e, LastCell);
                        LastCell = e;
                        sb3.Append(e.CellReference.Value).Append(";");
                    }

                }
            }
            _TS1 = sb1.ToString();
            _TS2 = sb2.ToString();
            _TS3 = sb3.ToString();
            sb1 = null;
            sb2 = null;
            sb3 = null;
            return true;
        }

        public string GetColumnName(int ColIndex)
        {
            string CellRef = "";

            CellRef = _rRowType.Descendants<Cell>().ElementAt(ColIndex).CellReference.Value;
            return ExcelNavigator.GetColumnName(CellRef);
        }

    }

    public class WaterfallReportSection
    {
        private string _SectionName;
        private int _ColStartIndex;
        private string _CellStartName;
        private int _ColEndIndex;
        private string _CellEndName;
        //private int _FieldsCount;
        private Dictionary<string, string> _ColNameList;

        public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName, Dictionary<string, string> ColNameList)
        {
            // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
            this._SectionName = sName;
            this._ColStartIndex = ColStart;
            this._CellStartName = CellStartName;
            this._ColEndIndex = ColEnd;
            this._CellEndName = CellEndName;
            this._ColNameList = ColNameList;
        }

        public string SectionName
        {
            get { return this._SectionName; }
            set { this._SectionName = value; }
        }
        public string CellStartName
        {
            get { return this._CellStartName; }
            set { this._CellStartName = value; }
        }
        public string CellEndName
        {
            get { return this._CellEndName; }
            set { this._CellEndName = value; }
        }
        public int ColStartIndex
        {
            get { return this._ColStartIndex; }
            set { this._ColStartIndex = value; }
        }
        public int ColEndIndex
        {
            get { return this._ColEndIndex; }
            set { this._ColEndIndex = value; }
        }
        public  Dictionary<string, string> ColNameList
        {
            get { return this._ColNameList; }
            //set { this._ColNameList = value; }
        }
        public string GetSectionRange()
        {
            return this._CellStartName + ":" + this._CellEndName;
        }
        public int GetColNumber()
        {
            return this._ColEndIndex - this._ColStartIndex + 1;
        }
    }

    public static class ExcelNavigator
    {
        public static string GetColumnName(string sCellName)
        {
            Regex regex = new Regex("[A-Za-z]+");
            Match match = regex.Match(sCellName);

            return match.Value;
        }

        public static int GetRowIndex(string sCellName)
        {
            Regex regex = new Regex(@"\d+");
            Match match = regex.Match(sCellName);

            return int.Parse(match.Value);
        }

        public static Row GetRow(SheetData sd, int RowIndex)
        {
            return sd.Descendants<Row>().ElementAt(RowIndex);

        }

        private static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }

        public static Cell GetCellByName(SheetData sd, string cellName)
        {
            return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
        }

        public static Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
        {
            return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
        }

        public static string GetNextInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) + 1).ToString();
        }

        public static string GetPrevInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) - 1).ToString();
        }

        public static string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
        {
            StringBuilder sb = new StringBuilder();
            Cell cell;

            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
            cell = null;
            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

            return sb.ToString();
        }

        public static Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
        {
            string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
            StringBuilder sb = new StringBuilder();
            int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
            Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


            IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                            .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
            if (cells != null)
            {
                if (cells.Count<Cell>() > 0)
                {
                    foreach (Cell c in cells)
                    {
                        if (c.CellValue != null)
                        {
                            FilledCells.Add(c.CellReference, c);
                            sb.Append(c.CellReference.Value).Append(";");
                        }
                    }
                }
            }
            CellList = sb.ToString();
            return FilledCells;
        }

        public static string GetCellRangeNames(IEnumerable<Cell> cells)
        {
            StringBuilder sb = new StringBuilder();

            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                        sb.Append(c.CellReference.Value).Append(";");
                }
            }
            return sb.ToString();
        }
    }

    public static class ExcelWriter
    {
        public static bool UpdateCellValue(SharedStringTablePart sstp, Cell cell, string sValue, string sDataType)
        {
            string val;
            switch (sDataType)
            {
                case "Double":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "int":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Currency":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Date":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Boolean":
                    if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
                    if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
                    {
                        cell.CellValue = new CellValue(val);
                    }
                    else
                    {
                        cell.DataType = CellValues.Boolean;
                        cell.CellValue = new CellValue(val);

                    }
                    break;
                case "string":
                    cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                    cell.CellValue = new CellValue(InsertSharedStringItem(sstp, sValue).ToString());
                    break;
            }

            return true;
        }

        public static int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
        {
            int i = 0;
            if (sstp != null)
            {
                foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
                {
                    if (item.InnerText == sValue) { return i; }
                    i++;
                }

            }
            sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
            sstp.SharedStringTable.Save();

            return i;
        }

        public static bool CopyCellStyle(Cell FromCell, Cell ToCell)
        {
            bool ret = true;
            OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
            if (FromAttr != null)
            {
                ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
            }

            return ret;
        }

        public static bool CopyCellFormula(Cell FromCell, Cell ToCell)
        {
            bool ret = true;
            ToCell.CellFormula = FromCell.CellFormula;

            return ret;
        }
    }

    public static class ExcelReader
    {
        public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }


    }
}]]></ProjectItem><ProjectItem Name="\st_a7b701b3746943d2bcc4744e85a99b00.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_a7b701b3746943d2bcc4744e85a99b00.csproj</RootNamespace>
    <AssemblyName>ST_a7b701b3746943d2bcc4744e85a99b00.csproj</AssemblyName>
    <ProjectGuid>{1E4D6A11-DE46-45E9-A203-9A77B079EB84}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.0.5022.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase">
      <RequiredTargetFramework>3.0</RequiredTargetFramework>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptTask</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Settings.get_Default():ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Sett" +
    "ings")]

namespace ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a7b701b3746943d2bcc4744e85a99b00.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_a7b701b3746943d2bcc4744e85a99b00.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a7b701b3746943d2bcc4744e85a99b00.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><BinaryItem Name="\bin\release\st_a7b701b3746943d2bcc4744e85a99b00.csproj.dll">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
csMEAHByAQAAcBIBKJMAAApvIwAACnOUAAAKb5UAAAoGKgAAEzACABAAAAAEAAARFwoDAm9TAAAK
b5YAAAoGKhMwAgBIAAAAEQAAERQKAm9KAAAKCgJvfQAACiw1Am99AAAKb34AAAosKAJvfQAACm9/
AAAKGTMaAywXA2+AAAAKBihqAAAKKBQAACtvSgAACgoGKh4CKDYAAAoqEzADAC0AAAAbAAARficA
AAQtIHLHBABw0AkAAAIomAAACm+ZAAAKc5oAAAoKBoAnAAAEficAAAQqGn4oAAAEKh4CgCgAAAQq
Gn4pAAAEKi5zSgAABoApAAAEKh4CKJwAAAoqALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291
cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1u
ZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMu
UnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAA
djIuMC41MDcyNwAAAAAFAGwAAACQEQAAI34AAPwRAAAoFAAAI1N0cmluZ3MAAAAAJCYAAEgFAAAj
VVMAbCsAABAAAAAjR1VJRAAAAHwrAADQBwAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPoBMwAW
AAABAAAATwAAABAAAAAyAAAAWAAAAEkAAACcAAAAAgAAABsAAAAbAAAABAAAAA0AAAATAAAAFgAA
AAEAAAAHAAAAAQAAAAcAAAAYAAAAAAAKAAEAAAAAAAYAXAEzAQoAiAGBAQoAjQGBAQ4AqQGUARIA
JQIEAhIAcQJOAhIAfgIEAhIAmwJOAhIAsAIEAhIA3QLtAQoAhgNrAxIAowNOAhIA9gNOAgoAagdr
AwoA0Ae/BwoAAQjsBwoAYQlCCQoAmwmJCQoAsgmJCQoAzwmJCQoA7gmJCQoABwqJCQoAIAqJCQoA
OwqJCQoAVgqJCQoAbwqJCQoAqAqICgoAyAqIChYA8wrmCgoAAguBAQYAEAszAQYAKgszAQoAbAuB
ARIAcgtOAhIAlwtOAhIArwvtAQoA7QuIChoAaAxIDBoAgAxIDBIAngwEAhIAvAxOAhIA0gztAR4A
+QyBAR4ADA0ADQoALQ2BARIANw0EAhIATA0EAhIAiw0EAhIA0g3tARIA6w3tAQoADw5rAwoAHg6B
AQoANg6BARIAFglOAgoAYQ6BAQoAkQ6FDhIApg5OAhIA0A7tARIABg/tARIAEg9OAh4AVxAADQoA
dBBrAwoA3RDKEAoA8hCBAQ4AHRH+EA4AIxH+EA4AKRH+EBIAMRFOAhIASRHtARIAaBFOAhIAxRJO
AhIA1hJOAhIA5xLtAQoANRMiEwoAUhOBAQoAVxOBAQoAexOJCQ4ApxOREw4AwBOREwAAAAABAAAA
AAABAAEAAQAQADkARAAFAAEAAQADAQAAbwAAAAkAEAAGAAEAEAB9AEQADQATAAYAAQAQAI0ARAAN
ACAAJgCBARAApABEAA0AJgA0AIEBEACzAEQADQAnAEAAgQEQAL8ARAANACcARAAAABAAywDVAA0A
JwBFAAABEAALAdUAEQApAEkAAwEQAHsPAAANACoATAADARAAsg8AAA0AKwBOAAMBEACQEQAADQAs
AFAAAwEQALcRAAANAC0AUgADARAA4xEAAA0ALwBUAAMBEAAmEgAADQAxAFcAAQDBARMAAQDQARMA
AQDbARMAAQDmARMAAQA5Ah8AAQB3AiMAAQCMAicAAQClAisAAQDGAi8AAQDpAjMAAQD7AhMAAQAH
AxMAAQAXAxMAAQAgAzcAAQAkAxMABgZTAz8AVoBbA0IAVoBjA0IAAQClAisAAQDGAi8AAQCTA1AA
AQCnA1kAAQCuA1kAAQC4Az8AAQDJA1kAAQDYA1kAAQDnAxMAAQDsAxMAAQDxAxMAEQDvD+MEEQAo
EP4EAQB6BRMAAQCHBT8AAQCWBRMAAQClBT8AAQCyBRMAAQC/BcMAEQDvD1kGEQDgB2IBEQANCGYB
EQBRCIQBBgCyCBMABgDFDxMABgANCRMABgAICS8ABgAWCRMABgAICS8ABgAgCRMABgA5EhMABgBO
Ej8AUCAAAAAAhgAxAzsAAQC4IwAAAACGADYDOwABAIQlAAAAAIYAQQM7AAEAASYAAAAAhhhNAzsA
AQCgIwAAAACBANoLKQIBAAwmAAAAAIYYTQNdAAIA7icAAAAAhgj7A2cABQD2JwAAAACGCA4EcQAF
AP4nAAAAAIYIFgRxAAUABigAAAAAhggeBHEABQAQKAAAAACBACYEdQAFAFwpAAAAAIYANwR+AAgA
gCkAAAAAhgBFBH4ACADcKQAAAACGAFMEfgAIABwqAAAAAIYAYgR+AAgAWyoAAAAAhgBxBIIACAB4
KgAAAACGAIgEfgAJAPQqAAAAAIYAlgSHAAkAQCsAAAAAhgCgBIwACgDwKwAAAACGAKwEcQALANAs
AAAAAIYArASRAAsAnC0AAAAAhgC5BHEADADMLQAAAACGAMYElgAMAHQuAAAAAIYA1gR+AA4AcDAA
AAAAhgDWBIIADgAkNAAAAACGAOIEggAPAFA0AAAAAIYA9gSCABAAezQAAAAAhgALBZwAEQC4NAAA
AACGAAsFoQARABQ1AAAAAIYAEwWnABIAHDUAAAAAhgAfBasAEgAkNQAAAACGACoFqwASACw1AAAA
AIYANQWnABIAcDcAAAAAhgBHBX4AEgA4OgAAAACGAFEFsAASADU3AAAAAJEA3Q/XBBMAQzcAAAAA
kQAWEPMEFABtOgAAAACGGE0DywAVAKI6AAAAAIYIzAVxABsAqjoAAAAAhgjcBdoAGwCzOgAAAACG
COwFcQAcALs6AAAAAIYI/gXaABwAxDoAAAAAhggQBnEAHQDMOgAAAACGCCAG2gAdANU6AAAAAIYI
MAanAB4A3ToAAAAAhghCBt8AHgDmOgAAAACGCFQGpwAfAO46AAAAAIYIZAbfAB8A9zoAAAAAhgh0
BuQAIAD/OgAAAACGAIQGcQAgABc7AAAAAIYAlAanACAAKDsAAAAAlgBRBfoAIABQOwAAAACWAKAE
/wAhAHs7AAAAAJYA7QYEASIAjDsAAAAAkQCsBAwBJAAEPAAAAACWAPQGFAEmAFw8AAAAAJYAAgcc
ASgAnDwAAAAAlgAVB/oAKwDEPAAAAACWACoH+gAsACg9AAAAAJYAPwcmAS0AOD4AAAAAlgBRBzAB
MQA0PwAAAACWAHgHPwE0ACM+AAAAAJEAgBJTBjUAsD8AAAAAlgDGBEkBNgDkQAAAAACWAIoHUwE6
AIBBAAAAAJYAoQdaATwAxEEAAAAAlgCvB1oBPgDgQQAAAACWAKwEDAFAADRCAAAAAIMYTQM7AEIA
PEIAAAAAkwgdCGoBQgB1QgAAAACTCDEIbwFCAHxCAAAAAJMIPQh0AUIAhEIAAAAAlghhCIgBQwCX
QgAAAACGGE0DOwBDAItCAAAAAJEY1RNUB0MAkzQAAAAAhhhNAzsAQwCbNAAAAACGAI4PlgRDAC03
AAAAAIYYTQM7AEQAUTcAAAAAhgDND5YERADgOwAAAACGGE0DOwBFAOg7AAAAAIYAoxGWBEUAOjwA
AAAAhhhNAzsARgBCPAAAAACGAMoRlgRGAOw8AAAAAIYYTQM7AEcA9DwAAAAAhgD2EZYERwANPQAA
AACGAA4SlgRIAOE9AAAAAIYYTQM7AEkA6T0AAAAAhgBhEpYESQAAAAEA6wsAAAEAdQgAAAIAeAgA
AAMAfAgAAAEAgggAAAIAoQYAAAMAjQgAAAEAkQgAAAEAnggAAAEApwgAAAEAsggAAAEAwAgAAAIA
xwgAAAEAsggAAAEAkQgAAAEAkQgAAAEAsggAAAEA0QgAAAEA7Q8AAAEAJhAAAAEA2ggAAAIA4AgA
AAMArQYAAAQA6QgAAAUAuwYAAAYA4QYAAAEA8AgAAAEA8AgAAAEA8AgAAAEA8AgAAAEA8AgAAAEA
9ggAAAEA9ggAAAEAdQgAAAIAnggAAAEAAAkAAAIACAkAAAEAdQgAAAIADQkAAAEAdQgAAAIACAkA
AAMAFgkAAAEA9ggAAAEA9ggAAAEAdQgAAAIACAkAAAMAIAkAAAQAnggAAAEAdQgAAAIAKwkCAAMA
OQkAAAEAbgkAAAEAnxIAAAEACAkAAAIAdAkAAAMAwAgAAAQAxwgAAAEACAkAAAIAwAgAAAEAeQkA
AAIAggkAAAEAeQkAAAIAggkAAAEAAAkAAAIACAkAAAEA8AgAAAEAnA8AAAEAnA8AAAEAnA8AAAEA
nA8AAAEAnA8AAAEAnA8AAAEAnA+JAE0DOwCRAE0D2gCZAE0D2gChAE0D2gCpAE0D2gCxAE0D2gC5
AE0D2gDBAE0D2gDJAE0D2gDRAE0D2gDZAE0D3wDhAE0DOwDpAE0D2gDxAAkLzAEJACIL0gH5AD4L
1wEBAUkL3QEMAFkL8AHxAAkL9wHxAGIL/gHxAAkLBALxAAkLDAIRAXsLEwJRAI0LcQA5AKELGAIh
AcYLOwD5AMsL3wApAU0DOwAxAAgMEwJRABEMLwLxAB0MNQL5AHIMOwIxAVkLQQI5AY0LSAIZAIkM
cQDxAJIMTAIpAJkMUwIpAKsMWgJBAcUMYAJRAeEMZgIUAE0DfgJhARcNhAIxACYNEwJpAU0D2gBx
AVgNmAJRAWQNnwJxAXINZgJhARcNrwI5AYENuwKBAZoNOwCBAaANOwAJAE0DOwAMAE0DOwAZAE0D
OwAMAKgNwAIcAE0DOwBhAawN2QJhAbIN5ALxALwNcQAJAYkMcQAcAKgNwALxAMQNNQJhAN4NCAMk
AI0LFQOJAREMGgMsAAAOpwBhAQoOrwI0AI0LQQOhAScOYgOhAS0OaQOpAYkMcQBhAT0ObQMRAUUO
egNRAVMOcQC5AYkMcQDxAJIMpAOpAWgOqgOhAXEOsQOhAXwOuAOhAYkMkQDBAU0DOwDBAZ8O8wMR
AbIO+gPJAcIOEwLRAecOcQDJAU0DOwDxAPAOAARRABEMBgTJAfgODAQ8ABEMGwTJASQPJwTRATQP
2gBRAZ8OMwTxAD0PWATJAUsPXQQ8AI0LFQPJAVsPCAPJAWsPaARRAIEN2gDxAJ4PnAREAE0DfgJh
AaYPrARhAawPrwJMAI0LQQNUAE8QFQMJAScO/wBcAE0DfgJhAWwQLQVkAIIQYAVsAJAQFQN0AE0D
fgJ8AIIQYAWEAJAQFQNUAI0LQQNMAE8QFQNpAE0DOwARAZwQDARRAa4QqgVRAb4QsgX5AekQfgAB
AqANOwAJAk0D2gAJAiMRCgYZAo0LcQARATwRHwYpAlsRfgCMAI0LFQNJAHoRMwYsAE0DOwCUAE0D
fgKcAIIQYAWkAJAQFQMsAKgNwAKxAU0D2gARAaESrgaMABEMtQaMABEMGwQRAa8SwQaMAE0DzQZR
AbwSZgKsAIIQYAW0AJAQFQNBAk0D2gA5Ak0DMwRRAdsSqgVRAfgSBAdJAo0LcQBJAk0DDAdRAQUT
EwcRARITIQdRAk0DOwBZAmkTKAdZAoQTMQd5AE0DNwdxAk0DRAchAE0DOwAIAEQARgAIAEgASwAu
AFsApQcuABMAWAcuABsAiAcuADsAjgcuAGMArgcuAEMAiAcuACMAiAcuACsAiAcuADMAWAdDAGsA
kgGgAOMASwAjAbsESwBjAeMASwBpAdsESweDAeMASwCJAdsESwejAeMASwDDAeMASwDjAeMASwAD
AuMASwDBA+MASwDhA+MASwCABOMASwCgBOMASwDBBOMASwAhBeMASwDgB+MASwAeAsgC8QIhA0YD
XQOAA74D0QPkA+kDOwRvBMQE0wS9BQYGEQY/BkQGSQaBBp8G0wbwBhoHPwcEAAEABQAFAAkACwAK
AA0AAABfBbUAAABuBb8AAAByBb8AAAB2Bb8AAAChBr8AAACtBr8AAAC7Br8AAADHBu0AAADVBu0A
AADhBvEAAADQB3oBAABJCH8BAABtCI0BAgAHAAMAAgAIAAUAAgAJAAcAAgAKAAkAAgAnAAsAAQAo
AAsAAgApAA0AAQAqAA0AAQAsAA8AAgArAA8AAgAtABEAAQAuABEAAQAwABMAAgAvABMAAgAxABUA
AgBGABcAAgBHABkAAQBIABkAAgBJABsA6AF1As0CDgMlAzgDEgSjBA0FFgUeBVMFagV4BZEFnQUq
BmMGcgZ5Bt8G5wYEgAAAAQAAAHUVgYYAAAAAAABEAAAACgAAAAAAAAAAAAAAAQAUAQAAAAACAAAA
AAAAAAAAAAAKAHgBAAAAAAIAAAAAAAAAAAAAAAoAgQEAAAAAAgAAAJ4TAAAAAAAAFgDtAQAAAAAD
AAUAAAAAAAAAAAAKAOYKAAAAAAoAAAAAAAAAAAAAAAEAKQwAAAAAAwAFAAAAAAAAAAAACgDtDAAA
AAAAAAAAAQAAANwTAAADAAIACwAEAAwABAANAAYADgAGAA8ABgAQAAYAUQBwAlUAcAJdAKUCXwCq
AmEAqgJRANQCcwDUAnUA1AKHAC0DkQAtA80A1ALPANQC2QBHBdkAhgVhANQC7QDUAu8A1AJRABoG
dQAaBnUAOQaHANQC2QBsBhkB2QYjAdkGAAAAAAA8TW9kdWxlPgBTVF9hN2I3MDFiMzc0Njk0M2Qy
YmNjNDc0NGU4NWE5OWIwMC5jc3Byb2ouZGxsAFNjcmlwdE1haW4AU1RfYTdiNzAxYjM3NDY5NDNk
MmJjYzQ3NDRlODVhOTliMDAuY3Nwcm9qAFNjcmlwdFJlc3VsdHMAV2F0ZXJmYWxsUmVwb3J0AFdh
dGVyZmFsbFJlcG9ydFNlY3Rpb24ARXhjZWxOYXZpZ2F0b3IARXhjZWxXcml0ZXIARXhjZWxSZWFk
ZXIAUmVzb3VyY2VzAFNUX2E3YjcwMWIzNzQ2OTQzZDJiY2M0NzQ0ZTg1YTk5YjAwLmNzcHJvai5Q
cm9wZXJ0aWVzAFNldHRpbmdzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVs
QmFzZQBtc2NvcmxpYgBTeXN0ZW0ARW51bQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UAX1JlcG9ydGluZ0RhdGUAX3NGaWxlTmFtZQBfc0ZpbGVQYXRo
AF9zRmlsZQBEb2N1bWVudEZvcm1hdC5PcGVuWG1sAERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwuUGFj
a2FnaW5nAFNwcmVhZHNoZWV0RG9jdW1lbnQAX3NwcmVhZHNoZWV0RG9jdW1lbnQARG9jdW1lbnRG
b3JtYXQuT3BlblhtbC5TcHJlYWRzaGVldABTaGVldABfc2hlZXQAV29ya3NoZWV0UGFydABfd29y
a3NoZWV0UGFydABTaGVldERhdGEAX3NoZWV0RGF0YQBTaGFyZWRTdHJpbmdUYWJsZVBhcnQAX3No
YXJlZFN0cmluZ1RhYmxlUGFydABTdHJpbmdWYWx1ZQBfc2hlZXRSZWZlcmVuY2VJZABfc1NoZWV0
TmFtZQBfU3RhcnRDZWxsVmFsdWUAX1RydXN0SUQAX3dyAF9zSW5wdXRSYW5nZQBNYWluAFByZUV4
ZWN1dGUAUG9zdEV4ZWN1dGUALmN0b3IAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAU3lzdGVtLkNv
bGxlY3Rpb25zLkdlbmVyaWMARGljdGlvbmFyeWAyAF9SZXBvcnRTZWN0aW9ucwBSb3cAX3JEYXRh
AF9yUm93VHlwZQBfQ3VycmVudENvbEluZGV4AF9yVmFyaWFibGVOYW1lAF9yRmlyc3REYXRhUm93
AF9UUzEAX1RTMgBfVFMzAENlbGwAZ2V0X1JlcG9ydFNlY3Rpb25zAGdldF9UUzEAZ2V0X1RTMgBn
ZXRfVFMzAEdldFJlcG9ydFNlY3Rpb24ATW92ZVRvTmV4dFJvdwBNb3ZlVG9QcmV2Um93AE1vdmVU
b05leHRDZWxsAE1vdmVUb1ByZXZDZWxsAE1vdmVUb1NlY3Rpb25GaXJzdENlbGwATW92ZVRvTGFz
dFJvdwBNb3ZlVG9Sb3cAR2V0Um93SW5kZXgAR2V0Q2VsbFZhbHVlAEdldFZhbHVlVHlwZQBVcGRh
dGVDZWxsVmFsdWUAQ29weUZvcm11bGEASXNTZWN0aW9uTGFzdENvbHVtbgBJc1NlY3Rpb25GaXJz
dENvbHVtbgBHZXRDZWxsAENvbHVtbkluZGV4AEdldERhdGFSb3cAR2V0VHlwZVJvdwBHZXRSZXBv
cnRDb2xJbmRleABWZXJpZnlSb3cAR2V0Q29sdW1uTmFtZQBSZXBvcnRTZWN0aW9ucwBUUzEAVFMy
AFRTMwBfU2VjdGlvbk5hbWUAX0NvbFN0YXJ0SW5kZXgAX0NlbGxTdGFydE5hbWUAX0NvbEVuZElu
ZGV4AF9DZWxsRW5kTmFtZQBfQ29sTmFtZUxpc3QAZ2V0X1NlY3Rpb25OYW1lAHNldF9TZWN0aW9u
TmFtZQBnZXRfQ2VsbFN0YXJ0TmFtZQBzZXRfQ2VsbFN0YXJ0TmFtZQBnZXRfQ2VsbEVuZE5hbWUA
c2V0X0NlbGxFbmROYW1lAGdldF9Db2xTdGFydEluZGV4AHNldF9Db2xTdGFydEluZGV4AGdldF9D
b2xFbmRJbmRleABzZXRfQ29sRW5kSW5kZXgAZ2V0X0NvbE5hbWVMaXN0AEdldFNlY3Rpb25SYW5n
ZQBHZXRDb2xOdW1iZXIAU2VjdGlvbk5hbWUAQ2VsbFN0YXJ0TmFtZQBDZWxsRW5kTmFtZQBDb2xT
dGFydEluZGV4AENvbEVuZEluZGV4AENvbE5hbWVMaXN0AEdldFJvdwBHZXRDZWxsQnlOYW1lAEdl
dENlbGxCeUNlbGxWYWx1ZQBHZXROZXh0SW5Db2xDZWxsTmFtZQBHZXRQcmV2SW5Db2xDZWxsTmFt
ZQBHZXRSYW5nZUNlbGxOYW1lcwBHZXRGaWxsZWRDb2x1bW5DZWxsUmFuZ2UASUVudW1lcmFibGVg
MQBHZXRDZWxsUmFuZ2VOYW1lcwBJbnNlcnRTaGFyZWRTdHJpbmdJdGVtAENvcHlDZWxsU3R5bGUA
Q29weUNlbGxGb3JtdWxhAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNl
TWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQBnZXRf
UmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdElu
c3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAc2QAc3N0AHN0YXJ0AFN0YXJ0SW5kZXgAcm93AHNT
ZWN0aW9uTmFtZQBSb3dJbmRleABSZXBvcnREYXRlAENlbGxSZWZlcmVuY2UAc1ZhbHVlAHNEYXRh
VHlwZQBDb2xJbmRleABzTmFtZQBDb2xTdGFydABDb2xFbmQAdmFsdWUAc0NlbGxOYW1lAHRoZUNl
bGwAc3N0cABjZWxsTmFtZQBDZWxsVmFsdWUAc0NlbGxWYWx1ZQBTdGFydENlbGxOYW1lAENlbGxM
aXN0AFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBPdXRBdHRyaWJ1dGUAY2VsbHMAY2Vs
bABGcm9tQ2VsbABUb0NlbGwAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0
ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFz
c2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2Vt
Ymx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRp
bWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRp
bWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5BZGRJbgBBZGRJbkF0dHJpYnV0ZQBTdHJp
bmcARm9ybWF0AFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMARXZlbnRzT2JqZWN0V3JhcHBlcgBn
ZXRfRXZlbnRzAEZpcmVJbmZvcm1hdGlvbgBnZXRfSXRlbQBTdWJzdHJpbmcASW50MzIAQ2VsbFR5
cGUAZ2V0X0NlbGxSZWZlcmVuY2UAZ2V0X1ZhbHVlAFdvcmtzaGVldABnZXRfV29ya3NoZWV0AE9w
ZW5YbWxQYXJ0Um9vdEVsZW1lbnQAU2F2ZQBzZXRfVGFza1Jlc3VsdAA8UHJlRXhlY3V0ZT5iX18w
AHMAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAZ2V0X05hbWUAb3BfSW1wbGljaXQAb3BfRXF1
YWxpdHkATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAVG9TdHJpbmcAQ29u
Y2F0AE9wZW4AV29ya2Jvb2tQYXJ0AGdldF9Xb3JrYm9va1BhcnQAV29ya2Jvb2sAZ2V0X1dvcmti
b29rAE9wZW5YbWxFbGVtZW50AERlc2NlbmRhbnRzAFN5c3RlbS5Db3JlAEZ1bmNgMgBTeXN0ZW0u
TGlucQBFbnVtZXJhYmxlAEZpcnN0T3JEZWZhdWx0AGdldF9JZABFeGNlcHRpb24AT3BlblhtbFBh
cnRDb250YWluZXIAT3BlblhtbFBhcnQAR2V0UGFydEJ5SWQAR2V0Rmlyc3RDaGlsZABHZXRQYXJ0
c09mVHlwZQBzZXRfVmFsdWUAT3BlblhtbFBhY2thZ2UAQ2xvc2UARGlzcG9zZQBBZGQAQ291bnQA
RWxlbWVudEF0AFRvVXBwZXIAb3BfSW5lcXVhbGl0eQBVSW50MzJWYWx1ZQBnZXRfUm93SW5kZXgA
T3BlblhtbFNpbXBsZVZhbHVlYDEAZ2V0X0NvdW50AExhc3QAS2V5VmFsdWVQYWlyYDIARGF0ZVRp
bWUAUGFyc2UAVG9PQURhdGUARG91YmxlAFRvQXJyYXkAZ2V0X0NlbGxWYWx1ZQBnZXRfSW5uZXJU
ZXh0AFVJbnQzMgBUcnlQYXJzZQBGcm9tT0FEYXRlAGdldF9EYXRlAFN5c3RlbS5UZXh0AFN0cmlu
Z0J1aWxkZXIAQXBwZW5kAENlbGxGb3JtdWxhAGdldF9DZWxsRm9ybXVsYQBnZXRfUmVmZXJlbmNl
AE9wZW5YbWxMZWFmVGV4dEVsZW1lbnQAZ2V0X1RleHQAUmVwbGFjZQBzZXRfUmVmZXJlbmNlAEVu
dW1WYWx1ZWAxAENlbGxGb3JtdWxhVmFsdWVzAHNldF9Gb3JtdWxhVHlwZQBzZXRfVGV4dABJc051
bGxPckVtcHR5AGdldF9Gb3JtdWxhVHlwZQBnZXRfU2hhcmVkSW5kZXgAc2V0X1NoYXJlZEluZGV4
ADw+Y19fRGlzcGxheUNsYXNzNQA8R2V0Q2VsbD5iX18zAGMAQ29tcGFyZQBXaGVyZQBGaXJzdAA8
PmNfX0Rpc3BsYXlDbGFzc2YAQ2VsbFJlZgA8VmVyaWZ5Um93PmJfX2IAPFZlcmlmeVJvdz5iX185
AHcAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZWMAPFZlcmlmeVJvdz5iX19h
AHQAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZWQAZ2V0X0tleQBJT3JkZXJl
ZEVudW1lcmFibGVgMQBPcmRlckJ5AElFbnVtZXJhdG9yYDEAR2V0RW51bWVyYXRvcgBnZXRfQ3Vy
cmVudABzZXRfQ2VsbFJlZmVyZW5jZQBJbnNlcnRBZnRlclNlbGYASW5zZXJ0QWZ0ZXIAU3lzdGVt
LkNvbGxlY3Rpb25zAElFbnVtZXJhdG9yAE1vdmVOZXh0AElEaXNwb3NhYmxlAFN5c3RlbS5UZXh0
LlJlZ3VsYXJFeHByZXNzaW9ucwBSZWdleABNYXRjaABDYXB0dXJlAENlbGxWYWx1ZXMAZ2V0X0Rh
dGFUeXBlAE9wZW5YbWxTaW1wbGVUeXBlAGdldF9IYXNWYWx1ZQBTaGFyZWRTdHJpbmdUYWJsZQBn
ZXRfU2hhcmVkU3RyaW5nVGFibGUAPD5jX19EaXNwbGF5Q2xhc3MxADxHZXRDZWxsQnlOYW1lPmJf
XzAAPD5jX19EaXNwbGF5Q2xhc3M0ADxHZXRDZWxsQnlDZWxsVmFsdWU+Yl9fMwA8PmNfX0Rpc3Bs
YXlDbGFzczgAPEdldFJhbmdlQ2VsbE5hbWVzPmJfXzYAPEdldFJhbmdlQ2VsbE5hbWVzPmJfXzcA
PD5jX19EaXNwbGF5Q2xhc3NkAHNTdGFyQ2VsbHRDb2x1bW5OYW1lAGlTdGFydENlbGxSb3dJbmRl
eAA8R2V0RmlsbGVkQ29sdW1uQ2VsbFJhbmdlPmJfX2EAPEdldEZpbGxlZENvbHVtbkNlbGxSYW5n
ZT5iX19iAHIAc2V0X0NlbGxWYWx1ZQBzZXRfRGF0YVR5cGUARWxlbWVudHMAU2hhcmVkU3RyaW5n
SXRlbQBUZXh0AEFwcGVuZENoaWxkAE9wZW5YbWxBdHRyaWJ1dGUAR2V0QXR0cmlidXRlAFNldEF0
dHJpYnV0ZQBzZXRfQ2VsbEZvcm11bGEAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBB
c3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJs
ZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQAuY2N0b3IAU1RfYTdiNzAxYjM3NDY5NDNk
MmJjYzQ3NDRlODVhOTliMDAuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAA
AAABAEljAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABjAGUAbABsACAAdwBpAHQAaAAgAHYA
YQBsAHUAZQA9ACIAewAwAH0AIgAANVAAcgBlAHAAYQByAGUAIABXAGEAdABlAHIAZgBhAGwAbAAg
AHQAZQBtAHAAbABhAHQAZQAARVMAZQBjAHQAaQBvAG4AcwAgAFIAYQBuAGcAZQA9AHsAMAB9ACwA
ewAxAH0ALAB7ADIAfQAsAHsAMwB9ACwAewA0AH0AABdSAEUAUABPAFIAVAAgAEQAQQBUAEUAAAtJ
AE4AUABVAFQAAA1PAFUAVABQAFUAVAAAGUQASQBTAFQAUgBJAEIAVQBUAEkATwBOAAAXRABJAFMA
QwBSAEUAUABBAE4AQwBZAAAtUgBlAHAAbwByAHQAUwBlAGMAdABpAG8AbgBzACAAaQBzACAATgBV
AEwATAAAF3sAMAB9AC8AewAxAH0ALwB7ADIAfQAAUWYAbwB1AG4AZAAgAHQAaABlACAAcgBlAHAA
bwByAHQAIABkAGEAdABlACAAPQAgAHsAMAB9ACAAYQB0ACAAcgBvAHcAIAA9ACAAewAxAH0AACtN
AG8AdgBlAGQAIAB0AG8AIAB0AGgAZQAgAGwAYQBzAHQAIAByAG8AdwAAE3sAMAB9ACAAOgAgAHsA
MQB9AAAlUgBvAHcAIABzAHQAYQByAHQAIABwAG8AcwBpAHQAaQBvAG4AABlSAG8AdwAgAFYAZQBy
AGkAZgBpAGUAZAAAM1MAZQB0ACAAZgBpAHIAcwB0ACAAaQBuAHAAdQB0ACAAYwBlAGwAbAA6ACAA
ewAwAH0AACVEAGkAbQBSAGUAcABvAHIAdABpAG4AZwBEAGEAdABlAEkARAAAD1QAcgB1AHMAdABJ
AEQAAB1TAHQAYQByAHQAQwBlAGwAbABWAGEAbAB1AGUAADNXAGEAdABlAHIAZgBhAGwAbABUAGUA
bQBwAGwAYQB0AGUARgBpAGwAZQBOAGEAbQBlAAArVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABs
AGEAdABlAFAAYQB0AGgAABNTAGgAZQBlAHQATgBhAG0AZQAAA1wAAEVDAG8AdQBsAGQAIABuAG8A
dAAgAGYAaQBuAGQAIABzAGgAZQBlAHQAIAB3AGkAdABoACAAbgBhAG0AZQAgAHsAMAB9AAAXXwBJ
AG4AcAB1AHQAUgBhAG4AZwBlAAAbTQBPAEQARQBMACAAVgBFAFIAUwBJAE8ATgAACUQAYQB0AGUA
ABNEAGEAdABhACAAVAB5AHAAZQAAFWQAZAAvAE0ATQAvAHkAeQB5AHkAAAM6AAADPQAACW4AdQBs
AGwAAAMxAAAFMQBhAAAFMQBiAAADMgAAAzMAAAM0AAADNQAAAzYAAAM3AAADOAAAByAAPQAgAAAV
bgBvACAAZgBvAHIAbQB1AGwAYQAAAzsAABNbAEEALQBaAGEALQB6AF0AKwABB1wAZAArAAANRABv
AHUAYgBsAGUAAAdpAG4AdAAAEUMAdQByAHIAZQBuAGMAeQAAD0IAbwBvAGwAZQBhAG4AAA1zAHQA
cgBpAG4AZwAACVQAUgBVAEUAAAMwAAADcwAAf1MAVABfAGEANwBiADcAMAAxAGIAMwA3ADQANgA5
ADQAMwBkADIAYgBjAGMANAA3ADQANABlADgANQBhADkAOQBiADAAMAAuAGMAcwBwAHIAbwBqAC4A
UAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAZcq1RNCLykycQmE2gkOg
lAAIiYRdzYCAzJEIt3pcVhk04IkCBg4IMb84Vq02TjUDBhIVAwYSGQMGEh0DBhIhAwYSJQMGEikD
BhIQAyAAAQIGCAMGEQwEAAAAAAQBAAAACAYVEi0CDhIUAwYSMQkgAwESIRIlEjUJIAAVEi0CDhIU
AyAADgggAxIUCA4SMQMgAAIEIAECDgQgAQIIBCABCA4EIAEODgUgAgIODgQgABI1BSABEjUOAyAA
CAQgABIxBCABDggJKAAVEi0CDhIUAygADgcGFRItAg4ODiAGAQ4IDggOFRItAg4OBCABAQ4EIAEB
CAggABUSLQIODgMoAAgIKAAVEi0CDg4EAAEODgQAAQgOBwACEjESIQgHAAIOEjUSJQcAAhI1EiEO
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAw
AACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAAPADAAAAAAAAAAAAAPADNAAAAFYAUwBfAFYA
RQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQCBhnUVAAABAIGGdRU/AAAAAAAA
AAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQA
AABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABl
AEkAbgBmAG8AAAAsAwAAAQAwADAAMAAwADAANABiADAAAACAACsAAQBGAGkAbABlAEQAZQBzAGMA
cgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYQA3AGIANwAwADEAYgAzADcANAA2ADkANAAzAGQAMgBi
AGMAYwA0ADcANAA0AGUAOAA1AGEAOQA5AGIAMAAwAC4AYwBzAHAAcgBvAGoAAAAAAEAADwABAEYA
aQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADQAOQAzAC4AMwA0ADQAMwAzAAAAAACA
AC8AAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGEANwBiADcAMAAxAGIAMwA3ADQA
NgA5ADQAMwBkADIAYgBjAGMANAA3ADQANABlADgANQBhADkAOQBiADAAMAAuAGMAcwBwAHIAbwBq
AC4AZABsAGwAAAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkA
cgBpAGcAaAB0ACAAQAAgACAAMgAwADEANAAAAIgALwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABl
AG4AYQBtAGUAAABTAFQAXwBhADcAYgA3ADAAMQBiADMANwA0ADYAOQA0ADMAZAAyAGIAYwBjADQA
NwA0ADQAZQA4ADUAYQA5ADkAYgAwADAALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAAB4ACsAAQBQ
AHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGEANwBiADcAMAAxAGIAMwA3ADQANgA5ADQA
MwBkADIAYgBjAGMANAA3ADQANABlADgANQBhADkAOQBiADAAMAAuAGMAcwBwAHIAbwBqAAAAAABE
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUANAA5ADMALgAzADQA
NAAzADMAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADUANAA5ADMALgAzADQANAAzADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHAAAAwAAAAANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAA=</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="SSIS.Pipeline.2">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact">Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">-1</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Populate Input &amp; Distribution</DTS:Property>
<DTS:Property DTS:Name="DTSID">{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}</DTS:Property>
<DTS:Property DTS:Name="Description">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Pipeline.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><pipeline id="0" name="pipelineXml" description="pipelineXml" defaultBufferMaxRows="10000" engineThreads="10" defaultBufferSize="10485760" BLOBTempStoragePath="" bufferTempStoragePath="" runInOptimizedMode="true">
<components>
<component id="1" name="GetFactVariableSet" componentClassID="{BCEFE59B-6819-47F7-A125-63753B33ABB7}" description="OLE DB Source" localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="7" pipelineVersion="0" contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7">
<properties>
<property id="2" name="CommandTimeout" dataType="System.Int32" state="default" isArray="false" description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="3" name="OpenRowset" dataType="System.String" state="default" isArray="false" description="Specifies the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="4" name="OpenRowsetVariable" dataType="System.String" state="default" isArray="false" description="Specifies the variable that contains the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="5" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="The SQL command to be executed." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">exec dbo.usp_GetFactVariableSet ?, '?'</property>
<property id="6" name="SqlCommandVariable" dataType="System.String" state="default" isArray="false" description="The variable that contains the SQL command to be executed." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">User::_query_GetFactVariableSet</property>
<property id="7" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property>
<property id="8" name="AlwaysUseDefaultCodePage" dataType="System.Boolean" state="default" isArray="false" description="Forces the use of the DefaultCodePage property value when describing character data." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="9" name="AccessMode" dataType="System.Int32" state="default" isArray="false" description="Specifies the mode used to access the database." typeConverter="AccessMode" UITypeEditor="" containsID="false" expressionType="None">3</property>
<property id="15" name="ParameterMapping" dataType="System.String" state="default" isArray="false" description="The mappings between the parameters in the SQL command and variables." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">"@DimReportingDateID",{6D8C3392-DD2B-48E7-B4D8-683A44055A43};"@VariableSetCode",{39A2D41B-0672-493B-A4C6-93F81733E4FD};</property></properties>
<connections>
<connection id="10" name="OleDbConnection" description="The OLE DB runtime connection used to access the database." connectionManagerID="{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}"/></connections>
<outputs>
<output id="11" name="OLE DB Source Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="17" name="VariableSetCode" description="" lineageId="17" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="16" mappedColumnId="0"/>
<outputColumn id="20" name="DimReportingDateId" description="" lineageId="20" precision="0" scale="0" length="0" dataType="i8" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="19" mappedColumnId="0"/>
<outputColumn id="23" name="VariableSetId" description="" lineageId="23" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="22" mappedColumnId="0"/>
<outputColumn id="26" name="VariableSetItemId" description="" lineageId="26" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="25" mappedColumnId="0"/>
<outputColumn id="29" name="Value" description="" lineageId="29" precision="0" scale="0" length="0" dataType="nText" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="28" mappedColumnId="0"/>
<outputColumn id="134" name="VariableName" description="" lineageId="134" precision="0" scale="0" length="1000" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="133" mappedColumnId="0"/>
<outputColumn id="137" name="DataType" description="" lineageId="137" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="136" mappedColumnId="0"/>
<outputColumn id="199" name="VariableType" description="" lineageId="199" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="198" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="True">
<externalMetadataColumn id="16" name="VariableSetCode" description="" precision="0" scale="0" length="200" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="19" name="DimReportingDateId" description="" precision="0" scale="0" length="0" dataType="i8" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="22" name="VariableSetId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="25" name="VariableSetItemId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="28" name="Value" description="" precision="0" scale="0" length="0" dataType="nText" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="133" name="VariableName" description="" precision="0" scale="0" length="1000" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="136" name="DataType" description="" precision="0" scale="0" length="50" dataType="wstr" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="198" name="VariableType" description="" precision="0" scale="0" length="50" dataType="wstr" codePage="0" mappedColumnId="0"/></externalMetadataColumns></output>
<output id="12" name="OLE DB Source Error Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="18" name="VariableSetCode" description="" lineageId="18" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="21" name="DimReportingDateId" description="" lineageId="21" precision="0" scale="0" length="0" dataType="i8" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="24" name="VariableSetId" description="" lineageId="24" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="27" name="VariableSetItemId" description="" lineageId="27" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="30" name="Value" description="" lineageId="30" precision="0" scale="0" length="0" dataType="nText" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="135" name="VariableName" description="" lineageId="135" precision="0" scale="0" length="1000" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="200" name="VariableType" description="" lineageId="200" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="138" name="DataType" description="" lineageId="138" precision="0" scale="0" length="50" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="13" name="ErrorCode" description="" lineageId="13" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="14" name="ErrorColumn" description="" lineageId="14" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="31" name="Script Component" componentClassID="{2E42D45B-F83C-400F-8D77-61DDE6A7DF29}" description="Executes a custom script." localeId="-1" usesDispositions="false" validateExternalMetadata="True" version="4" pipelineVersion="0" contactInfo="Executes a custom script.;Microsoft Corporation; Microsoft SqlServer v10; © 2007 Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4">
<properties>
<property id="35" name="SourceCode" dataType="System.String" state="cdata" isArray="true" description="Stores the source code of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="18"><arrayElement dataType="System.String"><![CDATA[\main.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* Microsoft SQL Server Integration Services Script Component
*  Write scripts using Microsoft Visual C# 2008.
*  ScriptMain is the entry point class of the script.*/

using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
//using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    private string _ReportingDate;
    private string _sFileName;
    private string _sFilePath;
    private string _sFile;
    private SpreadsheetDocument _spreadsheetDocument;
    private Sheet _sheet;
    private WorksheetPart _worksheetPart;
    private SheetData _sheetData;
    private SharedStringTablePart _sharedStringTablePart;
    private DocumentFormat.OpenXml.StringValue _sheetReferenceId;
    private string _sSheetName;
    private string _StartCellValue;
    private int Count = 0;
    private string _TrustID;
    private WaterfallReport _wr;
    private string _sInputRange;
    private string _sOutputRange;
    private Sheet _sheet_meta;
    private DocumentFormat.OpenXml.StringValue _sheetReferenceId_meta;
    private WorksheetPart _worksheetPart_meta;
    private SheetData _sheetData_meta;
    private string _InputRange = "";

    public override void PreExecute()
    {
        base.PreExecute();
        /*
          Add your code here for preprocessing or remove if not needed
        */
        _ReportingDate = Variables.DimReportingDateID;
        _TrustID = Variables.TrustID;
        _StartCellValue = Variables.StartCellValue;  //"REPORT DATE";
        _sFileName = Variables.WaterfallTemplateFileName;
        _sFilePath = Variables.WaterfallTemplatePath;
        _sSheetName = Variables.SheetName;
        _sFile = _sFilePath + "\\" + _sFileName;

        _spreadsheetDocument = SpreadsheetDocument.Open(_sFile, true);
        _sheet = _spreadsheetDocument.WorkbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == _sSheetName);
        _sheetReferenceId = _sheet.Id;
        if (_sheet == null) throw new Exception(string.Format("Could not find sheet with name {0}", _sSheetName));

        _worksheetPart = (WorksheetPart)_spreadsheetDocument.WorkbookPart.GetPartById(_sheetReferenceId);
        _sheetData = _worksheetPart.Worksheet.GetFirstChild<SheetData>();
        _sharedStringTablePart = _spreadsheetDocument.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();

    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
        //cleanup
        Variables.InputRange = _InputRange;
        _worksheetPart.Worksheet.Save();
        _sharedStringTablePart = null;
        _sheetData = null;
        _worksheetPart = null;
        _sheet = null;
        _spreadsheetDocument.Dispose();
        _spreadsheetDocument = null;
        _wr = null;
        
    }


    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
          Add your code here
        */
        bool bFireAgain = true;
        string sMsg = "";
        //string CellList;

        if (Row.VariableType.ToUpper() == "INPUT" || Row.VariableType.ToUpper() == "DISTRIBUTION")
        {
            byte[] byteValue = Row.Value.GetBlobData(0, Convert.ToInt32(Row.Value.Length));
            string sValue = System.Text.Encoding.Unicode.GetString(byteValue).Trim();
            sMsg = string.Format("{0} : {1}", Count.ToString(), sValue);
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            //Work with spreadsheet
            if (Count == 0)
            {
                
                var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
                if (StartCell == null)
                {
                    sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }
                _wr = new WaterfallReport(_sheetData, _sharedStringTablePart, StartCell);
                sMsg = string.Format("Sections Range={0},{1},{2},{3},{4}", _wr.ReportSections["REPORT DATE"].GetSectionRange(), _wr.ReportSections["INPUT"].GetSectionRange(), _wr.ReportSections["OUTPUT"].GetSectionRange(), _wr.ReportSections["DISTRIBUTION"].GetSectionRange(), _wr.ReportSections["DISCREPANCY"].GetSectionRange());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                if (_wr.ReportSections == null)
                {
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", "ReportSections is NULL", "", 0, ref bFireAgain);
                }

                _wr.MoveToLastRow();
                if (_wr.MoveToNextRow() != true)
                {
                    // Create next row
                }
                //Validate Row - row has to have all the columns of the waterfallreport

                _wr.MoveToSectionFirstCell("REPORT DATE");

                DateTime dtReportDate = new DateTime(1900, 1, 1);
               // if (DateTime.TryParse(_ReportingDate, out dtReportDate))
                //{ _wr.UpdateCellValue(dtReportDate.Date.ToString(), "Date"); }
                string ReportDate = "";
                if (_ReportingDate.Length >= 8)
                {
                    ReportDate = string.Format("{0}/{1}/{2}", _ReportingDate.Substring(4, 2), _ReportingDate.Substring(6, 2), _ReportingDate.Substring(0, 4));

                }
                sMsg = string.Format("REPORT DATE = {0}", ReportDate);
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                _wr.UpdateCellValue(ReportDate, "Date");

                //sMsg = string.Format("DISTRIBUTION={0}, {1}", _wr.ReportSections["DISTRIBUTION"].ColStartIndex.ToString(), _wr.ReportSections["DISTRIBUTION"].ColEndIndex.ToString());
                //ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            }

            if (_wr.MoveToNextCell())
            {
                //sMsg = string.Format("VariableName={0}; VariableType{1}; Template variable type {2}", Row.VariableName, Row.VariableType, _wr.GetValueType());
                //ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                if (Row.VariableType == _wr.GetValueType())
                {
                    _wr.UpdateCellValue(sValue, Row.DataType);
                }
                else{
                    sMsg = string.Format("VariableName={0}; VariableType{1}; Template variable type {2}", Row.VariableName, Row.VariableType, _wr.GetValueType());
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }
                if (_wr.IsSectionLastColumn("INPUT") && Row.VariableType == "INPUT")
                {
                    //ComponentMetaData.FireInformation(1000, "Update Waterfall template", "SET DISTRIBUTION SECTION", "", 0, ref bFireAgain);
                    _InputRange = _wr.GetCell().CellReference.Value;
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template InputRange", sMsg, _InputRange, 0, ref bFireAgain);
                    _wr.MoveToSectionFirstCell("DISTRIBUTION");
                }
            }
       
        }

        Count++;
    }

}
    public class WaterfallReport
    {
        private SheetData _sheetData;
        private SharedStringTablePart _sharedStringTablePart;
        private Dictionary<string, WaterfallReportSection> _ReportSections = new Dictionary<string, WaterfallReportSection>();
        private Row _rColumnName;
        private Row _rData;
        private Row _rRowType;
        private int _CurrentColIndex;
        
        public WaterfallReport(SheetData sd, SharedStringTablePart sst, Cell start)
        {
            _sheetData = sd;
            _sharedStringTablePart = sst;
            int RowTypeIndex = ExcelNavigator.GetRowIndex(start.CellReference) - 1;

            _rRowType = ExcelNavigator.GetRow(_sheetData, RowTypeIndex);

            //_ReportSections = new Dictionary<string, WaterfallReportSection>();
            _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
            _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
            //_ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
            //_ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
            _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
            _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));

            _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + 1);
        }

        public Dictionary<string, WaterfallReportSection> ReportSections
        {
            get { return this._ReportSections; }
        }

        private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
        {
            int ColStart = 0;
            int ColEnd = 0;
            string CellStartName = "";
            string CellEndName = "";
            Cell cell;
            string sLastCellValue = "";
            string sLastCellName = "";
            string sCellValue = "";
            string sCellName = "";

            WaterfallReportSection wrs = null;
            Dictionary<string, string> cn = new Dictionary<string, string>();

            int ColCount = row.Descendants<Cell>().Count<Cell>();
            for (int i = StartIndex; i <= ColCount - 1; i++)
            {
                cell = row.Descendants<Cell>().ElementAt(i);
                sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToString();
                sCellName = cell.CellReference.ToString();
                if (sCellValue != sLastCellValue && sCellValue == SectionName)
                {
                    CellStartName = sCellName;
                    ColStart = i;
                }
                if (sCellValue != sLastCellValue && sLastCellValue == SectionName)
                {
                    CellEndName = sLastCellName;
                    ColEnd = i - 1;
                    break;
                }
                if (sCellValue == SectionName)
                {
                    cn.Add(i.ToString(), ExcelNavigator.GetColumnName(cell.CellReference.Value));
                }
                if (i == ColCount - 1)
                {
                    CellEndName = sCellName;
                    ColEnd = i;
                }
                sLastCellValue = sCellValue;
                sLastCellName = cell.CellReference.ToString();
            }
            if (CellStartName != "" && CellEndName != "")
            {
                wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName, cn);
            }
            return wrs;
        }

        public bool MoveToNextRow()
        {
            Row r = _rData;
            bool ret = false;
            try
            {
                _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value));
                ret = true;
            }
            catch {_rData = r; }

            return ret;
       }

        public bool MoveToPrevRow()
        {
            bool ret = false;
            if (_rData.RowIndex - 2 > _rRowType.RowIndex)
            {
                _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value - 2));
                ret = true;
            }
            return ret;
        }

        public bool MoveToNextCell()
        {
            bool ret = false;
            if (_CurrentColIndex + 1 <= _ReportSections["DISCREPANCY"].ColEndIndex)
            {
                _CurrentColIndex++;
                ret = true;
            }
            return ret;
        }

        public bool MoveToPrevCell()
        {
            bool ret = false;
            if (_CurrentColIndex - 1 <= _ReportSections["REPORT DATE"].ColStartIndex)
            {
                _CurrentColIndex--;
                ret = true;
            }
            return ret;  
        }

        public bool MoveToSectionFirstCell(string sSectionName)
        {
            _CurrentColIndex = _ReportSections[sSectionName].ColStartIndex;
            return true;
        }

        public bool MoveToLastRow()
        {
            string sCellsList;
            string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
            Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
            if (cells != null && cells.Count > 0)
            {
                Cell LastFilledCell = cells.Last<KeyValuePair<string, Cell>>().Value;
                int FirstEmptyRowIndex = ExcelNavigator.GetRowIndex(LastFilledCell.CellReference) - 1;
                _rData = ExcelNavigator.GetRow(_sheetData, FirstEmptyRowIndex);
            }
            return true;
        }

        public string GetCellValue()
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            }
            catch { return null; }
        }

        public string GetCellValue(string CellReference)
        {
            try
            {
                //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                Cell cell = ExcelNavigator.GetCellByName(_sheetData, CellReference);
                return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            }
            catch { return null; }
        }

        public string GetValueType()
        {
            Cell cell = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex);
            return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        }

        public bool UpdateCellValue(string sValue, string sDataType)
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    ExcelWriter.CopyCellStyle(FromCell, cell);
                }
                return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
            }
            catch { return false; }
        }

        public bool CopyFormula()
        {
            try
            {
                Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
                if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
                {
                    //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                    Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                    Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                    if (FromCell.CellFormula != null)
                    {
                        string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                        string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                        string sFormulaRef = FromCell.CellFormula.Reference.Value;
                        string sFormulaText = FromCell.CellFormula.Text;
                        CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                        //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                        //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                        cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                        cell.Append(cf);
                    }
                    //cell.CellValue.Remove();
                }
                return true;
            }
            catch { return false; }
        }

        public bool IsSectionLastColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColEndIndex)
            { ret = true; }
            return ret;
        }

        public bool IsSectionFirstColumn(string sSectionName)
        {
            bool ret = false;
            if (_CurrentColIndex == _ReportSections[sSectionName].ColStartIndex)
            { ret = true; }
            return ret;
        }
        public Cell GetCell()
        {
            return _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        }

        public Cell GetCell(string CellReference)
        {
            try
            {
                return (Cell)_rData.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, CellReference, true) == 0).First();
                //sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
            }
            catch { return null; }
        }

        public int ColumnIndex()
        {
            return _CurrentColIndex;
        }
        public Row GetDataRow()
        {
            return _rData;
        }
        public Row GetTypeRow()
        {
            return _rRowType;
        }

        public int GetReportColIndex()
        {
            int ColIndex = 0;

            if (this._CurrentColIndex >= this._ReportSections["INPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["INPUT"].ColEndIndex)
            {
                ColIndex = this._CurrentColIndex - this._ReportSections["INPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["OUTPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["OUTPUT"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["OUTPUT"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISTRIBUTION"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISTRIBUTION"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISTRIBUTION"].ColStartIndex + 1;
            }

            if (this._CurrentColIndex >= this._ReportSections["DISCREPANCY"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISCREPANCY"].ColEndIndex)
            {
                ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber() + this._ReportSections["DISTRIBUTION"].GetColNumber();
                ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISCREPANCY"].ColStartIndex + 1;
            }

            return ColIndex;
        }
        public bool VerifyRow()
        {
            string CellRef = "";
            string LastCellRef = "";
            Cell LastCell = null;

            foreach (KeyValuePair<string, WaterfallReportSection> rs in _ReportSections.OrderBy(w => w.Value.ColStartIndex))
            {
                foreach (KeyValuePair<string, string> cn in rs.Value.ColNameList.OrderBy(t => int.Parse(t.Key)))
                {
                    CellRef = cn.Value + _rData.RowIndex.ToString();
                    if (LastCell == null) { LastCellRef = ""; }
                    else { LastCellRef = LastCell.CellReference.Value; }
                    try
                    {
                        Cell e = _rData.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, CellRef, true) == 0).FirstOrDefault<Cell>();
                        if (e == null)
                        {
                            e = new Cell() { CellReference = CellRef };
                            //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                            if (LastCell == null) { _rData.InsertAfterSelf<Cell>(e); }
                            else { _rData.InsertAfter<Cell>(e, LastCell); }

                        }
                        LastCell = e;
                    }
                    catch
                    {
                        Cell e = new Cell() { CellReference = CellRef };
                        //e.SetAttribute(new OpenXmlAttribute("ref", "", CellRef));
                        _rData.InsertAfter<Cell>(e, LastCell);
                        LastCell = e;
                    }

                }
            }

            return true;
        }

        public string GetColumnName(int ColIndex)
        {
            string CellRef = "";

            CellRef = _rRowType.Descendants<Cell>().ElementAt(ColIndex).CellReference.Value;
            return ExcelNavigator.GetColumnName(CellRef);
        }

    }

    public class WaterfallReportSection
    {
        private string _SectionName;
        private int _ColStartIndex;
        private string _CellStartName;
        private int _ColEndIndex;
        private string _CellEndName;
        private int _FieldsCount;
        private Dictionary<string, string> _ColNameList;

        public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName, Dictionary<string, string> List)
        {
            // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
            this._SectionName = sName;
            this._ColStartIndex = ColStart;
            this._CellStartName = CellStartName;
            this._ColEndIndex = ColEnd;
            this._CellEndName = CellEndName;
            this._ColNameList = List;
        }

        public string SectionName{ 
           get{ return this._SectionName;} 
           set{this._SectionName = value;}
            }
        public string CellStartName{ 
           get{ return this._CellStartName;} 
           set{this._CellStartName = value;}
            }
        public string CellEndName{ 
           get{ return this._CellEndName;} 
           set{this._CellEndName = value;}
            }
        public int ColStartIndex{ 
           get{ return this._ColStartIndex;} 
           set{this._ColStartIndex = value;}
            }
        public int ColEndIndex{ 
           get{ return this._ColEndIndex;} 
           set{this._ColEndIndex = value;}
            }
        public Dictionary<string, string> ColNameList
        {
            get { return this._ColNameList; }
            //set { this._ColNameList = value; }
        }
        public string GetSectionRange()
        {
            return this._CellStartName + ":" + this._CellEndName;
        }
        public int GetColNumber()
        {
            return this._ColEndIndex - this._ColStartIndex + 1;
        }

    }

    public static class ExcelNavigator
    {
        public static string GetColumnName(string sCellName)
        {
            Regex regex = new Regex("[A-Za-z]+");
            Match match = regex.Match(sCellName);

            return match.Value;
        }

        public static int GetRowIndex(string sCellName)
        {
            Regex regex = new Regex(@"\d+");
            Match match = regex.Match(sCellName);

            return int.Parse(match.Value);
        }

        public static Row GetRow(SheetData sd, int RowIndex)
        {
            return sd.Descendants<Row>().ElementAt(RowIndex);

        }

        private static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }

        public static Cell GetCellByName(SheetData sd, string cellName)
        {
            return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
        }

        public static Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
        {
            return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
        }

        public static string GetNextInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) + 1).ToString();
        }

        public static string GetPrevInColCellName(string sCellName)
        {
            return GetColumnName(sCellName) + (GetRowIndex(sCellName) - 1).ToString();
        }

        public static string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
        {
            StringBuilder sb = new StringBuilder();
            Cell cell;

            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
            cell = null;
            cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
            sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

            return sb.ToString();
        }

        public static Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
        {
            string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
            StringBuilder sb = new StringBuilder();
            int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
            Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


            IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                            .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
            if (cells != null)
            {
                if (cells.Count<Cell>() > 0)
                {
                    foreach (Cell c in cells)
                    {
                        if (c.CellValue != null)
                        {
                            FilledCells.Add(c.CellReference, c);
                            sb.Append(c.CellReference.Value).Append(";");
                        }
                    }
                }
            }
            CellList = sb.ToString();
            return FilledCells;
        }

        public static string GetCellRangeNames(IEnumerable<Cell> cells)
        {
            StringBuilder sb = new StringBuilder();

            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                        sb.Append(c.CellReference.Value).Append(";");
                }
            }
            return sb.ToString();
        }
    }

    public static class ExcelWriter
    {
        public static bool UpdateCellValue(SharedStringTablePart sstp, Cell cell, string sValue, string sDataType)
        {
            string val;
            switch (sDataType)
            {
                case "Double":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "int":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Currency":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Date":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Numeric":
                    cell.CellValue = new CellValue(sValue);
                    break;
                case "Boolean":
                    if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
                    if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
                    {
                        cell.CellValue = new CellValue(val);
                    }
                    else
                    {
                        cell.DataType = CellValues.Boolean;
                        cell.CellValue = new CellValue(val);

                    }
                    break;
                case "string":
                    cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                    cell.CellValue = new CellValue(InsertSharedStringItem(sstp, sValue).ToString());
                    break;
            }

            return true;
        }

        public static int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
        {
            int i = 0;
            if (sstp != null)
            {
                foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
                {
                    if (item.InnerText == sValue) { return i; }
                    i++;
                }

            }
            sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
            sstp.SharedStringTable.Save();

            return i;
        }

        public static bool CopyCellStyle(Cell FromCell, Cell ToCell)
        {
            bool ret = true;
            OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
            if (FromAttr != null)
            {
                ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
            }

            return ret;
        }
        public static bool CopyCellFormula(Cell FromCell, Cell ToCell)
        {
            bool ret = true;
            ToCell.CellFormula = FromCell.CellFormula;

            return ret;
        }
    }

    public static class ExcelReader
    {
        public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
        {
            string value = null;

            value = theCell.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {
                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
            }

            return value;
        }


    }

    /*            if (Count == 0)
                {
                var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
                if (StartCell == null)
                {
                    sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }

                _RowTypeIndex = ExcelNavigator.GetRowIndex(StartCell.CellReference);
                _row_type = ExcelNavigator.GetRow(_sheetData, _RowTypeIndex);
                var StartDistibutionCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, "DISTRIBUTION");
                if (StartDistibutionCell == null)
                {
                    sMsg = string.Format("could not find cell with value=\"{0}\"", "DISTRIBUTION");
                    ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
                }
                for (int i = 0; i < 85; i++)
                {
                    if (_row_type.Descendants<Cell>().ElementAt(i).CellReference == StartDistibutionCell.CellReference)
                    {
                        _CellColumnIndex = i;
                        break;
                    }
                }
                //Get columns with ReportingDate filled
                Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, StartCell.CellReference.ToString(), out CellList);
                sMsg = CellList;
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                //Get cell with last ReportingDate
                Cell LastFilledReportDate = cells.Last<KeyValuePair<string, Cell>>().Value;
                int FirstEmptyReportDateRowIndex = ExcelNavigator.GetRowIndex(LastFilledReportDate.CellReference);
                string FirstEmptyReportDateCellName = ExcelNavigator.GetColumnName(LastFilledReportDate.CellReference) + (FirstEmptyReportDateRowIndex + 1).ToString();
                sMsg = string.Format("First Empty ReportDate Cell Name={0}", FirstEmptyReportDateCellName);
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                //Find the INPUT Variables Range
                _sInputRange = ExcelNavigator.GetRangeCellNames(_sheetData, _sharedStringTablePart, "INPUT", FirstEmptyReportDateRowIndex);
                //c = GetCellByName(_sheetData_meta, "C6");
                //UpdateCellValue(c, _sInputRange, "string");
                //UpdateCellValue(c, "C38:CI38", "string");
                //Find the OUTPUT Variables Range
                _sOutputRange = ExcelNavigator.GetRangeCellNames(_sheetData, _sharedStringTablePart, "OUTPUT", FirstEmptyReportDateRowIndex);
                //c = GetCellByName(_sheetData_meta, "D6");
                //UpdateCellValue(c, _sOutputRange, "string");
                //UpdateCellValue(c, "CK38:FA38", "string");
                //Trigger VBA script
                //c = GetCellByName(_sheetData_meta, "F6");
                //UpdateCellValue(c, DateTime.Now.TimeOfDay.ToString(), "Date");
                //_worksheetPart_meta.Worksheet.Save();

                _row_data = ExcelNavigator.GetRow(_sheetData, FirstEmptyReportDateRowIndex);

                // Get first cell in the raw to fill with ReportingDate
                for (int i = 0; i < 85; i++)
                {
                    //ComponentMetaData.FireInformation(1000, "Update Waterfall template", _row.Descendants<Cell>().ElementAt(i).CellReference, "", 0, ref bFireAgain);
                    if (_row_data.Descendants<Cell>().ElementAt(i).CellReference == FirstEmptyReportDateCellName)
                    {
                        _CellColumnIndex = i;
                        break;
                    }
                }

                //Update cell value to ReportDate
                ExcelWriter.UpdateCellValue(_sharedStringTablePart, _row_data.Descendants<Cell>().ElementAt(_CellColumnIndex), _ReportingDate, "int");
                _CellColumnIndex++;

                }
     */
    /*
    private Row GetRow(SheetData sd, int RowIndex)
    {
        return _sheetData.Descendants<Row>().ElementAt(RowIndex);
        
    }

    private string GetCellValue(Cell theCell, SharedStringTablePart sstp)
    {
        string value = null;
        bool bFireAgain = true;

        value = theCell.InnerText;
        if (theCell.DataType != null && theCell.DataType.HasValue)
        {
            //ComponentMetaData.FireInformation(1000, "GetCellValue:", theCell.DataType.Value.ToString(), "", 0, ref bFireAgain);
            if (theCell.DataType.Value == CellValues.SharedString)
            {
                if (sstp != null)
                {
                    //ComponentMetaData.FireInformation(1000, "GetCellValue:", "3", "", 0, ref bFireAgain);
                    value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                }
            }
        }

        return value;
    }

    private Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
    {
        return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
    }
    
    private string GetColumnName(string sCellName)
    {
        Regex regex = new Regex("[A-Za-z]+");
        Match match = regex.Match(sCellName);

        return match.Value;
    }

    private int GetRowIndex(string sCellName)
    {
        Regex regex = new Regex(@"\d+");
        Match match = regex.Match(sCellName);

        return int.Parse(match.Value);
    }
   
    private Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
    {
        string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
        StringBuilder sb = new StringBuilder();
        int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
        Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


        IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                        .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
        if (cells != null)
        {
            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                    {
                        FilledCells.Add(c.CellReference, c);
                        sb.Append(c.CellReference.Value).Append(";");
                    }
                }
            }
        }
        CellList = sb.ToString();
        return FilledCells;
    }

    private string GetCellRangeNames(IEnumerable<Cell> cells)
    {
        StringBuilder sb = new StringBuilder();

        if (cells.Count<Cell>() > 0)
        {
            foreach (Cell c in cells)
            {
                if (c.CellValue != null)
                    sb.Append(c.CellReference.Value).Append(";");
            }
        }
        return sb.ToString();
    }

    private Cell GetCellByName(SheetData sd, string cellName)
    {
        return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
    }

    private bool UpdateCellValue(Cell cell, string sValue, string sDataType)
    {
        string val;
        switch (sDataType)
        {
            case "Double":
               cell.CellValue = new CellValue(sValue);
               break;
            case "int":
               cell.CellValue = new CellValue(sValue);
               break;
            case "Currency":
               cell.CellValue = new CellValue(sValue);
               break;
            case "Date":
               cell.CellValue = new CellValue(sValue);
               break;
            case "Boolean":
               if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
               if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
               {
                   cell.CellValue = new CellValue(val);
               }
               else
               {
                   cell.DataType = CellValues.Boolean;
                   cell.CellValue = new CellValue(val);
                   
               }
               break;
            case "string":
               cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
               cell.CellValue = new CellValue(InsertSharedStringItem(_sharedStringTablePart, sValue).ToString());
               break;
         }

        return true;
    }

    private int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
    {
        int i = 0;
        if (sstp != null)
        {
            foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
            {
                if (item.InnerText == sValue) { return i; }
                i++;
            }
            
        }
        sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
        sstp.SharedStringTable.Save();

        return i;
    }

    private bool CopyCellStyle(Cell FromCell, Cell ToCell)
    {
        bool ret = true;
        OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
        if (FromAttr != null)
        {
            ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
        }

        return ret;
    }
    
    private string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
    {
        StringBuilder sb = new StringBuilder();
        Cell cell;

        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
        cell = null;
        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

        return sb.ToString();
    }
     */



    //read entire spreadsheet
    /*
    foreach (Row r in _sheetData)
    {
        if (r == null) { sMsg = "null"; }
        else
        {
                    
            //ComponentMetaData.FireInformation(1000, "Update Waterfall template", r.InnerXml, "", 0, ref bFireAgain);
            StringBuilder sb = new StringBuilder("Row" + r.RowIndex.ToString() + ">");
            foreach (Cell c in r)
            {
                string sCellValue;
                if (c != null) //{ sb.Append("cell=null;"); }
                //else
                {
                    sCellValue = GetCellValue(c, _sharedStringTablePart);
                    //ComponentMetaData.FireInformation(1000, "After GetCellValue:", sCellValue, "", 0, ref bFireAgain);
                    sb.Append(sCellValue).Append(";");
                }
            }
            sMsg = sb.ToString();
            sb = null;
        }
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        if (r.RowIndex > 40) break;

    }
    */
    /*
                 var StartCell = GetCellByCellValue(_sheetData, _sharedStringTablePart, "REPORT DATE");
                sMsg = string.Format("CellName={0}, CellReference={1}", StartCell.LocalName,  StartCell.CellReference.ToString());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                var NextCell = (Cell)StartCell.NextSibling();
                sMsg = string.Format("CellName={0}, CellReference={1}", NextCell.LocalName, NextCell.CellReference.ToString());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                Row l = (Row)StartCell.Parent;
                sMsg = l.RowIndex.ToString();
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);


                IEnumerable<Cell> cells = GetFilledColumnCellRange(_sheetData, "B36");

                sMsg = GetCellRangeNames(cells);
                ComponentMetaData.FireInformation(1000, "Update Waterfall column cells", sMsg, "", 0, ref bFireAgain);

     */


]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.resx]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Settings.get_Default():SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Sett" +
    "ings")]

namespace SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.settings]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\assemblyinfo.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_aa7969bb20d54f10acdfc2649c1794fb.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_aa7969bb20d54f10acdfc2649c1794fb.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_aa7969bb20d54f10acdfc2649c1794fb.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\bufferwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes)
        : base(Buffer, BufferColumnIndexes)
    {
    }

    public String VariableSetCode
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool VariableSetCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public Int64 DimReportingDateId
    {
        get
        {
            return Buffer.GetInt64(BufferColumnIndexes[1]);
        }
    }
    public bool DimReportingDateId_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public BlobColumn Value
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[2]];
        }
    }
    public bool Value_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String VariableName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool VariableName_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String DataType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool DataType_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public String VariableType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
    }
    public bool VariableType_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\sc_aa7969bb20d54f10acdfc2649c1794fb.csproj]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>SC_aa7969bb20d54f10acdfc2649c1794fb.csproj</RootNamespace>
    <AssemblyName>SC_aa7969bb20d54f10acdfc2649c1794fb.csproj</AssemblyName>
    <ProjectGuid>{A8BCEE84-6561-47C4-8CD6-83954A962CD6}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.0.5022.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase">
      <RequiredTargetFramework>3.0</RequiredTargetFramework>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Compile Include="main.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to the add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptComponent</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\componentwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, PipelineBuffer Buffer)
    {

        if (InputID == 33)
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID)));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String DimReportingDateID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["DimReportingDateID"].Value);
        }
    }

    public String SheetName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["SheetName"].Value);
        }
    }

    public String StartCellValue
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["StartCellValue"].Value);
        }
    }

    public String TrustID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["TrustID"].Value);
        }
    }

    public String WaterfallTemplateFileName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplateFileName"].Value);
        }
    }

    public String WaterfallTemplatePath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplatePath"].Value);
        }
    }

    public String InputRange
    {
        get
        {
            return (String)(ParentComponent.ReadWriteVariables["_InputRange"].Value);
        }
        set
        {
            ParentComponent.ReadWriteVariables["_InputRange"].Value = value;
        }
    }

}
]]></arrayElement></arrayElements></property>
<property id="36" name="BinaryCode" dataType="System.String" state="cdata" isArray="true" description="Stores the binary representation of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="2"><arrayElement dataType="System.String"><![CDATA[\bin\release\sc_aa7969bb20d54f10acdfc2649c1794fb.csproj.dll]]></arrayElement><arrayElement dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGxiZFQAAAAAAAAAAOAAAiELAQgAAFgAAAAIAAAAAAAA7ncA
AAAgAAAAgAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAADAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKB3AABLAAAAAIAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA9FcAAAAgAAAAWAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAgAAAAAYAAABaAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAYAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADQ
dwAAAAAAAEgAAAACAAUAWD4AAEg5AAABAAAAAAAAAKA9AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnNZAAAGfQEAAAQCAnNaAAAGfQIAAAQqZgMf
ITMTAgQCAygOAAAKc0MAAAZvAwAABipKKwcCA28EAAAGA29QAAAGLfEqBipeA28RAAAKKBIAAAoC
ew0AAAQoEwAACioAAzAFAE0BAAAAAAAAAigUAAAKAgJ7AgAABG9bAAAGfQMAAAQCAnsCAAAEb14A
AAZ9EAAABAICewIAAARvXQAABn0OAAAEAgJ7AgAABG9fAAAGfQQAAAQCAnsCAAAEb2AAAAZ9BQAA
BAICewIAAARvXAAABn0NAAAEAgJ7BQAABHIBAABwAnsEAAAEKBUAAAp9BgAABAICewYAAAQXKBYA
AAp9BwAABAICewcAAARvFwAACm8YAAAKbwEAACsC/gYJAAAGcxoAAAooAgAAK30IAAAEAgJ7CAAA
BG8cAAAKfQwAAAQCewgAAAQtFnIFAABwAnsNAAAEKB0AAApzHgAACnoCAnsHAAAEbxcAAAoCewwA
AAQoEgAACm8fAAAKdAgAAAF9CQAABAICewkAAARvIAAACm8DAAArfQoAAAQCAnsHAAAEbxcAAApv
BAAAKygFAAArfQsAAAQqAAAAAzACAF0AAAAAAAAAAigkAAAKAnsCAAAEAnsYAAAEb2IAAAYCewkA
AARvIAAACm8lAAAKAhR9CwAABAIUfQoAAAQCFH0JAAAEAhR9CAAABAJ7BwAABG8mAAAKAhR9BwAA
BAIUfREAAAQqAAAAEzAHALsDAAABAAARFwpySwAAcAsDb04AAAZvJwAACnJNAABwKBMAAAotGgNv
TgAABm8nAAAKclkAAHAoEwAACjlzAwAAA29IAAAGFgNvSAAABm8oAAAKKCkAAApvKgAACgwoKwAA
CghvLAAACm8tAAAKDXJzAABwAnwPAAAEKC4AAAoJKC8AAAoLAigwAAAKIOgDAAByhwAAcAdySwAA
cBYSAG8xAAAKAnsPAAAEOhkCAAACewoAAAQCewsAAAQCew4AAAQoNwAABhMEEQQtL3K7AABwAnsO
AAAEKB0AAAoLAigwAAAKIOgDAAByhwAAcAdySwAAcBYSAG8xAAAKAgJ7CgAABAJ7CwAABBEEcwoA
AAZ9EQAABHIFAQBwG40CAAABEwYRBhYCexEAAARvCwAABnJLAQBwbzIAAApvMAAABqIRBhcCexEA
AARvCwAABnJNAABwbzIAAApvMAAABqIRBhgCexEAAARvCwAABnJjAQBwbzIAAApvMAAABqIRBhkC
exEAAARvCwAABnJZAABwbzIAAApvMAAABqIRBhoCexEAAARvCwAABnJxAQBwbzIAAApvMAAABqIR
BigzAAAKCwIoMAAACiDoAwAAcocAAHAHcksAAHAWEgBvMQAACgJ7EQAABG8LAAAGLSICKDAAAAog
6AMAAHKHAABwcokBAHBySwAAcBYSAG8xAAAKAnsRAAAEbxIAAAYmAnsRAAAEbw0AAAYmAnsRAAAE
cksBAHBvEQAABiYgbAcAABcXczQAAAomcksAAHATBQJ7AwAABG81AAAKHjIzcrcBAHACewMAAAQa
GG82AAAKAnsDAAAEHBhvNgAACgJ7AwAABBYabzYAAAooNwAAChMFcs8BAHARBSgdAAAKCwIoMAAA
CiDoAwAAcocAAHAHcksAAHAWEgBvMQAACgJ7EQAABBEFcvMBAHBvFgAABiYCexEAAARvDwAABjnc
AAAAA29OAAAGAnsRAAAEbxUAAAYoEwAACiwVAnsRAAAECQNvTAAABm8WAAAGJitAcv0BAHADb0oA
AAYDb04AAAYCexEAAARvFQAABig3AAAKCwIoMAAACiDoAwAAcocAAHAHcksAAHAWEgBvMQAACgJ7
EQAABHJNAABwbxgAAAYsXQNvTgAABnJNAABwKBMAAAosSwICexEAAARvGgAABm84AAAKbzkAAAp9
GAAABAIoMAAACiDoAwAAcnkCAHAHAnsYAAAEFhIAbzEAAAoCexEAAARyWQAAcG8RAAAGJgIlew8A
AAQXWH0PAAAEKkoCcksAAHB9GAAABAIoAQAABioAABMwBgBbAQAAAgAAEQJzOgAACn0bAAAEAig7
AAAKAgN9GQAABAIEfRoAAAQFbzgAAAooEgAACigzAAAGF1kKAgJ7GQAABAYoNAAABn0eAAAEAnsb
AAAEcksBAHACFnJLAQBwAnseAAAEKAwAAAZvPAAACgJ7GwAABHJNAABwAgJ7GwAABHJLAQBwbzIA
AApvLQAABhdYck0AAHACex4AAAQoDAAABm88AAAKAnsbAAAEcmMBAHACAnsbAAAEck0AAHBvMgAA
Cm8tAAAGF1hyYwEAcAJ7HgAABCgMAAAGbzwAAAoCexsAAARyWQAAcAICexsAAARyYwEAcG8yAAAK
by0AAAYXWHJZAABwAnseAAAEKAwAAAZvPAAACgJ7GwAABHJxAQBwAgJ7GwAABHJZAABwbzIAAApv
LQAABhdYcnEBAHACex4AAAQoDAAABm88AAAKAgJ7GQAABAYXWCg0AAAGfR0AAAQqHgJ7GwAABCoA
EzAHADsBAAADAAARFgoWC3JLAABwDHJLAABwDXJLAABwEwVySwAAcBMGcksAAHATB3JLAABwEwgU
EwlzPQAAChMKBW8GAAArKAcAACsTCwMTDDi6AAAABW8GAAArEQwoCAAAKxMEEQQCexoAAAQoQgAA
Bm9AAAAKEwcRBG84AAAKb0AAAAoTCBEHEQUoQQAACiwQEQcEKBMAAAosBhEIDBEMChEHEQUoQQAA
CiwUEQUEKBMAAAosChEGDREMF1kLK1oRBwQoEwAACiwfEQoSDCguAAAKEQRvOAAACm85AAAKKDIA
AAZvQgAAChEMEQsXWTMGEQgNEQwLEQcTBREEbzgAAApvQAAAChMGEQwXWBMMEQwRCxdZPjv///8I
cksAAHAoQQAACiwbCXJLAABwKEEAAAosDgQGCAcJEQpzJAAABhMJEQkqABswAwA6AAAABAAAEQJ7
HQAABAoWCwICexkAAAQCex0AAARvQwAACm9EAAAKKDQAAAZ9HQAABBcL3gomAgZ9HQAABN4AByoA
AAEQAAAAAAkAJS4ACgIAAAETMAQATQAAAAUAABEWCgJ7HQAABG9DAAAKKEUAAAoYWQJ7HgAABG9D
AAAKKEUAAAo2JQICexkAAAQCex0AAARvQwAACm9EAAAKGFkoNAAABn0dAAAEFwoGKgAAABMwAwAz
AAAABQAAERYKAnsfAAAEF1gCexsAAARycQEAcG8yAAAKby0AAAYwEAIlex8AAAQXWH0fAAAEFwoG
KgATMAMAMwAAAAUAABEWCgJ7HwAABBdZAnsbAAAEcksBAHBvMgAACm8rAAAGMBACJXsfAAAEF1l9
HwAABBcKBipmAgJ7GwAABANvMgAACm8rAAAGfR8AAAQXKgAAABMwAwBvAAAABgAAEQJ7GwAABHJL
AQBwbzIAAApvJwAABig4AAAGCwJ7GQAABAcSACg7AAAGDAgsQAhvRgAAChYxNwgoCQAAKxMFEgUo
SAAACg0JbzgAAAooEgAACigzAAAGF1kTBAICexkAAAQRBCg0AAAGfR0AAAQXKgAbMAIALQAAAAcA
ABECex0AAARvBgAAKwJ7HwAABCgIAAArCgYCexoAAAQoQgAABgveBSYUC94AByoAAAABEAAAAAAA
ACYmAAUCAAABGzACACMAAAAHAAARAnsZAAAEAyg2AAAGCgYCexoAAAQoQgAABgveBSYUC94AByoA
ARAAAAAAAAAcHAAFAgAAARMwAgAkAAAACAAAEQJ7HgAABG8GAAArAnsfAAAEKAgAACsKBgJ7GgAA
BChCAAAGKhswBACLAAAACQAAEQJ7HQAABG8GAAArAnsfAAAEKAgAACsKAnsdAAAEb0MAAApvRAAA
ChdZAnseAAAEb0MAAApvRAAACjE4AnsZAAAEAnsdAAAEb0MAAApvRAAAChhZKDQAAAYLB28GAAAr
AnsfAAAEKAgAACsMCAYoQAAABiYCexoAAAQGAwQoPgAABg3eBSYWDd4ACSoAARAAAAAAAACEhAAF
AgAAARswBAAuAQAACgAAEQJ7HQAABG8GAAArAnsfAAAEKAgAACsKAnsdAAAEb0MAAApvRAAAChdZ
AnseAAAEb0MAAApvRAAACj7iAAAAAnsZAAAEAnseAAAEb0MAAApvRAAACig0AAAGCwdvBgAAKwJ7
HwAABCgIAAArDAhvSQAACjmpAAAACG84AAAKbzkAAAooMwAABhMKEgooLgAACg0GbzgAAApvOQAA
CigzAAAGEwsSCyguAAAKEwQIb0kAAApvSgAACm85AAAKEwUIb0kAAApvSwAAChMGc0wAAAoTCBEI
EQUJEQRvTQAACihOAAAKb08AAAoRCBcoUAAACm9RAAAKEQgTBxEHEQYJEQRvTQAACm9SAAAKBheN
JAAAARMMEQwWEQeiEQxvUwAAChcTCd4GJhYTCd4AEQkqAABBHAAAAAAAAAAAAAAlAQAAJQEAAAYA
AAACAAABEzADAB8AAAAFAAARFgoCex8AAAQCexsAAAQDbzIAAApvLQAABjMCFwoGKgATMAMAHwAA
AAUAABEWCgJ7HwAABAJ7GwAABANvMgAACm8rAAAGMwIXCgYqXgJ7HQAABG8GAAArAnsfAAAEKAgA
ACsqHgIoOwAACipuA284AAAKbzkAAAoCey8AAAQXKFQAAAoW/gEqABswBAA/AAAACwAAERQKc2MA
AAYLBwN9LwAABAJ7HQAABG8GAAArBi0NB/4GZAAABnNVAAAKCgYoCgAAKygLAAArDN4FJhQM3gAI
KgABEAAAAAAPACk4AAUCAAABHgJ7HwAABCoeAnsdAAAEKh4Cex4AAAQqEzADAPUBAAACAAARFgoC
ex8AAAQCexsAAARyTQAAcG8yAAAKbysAAAYyPAJ7HwAABAJ7GwAABHJNAABwbzIAAApvLQAABjAf
AnsfAAAEAnsbAAAEck0AAHBvMgAACm8rAAAGWRdYCgJ7HwAABAJ7GwAABHJjAQBwbzIAAApvKwAA
BjJUAnsfAAAEAnsbAAAEcmMBAHBvMgAACm8tAAAGMDcCexsAAARyTQAAcG8yAAAKbzEAAAYKBgJ7
HwAABFgCexsAAARyYwEAcG8yAAAKbysAAAZZF1gKAnsfAAAEAnsbAAAEclkAAHBvMgAACm8rAAAG
MmoCex8AAAQCexsAAARyWQAAcG8yAAAKby0AAAYwTQJ7GwAABHJNAABwbzIAAApvMQAABgJ7GwAA
BHJjAQBwbzIAAApvMQAABlgKBgJ7HwAABFgCexsAAARyWQAAcG8yAAAKbysAAAZZF1gKAnsfAAAE
AnsbAAAEcnEBAHBvMgAACm8rAAAGP4AAAAACex8AAAQCexsAAARycQEAcG8yAAAKby0AAAYwYwJ7
GwAABHJNAABwbzIAAApvMQAABgJ7GwAABHJjAQBwbzIAAApvMQAABlgCexsAAARyWQAAcG8yAAAK
bzEAAAZYCgYCex8AAARYAnsbAAAEcnEBAHBvMgAACm8rAAAGWRdYCgYqHgIoOwAACio2DwAoWAAA
Cm8rAAAGKjYPAChZAAAKKFoAAAoqbgNvOAAACm85AAAKAnswAAAEFyhUAAAKFv4BKgAAABswBACg
AQAADAAAERQTB3NlAAAGEwgRCHJLAABwfTAAAAQUCgJ7GwAABH4gAAAELREU/gYiAAAGc1sAAAqA
IAAABH4gAAAEKAwAACtvXQAAChMJODgBAAARCW9eAAAKCxIBKFgAAApvLwAABn4hAAAELREU/gYj
AAAGc18AAAqAIQAABH4hAAAEKA0AACtvYAAAChMKONwAAAARCm9hAAAKDBEIEgIoYgAACgJ7HQAA
BG9DAAAKb0AAAAooYwAACn0wAAAEBiwMBm84AAAKbzkAAAomAnsdAAAEbwYAACsRBy0PEQj+BmYA
AAZzVQAAChMHEQcoCgAAKygOAAArDQktPXNkAAAKEwQRBBEIezAAAAQoTgAACm9lAAAKEQQNBi0P
AnsdAAAECW8PAAArJisOAnsdAAAECQZvEAAAKyYJCt4zJnNkAAAKEwYRBhEIezAAAAQoTgAACm9l
AAAKEQYTBQJ7HQAABBEFBm8QAAArJhEFCt4AEQpvaAAACjoY////3gwRCiwHEQpvaQAACtwRCW9o
AAAKOrz+///eDBEJLAcRCW9pAAAK3BcqQUwAAAAAAADIAAAAbwAAADcBAAAzAAAAAgAAAQIAAACJ
AAAA7wAAAHgBAAAMAAAAAAAAAAIAAABHAAAASwEAAJIBAAAMAAAAAAAAABMwAgApAAAADQAAEXJL
AABwCgJ7HgAABG8GAAArAygIAAArbzgAAApvOQAACgoGKDIAAAYq0gIoOwAACgIDfSIAAAQCBH0j
AAAEAgV9JAAABAIOBH0lAAAEAg4FfSYAAAQCDgZ9KAAABCoeAnsiAAAEKiICA30iAAAEKh4CeyQA
AAQqIgIDfSQAAAQqHgJ7JgAABCoiAgN9JgAABCoeAnsjAAAEKiICA30jAAAEKh4CeyUAAAQqIgID
fSUAAAQqHgJ7KAAABCpeAnskAAAEcsMCAHACeyYAAAQoFQAACipCAnslAAAEAnsjAAAEWRdYKhMw
AgAaAAAADgAAEXLHAgBwc2oAAAoKBgJvawAACgsHb2wAAAoqAAATMAIAHwAAAA4AABFy2wIAcHNq
AAAKCgYCb2sAAAoLB29sAAAKKFoAAAoqNgJvEQAAKwMoEgAAKyoAAAATMAIASAAAAA0AABEUCgJv
bQAACgoCb24AAAosNQJvbgAACm9vAAAKLCgCb24AAApvcAAAChkzGgMsFwNvcQAACgYoWgAACigT
AAArb20AAAoKBioeAig7AAAKKm4DbzgAAApvOQAACgJ7MQAABBcoVAAAChb+ASoTMAQAKgAAAA8A
ABFzZwAABgoGA30xAAAEAm8GAAArBv4GaAAABnNVAAAKKAoAACsoCwAAKyoeAig7AAAKKmIDAnsy
AAAEKDUAAAYCezMAAAQoEwAACioAEzAEADEAAAAQAAARc2kAAAYKBgN9MgAABAYEfTMAAAQCbwYA
ACsG/gZqAAAGc1UAAAooCgAAKygOAAArKgAAABMwAwAcAAAAAgAAEQIoMgAABgIoMwAABhdYChIA
KC4AAAooYwAACioTMAMAHAAAAAIAABECKDIAAAYCKDMAAAYXWQoSACguAAAKKGMAAAoqHgIoOwAA
CipiAwJ7NAAABCg1AAAGAns1AAAEKBMAAAoqYgMCezQAAAQoNQAABgJ7NQAABCgTAAAKKgAAEzAE
AK0AAAARAAARc2sAAAYMCAN9NAAABAgEfTUAAARzcgAACgoCbwYAACsI/gZsAAAGc1UAAAooCgAA
KygOAAArCwYHbzgAAAooEgAACigyAAAGb3MAAAoPAyguAAAKb3MAAApywwIAcG9zAAAKJhQLAm8G
AAArCP4GbQAABnNVAAAKKAoAACsoFAAAKwsGB284AAAKKBIAAAooMgAABm9zAAAKDwMoLgAACm9z
AAAKJgZvQAAACioeAig7AAAKKuYDbzgAAApvOQAACigyAAAGAns2AAAEFyhUAAAKLRkDbzgAAAoo
EgAACigzAAAGAns3AAAE/gIqFipGAm84AAAKKBIAAAooMwAABioAAAAbMAQA3QAAABIAABFzbgAA
BhMEEQQDKDIAAAZ9NgAABHNyAAAKChEEAygzAAAGfTcAAARzdAAACgsCbwYAACsRBP4GbwAABnNV
AAAKKAoAACt+KQAABC0RFP4GPQAABnN1AAAKgCkAAAR+KQAABCgVAAArDAgsaAgoBwAAKxYxXwhv
dgAAChMFKz4RBW93AAAKDQlveAAACiwuBwlvOAAACigSAAAKCW95AAAKBglvOAAACm85AAAKb3MA
AApy4wIAcG9zAAAKJhEFb2gAAAotud4MEQUsBxEFb2kAAArcBAZvQAAAClEHKgAAAAEQAAACAHwA
S8cADAAAAAAbMAIAXgAAABMAABFzcgAACgoCKAcAACsWMUgCb3YAAAoMKysIb3cAAAoLB294AAAK
LBwGB284AAAKbzkAAApvcwAACnLjAgBwb3MAAAomCG9oAAAKLc3eCggsBghvaQAACtwGb0AAAAoq
AAABEAAAAgAWADdNAAoAAAAAEzAEAIcBAAAUAAARBSULOX0BAAD+E344AAAELWEdc3oAAAolcucC
AHAWKHsAAAolcvUCAHAXKHsAAAolcv0CAHAYKHsAAAolcvMBAHAZKHsAAAolcg8DAHAaKHsAAAol
ch8DAHAbKHsAAAolci8DAHAcKHsAAAr+E4A4AAAE/hN+OAAABAcSAih8AAAKOf8AAAAIRQcAAAAF
AAAAFgAAACcAAAA4AAAASQAAAFoAAAC3AAAAONgAAAADBHN9AAAKb34AAAo4xwAAAAMEc30AAApv
fgAACji2AAAAAwRzfQAACm9+AAAKOKUAAAADBHN9AAAKb34AAAo4lAAAAAMEc30AAApvfgAACjiD
AAAABG8nAAAKcj0DAHAoEwAACiwIckcDAHAKKwZySwMAcAoDb24AAAosGwNvbgAACih/AAAKLQ4D
BnN9AAAKb34AAAorQAMWKIAAAApvgQAACgMGc30AAApvfgAACismAxlzggAACm+BAAAKAwIEKD8A
AAYNEgMoLgAACnN9AAAKb34AAAoXKgAbMAUAfQAAABUAABEWCgIsRAJvcQAACm8WAAArb4QAAAoN
Kx0Jb4UAAAoLB29tAAAKAygTAAAKLAQGDN5KBhdYCglvaAAACi3b3goJLAYJb2kAAArcAm9xAAAK
F40kAAABEwQRBBYDc4YAAAqiEQRzhwAACm8XAAArJgJvcQAACm8lAAAKBioIKgAAAAEQAAACABYA
KT8ACgAAAAATMAUANgAAABYAABEXCgJyTwMAcHJLAABwb4kAAAoLA3JPAwBwcksAAHASASiKAAAK
b0AAAApziwAACm+MAAAKBioAABMwAgAQAAAABQAAERcKAwJvSQAACm+NAAAKBioTMAIASAAAAA0A
ABEUCgJvbQAACgoCb24AAAosNQJvbgAACm9vAAAKLCgCb24AAApvcAAAChkzGgMsFwNvcQAACgYo
WgAACigTAAArb20AAAoKBiomAgMEKI4AAAoqUgJ7jwAACgJ7kAAAChaUb5EAAAoqIgIWKJIAAAoq
UgJ7jwAACgJ7kAAACheUb5MAAAoqIgIXKJIAAAoqZgJ7jwAACgJ7kAAAChiUb5QAAAp0EAAAASoi
AhgokgAACipSAnuPAAAKAnuQAAAKGZRvkQAACioiAhkokgAACipSAnuPAAAKAnuQAAAKGpRvkQAA
CioiAhookgAACipSAnuPAAAKAnuQAAAKG5RvkQAACioiAhsokgAACioeAiiVAAAKKh4CKJYAAAoq
Gn4qAAAEKi5zUwAABoAqAAAEKh4CKJcAAAoqHgIoOwAACioAABMwAwAtAAAAFwAAEX4rAAAELSBy
UwMAcNALAAACKJkAAApvmgAACnObAAAKCgaAKwAABH4rAAAEKhp+LAAABCoeAoAsAAAEKjoCKDsA
AAoCA30tAAAEKjoCKDsAAAoCA30uAAAEKoICey4AAARvnQAACnLTAwBwb54AAApvnwAACnQhAAAB
KoICey4AAARvnQAACnL5AwBwb54AAApvnwAACnQhAAABKoICey4AAARvnQAACnINBABwb54AAApv
nwAACnQhAAABKoICey4AAARvnQAACnIrBABwb54AAApvnwAACnQhAAABKoICey4AAARvnQAACnI7
BABwb54AAApvnwAACnQhAAABKoICey4AAARvnQAACnJvBABwb54AAApvnwAACnQhAAABKoICey4A
AARvoAAACnKbBABwb54AAApvnwAACnQhAAABKnICey4AAARvoAAACnKbBABwb54AAAoDb6EAAAoq
AAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29y
bGliLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3
YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAA
AAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHYyLjAuNTA3MjcAAAAABQBsAAAARBQAACN+
AACwFAAAgBgAACNTdHJpbmdzAAAAADAtAAC0BAAAI1VTAOQxAAAQAAAAI0dVSUQAAAD0MQAAVAcA
ACNCbG9iAAAAAAAAAAIAAAFXFaIJCQsAAAD6ATMAFgAAAQAAAFAAAAAUAAAAOAAAAG8AAABQAAAA
oQAAABwAAAAXAAAABgAAAB0AAAAkAAAAFwAAAAEAAAAIAAAAAQAAAAYAAAAXAAAAAAAKAAEAAAAA
AAYASgEpAQoAagFjAQYAcQEpAQ4AkwF+ARIA0gEpARYAfQJcAhYAyQKmAhYA1gJcAhYA8wKmAhYA
CANcAhYANQNFAgoAIgQHBBYAPwSmAhYAcgSmAgoAxQcHBBIAfggpAQoAIgoRCgoAUwo+CgoAsQyS
DAoACQ33DAoAIA33DAoAPQ33DAoAXA33DAoAdQ33DAoAjg33DAoAqQ33DAoAxA33DAoA3Q33DAoA
Fg72DQoANg72DQYAkA4pAQoAyg72DQoA+g5jARYAGQ9cAhYANw+mAhYATQ9FAhoAdA9jARoAhw97
DwoArw9jARYAuQ9cAhYAzg9cAhYA5g+mAhYAGxBFAhYANxBcAgoAYRBjAQoAiRB9EAoArRBjAR4A
CRHgEAoAURFjARYAZBGmAhYAmxFFAhYAtBFFAgoA2BEHBBYA5xGmAhYAERJFAhYARxJFAhYAUxKm
AhoAZxN7DwoAhBMHBAoA7RPaEwoAAhRjAQ4ALRQOFA4AMxQOFA4AORQOFBYATxSmAhYAWhRFAhYA
eRSmAgoANxV9EBYAZgymAhYAaxamAhYAfBamAhYAjRZFAgoA8hbfFgoADxdjAQoAFBdjAQoAOBf3
DA4AZBdOFw4AfRdOFyIA3Re1FyIABBi1FwAAAAABAAAAAAABAAEAAQAQADkAAAAFAAEAAQABABAA
RwAAAAgAAwAFAAEAEABSAAAACQAZAAoAAQAQAGIAAAAJACIAJACBARAAeQAAAAkAKQAyAIEBEACI
AAAACQAqAD4AgQEQAJQAAAAJACoAQgABABAAoAAAAA0AKgBDAAABEACtALYAEQAqAFIAAAAQAOwA
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
igBJAIE9AAAAAIYIPgvTAEkACy4AAAAAhhirARsASgATLgAAAACGAJgS0gNKAKUwAAAAAIYYqwEb
AEsAyTAAAAAAhgDXEtIDSwCINAAAAACGGKsBGwBMAJA0AAAAAIYAtBTSA0wA4jQAAAAAhhirARsA
TQDqNAAAAACGANsU0gNNAJQ1AAAAAIYYqwEbAE4AnDUAAAAAhgAHFdIDTgC1NQAAAACGAB8V0gNP
AIk2AAAAAIYYqwEbAFAAkTYAAAAAhgBtFdIDUAAAAAEAvAsAAAIAxAsAAAEAxAsAAAEAPwQAAAEA
PwQAAAEAyA4AAAEAywsAAAIAzgsAAAMA0gsAAAEA2AsAAAIA8AYAAAMA4wsAAAEA5wsAAAEA9AsA
AAEAAgwAAAIACQwAAAEA5wsAAAEA5wsAAAEA9AsAAAEAEwwAAAEA9xIAAAEAMBMAAAEAHAwAAAIA
IgwAAAMA/AYAAAQAKwwAAAUACgcAAAYAMgwAAAEANwwAAAEANwwAAAEANwwAAAEANwwAAAEANwwA
AAEAPQwAAAEAPQwAAAEAywsAAAIARwwAAAEAUAwAAAIAWAwAAAEAywsAAAIAXQwAAAEAywsAAAIA
WAwAAAMAZgwAAAEAPQwAAAEAPQwAAAEAywsAAAIAWAwAAAMAcAwAAAQARwwAAAEAywsAAAIAewwC
AAMAiQwAAAEAvgwAAAEAqxUAAAEAWAwAAAIAxAwAAAMAAgwAAAQACQwAAAEAWAwAAAIAAgwAAAEA
yQwAAAIA0gwAAAEAyQwAAAIA0gwAAAEAUAwAAAIAWAwAAAEAxAsAAAIA2QwAAAEANwwAAAEA7QwA
AAEA7QwAAAEANwwAAAEAphIAAAEAphIAAAEAphIAAAEAphIAAAEAphIAAAEAphIAAAEAphKZAKsB
GwChAKsB0wCpAKsB0wCxAKsB0wC5AKsB0wDBAKsB0wDJAKsB0wDRAKsB0wDZAKsB0wDhAKsB0wDp
AKsB2ADxAKsBGwAJAKsBGwAJAH8OtwH5AKsBGwABAasBGwA5AOUOyAFZAO4OzQEJAQEP0wEJAPAD
GwAJAQ0P2QExABQP4AExACYP5wERAUAP7QEhAVwP8wEMAKsBCwIxAZIPEQI5AKEPyAEJAagPJQI5
AasB0wBBAdoPKwJBAPAPMgIhAf4POAJBAQwQ8wExAZIPSAIJAPsDGwBZATIQGwBhAUYQGwAJAU4Q
igCBAFYQVAJpAWkQWAKBAHEQXQJxAZIQZAJxAZ4QagIJAagQigB5AbMQigAJAagPcAIJACIRdwKB
ATgRfQIUAEgRkAIJAagPlwKJAasBngIJAVYQpAAJAVoRpQIJAagPqwKRAW0RyAFZAIkIigAUAKsB
GwARAKsBGwAUAH8RwAIcAKsBGwAxAW8D2AIxAYMR4wIRALMQigAJAY0R0wEcAH8RwAJpAKcRBwMk
AIkIFAOZAe4OHwMsAMkRpAAxAdMRSAI0AIkIRgORAfMRdwOxAQMSyAG5ASgSigCxAasBGwAJATES
fQNZAO4OgwOxATkSiQM8AO4OmAOxAWUSpAO5AXUS0wAhAX4SsAMJAagS2ANEAKsBCwIxAbAS6AMx
AbYSSAJMAIkIRgNUAFkTFAN5AWET/ABcAKsBCwIxAXwTZQRkAJITmARsAKATFAN0AKsBCwJ8AJIT
mASEAKATFANUAIkIRgMJAQ0P4gRxAKsBGwCRAawTiQMhAb4T6AQhAc4T8AThAfkTgQDpAUYQGwDx
AasB0wDxATMUPgUBAokIigAhAUEUigCRAc0IUwURAmwUgQCMAIkIFANRAIsUZwUhAqsBGwAhAn4S
fQUsAKsBGwCUAKsBCwKcAJITmASkAKATFAORAdQVvAUsAH8RwAKsAKsB2ACsAH8RwAKsADsW/gUp
AqsB0wCRAUcWBwaMAO4ODgaMAO4OmAORAVUWGgaMAKsBJgYhAWIW8wG0AJITmAS8AKATFAM5AqsB
0wAxAqsBsAMhAYEW6AQhAZ4WXgZBAokIigBBAqsBZgYhAasWbQaRAbgWewYZAKsBXwEZAMQLggYZ
ANkMhgYpAJ4QrQAZAMgWigYpAM8WjwYpAEgRlAYZABcJgQAZAB8JgQAhAKsBGwBJAqsBGwBRAiYX
nQZRAkEXpgaJAKsBrAZpAqsBuQYJAO4XyQZ5AkgRzwaBAokI1gYJABQYyQaBAisY2gYuAFsALAcu
ABsADwcuACMADwcuAEMADwcuABMA3wYuAGMANQcuACsADwcuADMA3wYuADsAFQdjAHsAvQEgAYMA
vQFjAcMEvQHDAYMAvQHjAYMAvQEDAoMAvQEjAoMAvQFDAoMAvQFjAoMAvQGDAoMAvQGpAuMEwAbJ
AuMEwAYBBIMAvQEhBIMAvQFABIMAvQFgBIMAvQEhBYMAvQFBBYMAvQGgB4MAvQGzAsgC8AIZAyYD
SwNiA2gDbQO4AwAE+wQ6BUUFcwV4BYQFwgXgBSwGSgZ0BrQGBAABAAUAAgAJAAgACgAUAAsAFQAN
ABcAAACtBbIAAADwBuYAAAD8BuYAAAAKB+YAAAAWB+oAAAAkB+oAAAAwB+4AAAArCeYAAAA7CXAB
AABSCXQBAABlCXABAAB/CXgBAACFCXABAACSCeYAAACfCXABAACzCeYAAAC8CXABAADMCeYAAADZ
CXABAAAJCoYBAAAiCqMBAACbCqgBAABNC+YAAABgC+YAAABqC+YAAAB5C+YAAACBC+YAAACbC+YA
AACxC+YAAgALAAMAAgAlAAUAAQAmAAUAAgAnAAcAAQAoAAcAAgApAAkAAQAqAAkAAQAsAAsAAgAr
AAsAAgAtAA0AAQAuAA0AAgAvAA8AAgBEABEAAgBFABMAAgBGABUAAgBHABcAAgBIABkAAgBJABsA
AgBKAB0AAgBLAB8AAgBMACEAAgBNACMAAgBOACUAAgBPACcAAgBSACkAAgBWACsAAgBXAC0AAQBY
AC0AAgBbAC8AAgBcADEAAgBdADMAAgBeADUAAgBfADcAAgBgADkAAgBhADsAAQBiADsAAgKIAswC
DQMqAz0DjwPfA0UETgRWBIsEogSwBMkE1QReBZ4FrQW0BfcFOQZBBgSAAAABAAAANhVOhAAAAAAA
AFQOAAAKAAAAAAAAAAAAAAABAAwBAAAAAAIAAAAAAAAAAAAAAAoAWgEAAAAAAgAAAAAAAAAAAAAA
CgBjAQAAAAAKAAAAAAAAAAAAAAABALEBAAAAAAIAAACeEwAAAAAAAC8ARQIAAAAAAwAFAAAAAAAA
AAAACgBoDwAAAAAKAAAAAAAAAAAAAAABALwQAAAAAAoAAAAAAAAAAAAAAAEAkhcAAAAAAAAAAAEA
AAA1GAAADgAEAA8ABAAQAAYAEQAGABIABgATAAYAMwD9ATcA/QFDAD4CRQBDAkcAQwIzANMCfQDT
An8A0wKPADIDrQDTAq8A0wK5AH8EuQC+BEcA0wLNANMCzwDTAjMATgV/AE4FfwBtBY8A0wK5AKcF
BwEzBhEBMwYAAAA8TW9kdWxlPgBTQ19hYTc5NjliYjIwZDU0ZjEwYWNkZmMyNjQ5YzE3OTRmYi5j
c3Byb2ouZGxsAFVzZXJDb21wb25lbnQAU2NyaXB0TWFpbgBXYXRlcmZhbGxSZXBvcnQAV2F0ZXJm
YWxsUmVwb3J0U2VjdGlvbgBFeGNlbE5hdmlnYXRvcgBFeGNlbFdyaXRlcgBFeGNlbFJlYWRlcgBJ
bnB1dDBCdWZmZXIAU2V0dGluZ3MAU0NfYWE3OTY5YmIyMGQ1NGYxMGFjZGZjMjY0OWMxNzk0ZmIu
Y3Nwcm9qLlByb3BlcnRpZXMAUmVzb3VyY2VzAENvbm5lY3Rpb25zAFZhcmlhYmxlcwBNaWNyb3Nv
ZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFNj
cmlwdENvbXBvbmVudABtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFNjcmlwdEJ1ZmZlcgBTeXN0ZW0u
Q29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQAuY3RvcgBNaWNyb3NvZnQuU3Fs
U2VydmVyLlBpcGVsaW5lSG9zdABQaXBlbGluZUJ1ZmZlcgBQcm9jZXNzSW5wdXQASW5wdXQwX1By
b2Nlc3NJbnB1dABJbnB1dDBfUHJvY2Vzc0lucHV0Um93AF9SZXBvcnRpbmdEYXRlAF9zRmlsZU5h
bWUAX3NGaWxlUGF0aABfc0ZpbGUARG9jdW1lbnRGb3JtYXQuT3BlblhtbABEb2N1bWVudEZvcm1h
dC5PcGVuWG1sLlBhY2thZ2luZwBTcHJlYWRzaGVldERvY3VtZW50AF9zcHJlYWRzaGVldERvY3Vt
ZW50AERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwuU3ByZWFkc2hlZXQAU2hlZXQAX3NoZWV0AFdvcmtz
aGVldFBhcnQAX3dvcmtzaGVldFBhcnQAU2hlZXREYXRhAF9zaGVldERhdGEAU2hhcmVkU3RyaW5n
VGFibGVQYXJ0AF9zaGFyZWRTdHJpbmdUYWJsZVBhcnQAU3RyaW5nVmFsdWUAX3NoZWV0UmVmZXJl
bmNlSWQAX3NTaGVldE5hbWUAX1N0YXJ0Q2VsbFZhbHVlAENvdW50AF9UcnVzdElEAF93cgBfc0lu
cHV0UmFuZ2UAX3NPdXRwdXRSYW5nZQBfc2hlZXRfbWV0YQBfc2hlZXRSZWZlcmVuY2VJZF9tZXRh
AF93b3Jrc2hlZXRQYXJ0X21ldGEAX3NoZWV0RGF0YV9tZXRhAF9JbnB1dFJhbmdlAFByZUV4ZWN1
dGUAUG9zdEV4ZWN1dGUAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMARGljdGlvbmFyeWAyAF9S
ZXBvcnRTZWN0aW9ucwBSb3cAX3JDb2x1bW5OYW1lAF9yRGF0YQBfclJvd1R5cGUAX0N1cnJlbnRD
b2xJbmRleABDZWxsAGdldF9SZXBvcnRTZWN0aW9ucwBHZXRSZXBvcnRTZWN0aW9uAE1vdmVUb05l
eHRSb3cATW92ZVRvUHJldlJvdwBNb3ZlVG9OZXh0Q2VsbABNb3ZlVG9QcmV2Q2VsbABNb3ZlVG9T
ZWN0aW9uRmlyc3RDZWxsAE1vdmVUb0xhc3RSb3cAR2V0Q2VsbFZhbHVlAEdldFZhbHVlVHlwZQBV
cGRhdGVDZWxsVmFsdWUAQ29weUZvcm11bGEASXNTZWN0aW9uTGFzdENvbHVtbgBJc1NlY3Rpb25G
aXJzdENvbHVtbgBHZXRDZWxsAENvbHVtbkluZGV4AEdldERhdGFSb3cAR2V0VHlwZVJvdwBHZXRS
ZXBvcnRDb2xJbmRleABWZXJpZnlSb3cAR2V0Q29sdW1uTmFtZQBSZXBvcnRTZWN0aW9ucwBfU2Vj
dGlvbk5hbWUAX0NvbFN0YXJ0SW5kZXgAX0NlbGxTdGFydE5hbWUAX0NvbEVuZEluZGV4AF9DZWxs
RW5kTmFtZQBfRmllbGRzQ291bnQAX0NvbE5hbWVMaXN0AGdldF9TZWN0aW9uTmFtZQBzZXRfU2Vj
dGlvbk5hbWUAZ2V0X0NlbGxTdGFydE5hbWUAc2V0X0NlbGxTdGFydE5hbWUAZ2V0X0NlbGxFbmRO
YW1lAHNldF9DZWxsRW5kTmFtZQBnZXRfQ29sU3RhcnRJbmRleABzZXRfQ29sU3RhcnRJbmRleABn
ZXRfQ29sRW5kSW5kZXgAc2V0X0NvbEVuZEluZGV4AGdldF9Db2xOYW1lTGlzdABHZXRTZWN0aW9u
UmFuZ2UAR2V0Q29sTnVtYmVyAFNlY3Rpb25OYW1lAENlbGxTdGFydE5hbWUAQ2VsbEVuZE5hbWUA
Q29sU3RhcnRJbmRleABDb2xFbmRJbmRleABDb2xOYW1lTGlzdABHZXRSb3dJbmRleABHZXRSb3cA
R2V0Q2VsbEJ5TmFtZQBHZXRDZWxsQnlDZWxsVmFsdWUAR2V0TmV4dEluQ29sQ2VsbE5hbWUAR2V0
UHJldkluQ29sQ2VsbE5hbWUAR2V0UmFuZ2VDZWxsTmFtZXMAR2V0RmlsbGVkQ29sdW1uQ2VsbFJh
bmdlAElFbnVtZXJhYmxlYDEAR2V0Q2VsbFJhbmdlTmFtZXMASW5zZXJ0U2hhcmVkU3RyaW5nSXRl
bQBDb3B5Q2VsbFN0eWxlAENvcHlDZWxsRm9ybXVsYQBnZXRfVmFyaWFibGVTZXRDb2RlAGdldF9W
YXJpYWJsZVNldENvZGVfSXNOdWxsAGdldF9EaW1SZXBvcnRpbmdEYXRlSWQAZ2V0X0RpbVJlcG9y
dGluZ0RhdGVJZF9Jc051bGwAQmxvYkNvbHVtbgBnZXRfVmFsdWUAZ2V0X1ZhbHVlX0lzTnVsbABn
ZXRfVmFyaWFibGVOYW1lAGdldF9WYXJpYWJsZU5hbWVfSXNOdWxsAGdldF9EYXRhVHlwZQBnZXRf
RGF0YVR5cGVfSXNOdWxsAGdldF9WYXJpYWJsZVR5cGUAZ2V0X1ZhcmlhYmxlVHlwZV9Jc051bGwA
TmV4dFJvdwBFbmRPZlJvd3NldABWYXJpYWJsZVNldENvZGUAVmFyaWFibGVTZXRDb2RlX0lzTnVs
bABEaW1SZXBvcnRpbmdEYXRlSWQARGltUmVwb3J0aW5nRGF0ZUlkX0lzTnVsbABWYWx1ZQBWYWx1
ZV9Jc051bGwAVmFyaWFibGVOYW1lAFZhcmlhYmxlTmFtZV9Jc051bGwARGF0YVR5cGUARGF0YVR5
cGVfSXNOdWxsAFZhcmlhYmxlVHlwZQBWYXJpYWJsZVR5cGVfSXNOdWxsAGRlZmF1bHRJbnN0YW5j
ZQBnZXRfRGVmYXVsdABEZWZhdWx0AFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJl
c291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVy
ZQBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAUGFy
ZW50Q29tcG9uZW50AGdldF9EaW1SZXBvcnRpbmdEYXRlSUQAZ2V0X1NoZWV0TmFtZQBnZXRfU3Rh
cnRDZWxsVmFsdWUAZ2V0X1RydXN0SUQAZ2V0X1dhdGVyZmFsbFRlbXBsYXRlRmlsZU5hbWUAZ2V0
X1dhdGVyZmFsbFRlbXBsYXRlUGF0aABnZXRfSW5wdXRSYW5nZQBzZXRfSW5wdXRSYW5nZQBEaW1S
ZXBvcnRpbmdEYXRlSUQAU2hlZXROYW1lAFN0YXJ0Q2VsbFZhbHVlAFRydXN0SUQAV2F0ZXJmYWxs
VGVtcGxhdGVGaWxlTmFtZQBXYXRlcmZhbGxUZW1wbGF0ZVBhdGgASW5wdXRSYW5nZQBJbnB1dElE
AEJ1ZmZlcgBzZABzc3QAc3RhcnQAU3RhcnRJbmRleAByb3cAc1NlY3Rpb25OYW1lAENlbGxSZWZl
cmVuY2UAc1ZhbHVlAHNEYXRhVHlwZQBDb2xJbmRleABzTmFtZQBDb2xTdGFydABDb2xFbmQATGlz
dAB2YWx1ZQBzQ2VsbE5hbWUAUm93SW5kZXgAdGhlQ2VsbABzc3RwAGNlbGxOYW1lAENlbGxWYWx1
ZQBzQ2VsbFZhbHVlAFN0YXJ0Q2VsbE5hbWUAQ2VsbExpc3QAU3lzdGVtLlJ1bnRpbWUuSW50ZXJv
cFNlcnZpY2VzAE91dEF0dHJpYnV0ZQBjZWxscwBjZWxsAEZyb21DZWxsAFRvQ2VsbABCdWZmZXJD
b2x1bW5JbmRleGVzAENvbXBvbmVudABTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1
dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
QXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU0NfYWE3OTY5YmIyMGQ1NGYxMGFjZGZjMjY0
OWMxNzk0ZmIuY3Nwcm9qAEdldENvbHVtbkluZGV4ZXMAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5
UG9pbnRBdHRyaWJ1dGUAPFByZUV4ZWN1dGU+Yl9fMABzAENvbXBpbGVyR2VuZXJhdGVkQXR0cmli
dXRlAGdldF9OYW1lAG9wX0ltcGxpY2l0AFN0cmluZwBvcF9FcXVhbGl0eQBDb25jYXQAT3BlbgBX
b3JrYm9va1BhcnQAZ2V0X1dvcmtib29rUGFydABXb3JrYm9vawBnZXRfV29ya2Jvb2sAT3Blblht
bEVsZW1lbnQARGVzY2VuZGFudHMAU3lzdGVtLkNvcmUARnVuY2AyAFN5c3RlbS5MaW5xAEVudW1l
cmFibGUARmlyc3RPckRlZmF1bHQAZ2V0X0lkAEZvcm1hdABFeGNlcHRpb24AT3BlblhtbFBhcnRD
b250YWluZXIAT3BlblhtbFBhcnQAR2V0UGFydEJ5SWQAV29ya3NoZWV0AGdldF9Xb3Jrc2hlZXQA
R2V0Rmlyc3RDaGlsZABHZXRQYXJ0c09mVHlwZQBPcGVuWG1sUGFydFJvb3RFbGVtZW50AFNhdmUA
T3BlblhtbFBhY2thZ2UARGlzcG9zZQBUb1VwcGVyAGdldF9MZW5ndGgAQ29udmVydABUb0ludDMy
AEdldEJsb2JEYXRhAFN5c3RlbS5UZXh0AEVuY29kaW5nAGdldF9Vbmljb2RlAEdldFN0cmluZwBU
cmltAEludDMyAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIASURUU0NvbXBvbmVudE1ldGFE
YXRhMTAwAGdldF9Db21wb25lbnRNZXRhRGF0YQBGaXJlSW5mb3JtYXRpb24AZ2V0X0l0ZW0ARGF0
ZVRpbWUAU3Vic3RyaW5nAENlbGxUeXBlAGdldF9DZWxsUmVmZXJlbmNlAEFkZABFbGVtZW50QXQA
b3BfSW5lcXVhbGl0eQBVSW50MzJWYWx1ZQBnZXRfUm93SW5kZXgAT3BlblhtbFNpbXBsZVZhbHVl
YDEAZ2V0X0NvdW50AExhc3QAS2V5VmFsdWVQYWlyYDIAQ2VsbEZvcm11bGEAZ2V0X0NlbGxGb3Jt
dWxhAGdldF9SZWZlcmVuY2UAT3BlblhtbExlYWZUZXh0RWxlbWVudABnZXRfVGV4dABSZXBsYWNl
AHNldF9SZWZlcmVuY2UARW51bVZhbHVlYDEAQ2VsbEZvcm11bGFWYWx1ZXMAc2V0X0Zvcm11bGFU
eXBlAHNldF9UZXh0AEFwcGVuZAA8PmNfX0Rpc3BsYXlDbGFzczMAPEdldENlbGw+Yl9fMQBjAENv
bXBhcmUAV2hlcmUARmlyc3QAPD5jX19EaXNwbGF5Q2xhc3NkAENlbGxSZWYAPFZlcmlmeVJvdz5i
X185ADxWZXJpZnlSb3c+Yl9fNwB3AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGVhADxWZXJpZnlSb3c+Yl9fOAB0AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGViAGdldF9LZXkAUGFyc2UASU9yZGVyZWRFbnVtZXJhYmxlYDEAT3JkZXJCeQBJRW51bWVyYXRv
cmAxAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJlbnQAc2V0X0NlbGxSZWZlcmVuY2UASW5zZXJ0QWZ0
ZXJTZWxmAEluc2VydEFmdGVyAFN5c3RlbS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBNb3ZlTmV4
dABJRGlzcG9zYWJsZQBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMAUmVnZXgATWF0Y2gA
Q2FwdHVyZQBnZXRfSW5uZXJUZXh0AENlbGxWYWx1ZXMAT3BlblhtbFNpbXBsZVR5cGUAZ2V0X0hh
c1ZhbHVlAFNoYXJlZFN0cmluZ1RhYmxlAGdldF9TaGFyZWRTdHJpbmdUYWJsZQA8PmNfX0Rpc3Bs
YXlDbGFzczEAPEdldENlbGxCeU5hbWU+Yl9fMAA8PmNfX0Rpc3BsYXlDbGFzczQAPEdldENlbGxC
eUNlbGxWYWx1ZT5iX18zADw+Y19fRGlzcGxheUNsYXNzOAA8R2V0UmFuZ2VDZWxsTmFtZXM+Yl9f
NgA8R2V0UmFuZ2VDZWxsTmFtZXM+Yl9fNwBTdHJpbmdCdWlsZGVyAHNTdGFyQ2VsbHRDb2x1bW5O
YW1lAGlTdGFydENlbGxSb3dJbmRleAA8R2V0RmlsbGVkQ29sdW1uQ2VsbFJhbmdlPmJfX2EAPEdl
dEZpbGxlZENvbHVtbkNlbGxSYW5nZT5iX19iAHIAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRo
b2REZWxlZ2F0ZWMAZ2V0X0NlbGxWYWx1ZQA8UHJpdmF0ZUltcGxlbWVudGF0aW9uRGV0YWlscz57
MkYyNTVGRkUtOUYzRi00NzZFLUFFOTMtMzFCOEFGRUUxOUU0fQAkJG1ldGhvZDB4NjAwMDAzYS0x
AFRyeUdldFZhbHVlAHNldF9DZWxsVmFsdWUAc2V0X0RhdGFUeXBlAEVsZW1lbnRzAFNoYXJlZFN0
cmluZ0l0ZW0AVGV4dABBcHBlbmRDaGlsZABPcGVuWG1sQXR0cmlidXRlAEdldEF0dHJpYnV0ZQBT
ZXRBdHRyaWJ1dGUAc2V0X0NlbGxGb3JtdWxhAElzTnVsbABHZXRJbnQ2NAAuY2N0b3IAU3lzdGVt
LkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlw
ZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNv
bXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0
ZQBNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUuV3JhcHBlcgBJRFRTVmFyaWFibGVzMTAwAGdldF9SZWFkT25seVZhcmlhYmxl
cwBJRFRTVmFyaWFibGUxMDAAZ2V0X1JlYWRXcml0ZVZhcmlhYmxlcwBzZXRfVmFsdWUAU0NfYWE3
OTY5YmIyMGQ1NGYxMGFjZGZjMjY0OWMxNzk0ZmIuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2Vz
LnJlc291cmNlcwAAAANcAABFQwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAAcwBoAGUAZQB0
ACAAdwBpAHQAaAAgAG4AYQBtAGUAIAB7ADAAfQAAAQALSQBOAFAAVQBUAAAZRABJAFMAVABSAEkA
QgBVAFQASQBPAE4AABN7ADAAfQAgADoAIAB7ADEAfQAAM1UAcABkAGEAdABlACAAVwBhAHQAZQBy
AGYAYQBsAGwAIAB0AGUAbQBwAGwAYQB0AGUAAEljAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQA
IABjAGUAbABsACAAdwBpAHQAaAAgAHYAYQBsAHUAZQA9ACIAewAwAH0AIgAARVMAZQBjAHQAaQBv
AG4AcwAgAFIAYQBuAGcAZQA9AHsAMAB9ACwAewAxAH0ALAB7ADIAfQAsAHsAMwB9ACwAewA0AH0A
ABdSAEUAUABPAFIAVAAgAEQAQQBUAEUAAA1PAFUAVABQAFUAVAAAF0QASQBTAEMAUgBFAFAAQQBO
AEMAWQAALVIAZQBwAG8AcgB0AFMAZQBjAHQAaQBvAG4AcwAgAGkAcwAgAE4AVQBMAEwAABd7ADAA
fQAvAHsAMQB9AC8AewAyAH0AACNSAEUAUABPAFIAVAAgAEQAQQBUAEUAIAA9ACAAewAwAH0AAAlE
AGEAdABlAAB7VgBhAHIAaQBhAGIAbABlAE4AYQBtAGUAPQB7ADAAfQA7ACAAVgBhAHIAaQBhAGIA
bABlAFQAeQBwAGUAewAxAH0AOwAgAFQAZQBtAHAAbABhAHQAZQAgAHYAYQByAGkAYQBiAGwAZQAg
AHQAeQBwAGUAIAB7ADIAfQAASVUAcABkAGEAdABlACAAVwBhAHQAZQByAGYAYQBsAGwAIAB0AGUA
bQBwAGwAYQB0AGUAIABJAG4AcAB1AHQAUgBhAG4AZwBlAAADOgAAE1sAQQAtAFoAYQAtAHoAXQAr
AAEHXABkACsAAAM7AAANRABvAHUAYgBsAGUAAAdpAG4AdAAAEUMAdQByAHIAZQBuAGMAeQAAD04A
dQBtAGUAcgBpAGMAAA9CAG8AbwBsAGUAYQBuAAANcwB0AHIAaQBuAGcAAAlUAFIAVQBFAAADMQAA
AzAAAANzAAB/UwBDAF8AYQBhADcAOQA2ADkAYgBiADIAMABkADUANABmADEAMABhAGMAZABmAGMA
MgA2ADQAOQBjADEANwA5ADQAZgBiAC4AYwBzAHAAcgBvAGoALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAACVEAGkAbQBSAGUAcABvAHIAdABpAG4AZwBEAGEAdABlAEkA
RAAAE1MAaABlAGUAdABOAGEAbQBlAAAdUwB0AGEAcgB0AEMAZQBsAGwAVgBhAGwAdQBlAAAPVABy
AHUAcwB0AEkARAAAM1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBGAGkAbABlAE4A
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
AAAAAAAFIAASgT0GIAESgUEcAyAAHAQgAQEcLwEAKlNDX2FhNzk2OWJiMjBkNTRmMTBhY2RmYzI2
NDljMTc5NGZiLmNzcHJvagAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE0AAAIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MByHcAAAAAAAAAAAAA3ncAAAAgAAAAAAAAAAAA
AAAAAAAAAAAAAAAAANB3AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIEAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAw
AACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAAPADAAAAAAAAAAAAAPADNAAAAFYAUwBfAFYA
RQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQBOhDYVAAABAE6ENhU/AAAAAAAA
AAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQA
AABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABl
AEkAbgBmAG8AAAAsAwAAAQAwADAAMAAwADAANABiADAAAACAACsAAQBGAGkAbABlAEQAZQBzAGMA
cgBpAHAAdABpAG8AbgAAAAAAUwBDAF8AYQBhADcAOQA2ADkAYgBiADIAMABkADUANABmADEAMABh
AGMAZABmAGMAMgA2ADQAOQBjADEANwA5ADQAZgBiAC4AYwBzAHAAcgBvAGoAAAAAAEAADwABAEYA
aQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADQAMwAwAC4AMwAzADgANwAwAAAAAACA
AC8AAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAGEAYQA3ADkANgA5AGIAYgAyADAA
ZAA1ADQAZgAxADAAYQBjAGQAZgBjADIANgA0ADkAYwAxADcAOQA0AGYAYgAuAGMAcwBwAHIAbwBq
AC4AZABsAGwAAAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkA
cgBpAGcAaAB0ACAAQAAgACAAMgAwADEANAAAAIgALwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABl
AG4AYQBtAGUAAABTAEMAXwBhAGEANwA5ADYAOQBiAGIAMgAwAGQANQA0AGYAMQAwAGEAYwBkAGYA
YwAyADYANAA5AGMAMQA3ADkANABmAGIALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAAB4ACsAAQBQ
AHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfAGEAYQA3ADkANgA5AGIAYgAyADAAZAA1ADQA
ZgAxADAAYQBjAGQAZgBjADIANgA0ADkAYwAxADcAOQA0AGYAYgAuAGMAcwBwAHIAbwBqAAAAAABE
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUANAAzADAALgAzADMA
OAA3ADAAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADUANAAzADAALgAzADMAOAA3ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHAAAAwAAADwNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAA=]]></arrayElement></arrayElements></property>
<property id="37" name="VSTAProjectName" dataType="System.String" state="default" isArray="false" description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None">SC_aa7969bb20d54f10acdfc2649c1794fb</property>
<property id="38" name="ScriptLanguage" dataType="System.String" state="default" isArray="false" description="Specifies the programming language used by the script." typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" UITypeEditor="" containsID="false" expressionType="None">CSharp</property>
<property id="39" name="ReadOnlyVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read-only variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">User::DimReportingDateID,User::SheetName,User::StartCellValue,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath</property>
<property id="40" name="ReadWriteVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read/write variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">User::_InputRange</property>
<property id="41" name="BreakpointCollection" dataType="System.String" state="default" isArray="true" description="List of breakpoints present on the script." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="0"/></property>
<property id="42" name="UserComponentTypeName" dataType="System.String" state="default" isArray="false" description="" typeConverter="" UITypeEditor="" containsID="false" expressionType="None">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property></properties>
<inputs>
<input id="33" name="Input 0" description="" hasSideEffects="true" dangling="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="44" name="" description="" lineageId="17" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="45" name="" description="" lineageId="20" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="46" name="" description="" lineageId="29" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="139" name="" description="" lineageId="134" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="140" name="" description="" lineageId="137" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<inputColumn id="202" name="" description="" lineageId="199" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
</inputColumns><externalMetadataColumns isUsed="False"/></input>
</inputs>
</component>
</components>
<paths>
<path id="43" name="OLE DB Source Output" description="" startId="11" endId="33"/>
</paths></pipeline></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Run VBA script</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_3cebff10c8704deab0d1d458e2263943" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::_InputRange,User::DimReportingDateID,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath" ReadWriteVariables=""><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
//using System.Windows.Forms;
using Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;

namespace ST_3cebff10c8704deab0d1d458e2263943.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here
            string _ReportingDate;
            string _sFileName;
            string _sFilePath;
            string _sFile;
            string _InputRange;
            string _sFile1;
 
        _ReportingDate = Dts.Variables["DimReportingDateID"].Value.ToString();
        //_TrustID = Dts.Variables["TrustID"].Value.ToString();
        _sFileName = Dts.Variables["WaterfallTemplateFileName"].Value.ToString();
        _sFilePath = Dts.Variables["WaterfallTemplatePath"].Value.ToString();
        _InputRange = Dts.Variables["_InputRange"].Value.ToString();
        _sFile = _sFilePath + "\\" + _sFileName;
        _sFile1 = _sFilePath + "\\" + "4454E4F7-B734-4CD4-B9F4-E4466FAD7F2A_copy.xlsm";




            var excelAppl = new Microsoft.Office.Interop.Excel.Application();

            excelAppl.Visible = false;
            excelAppl.DisplayAlerts = false;
            excelAppl.AlertBeforeOverwriting = false;

            Workbook wb = excelAppl.Workbooks.Open(_sFile, 0, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);

            /*
            foreach (Worksheet ws in wb.Worksheets)
            {
                if (ws.Name == "Waterfall") 
                {
                    Range r = ws.get_Range(_InputRange, _InputRange);
                    r.Value2 = r.Value2;
                    ws.Cells.Calculate();
                    //ws.Calculate();
                }
            }
             */
            //wb.Save();
            //wb.SaveAs(_sFile, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, XlSaveAsAccessMode.xlShared, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            wb.Close(true, _sFile, null);
            //wb.SaveAs(_sFile1, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, XlSaveAsAccessMode.xlShared, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            //wb.Close(true, _sFile, null);
            Marshal.ReleaseComObject(wb);
            excelAppl.Quit();
            Marshal.ReleaseComObject(excelAppl);

            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\st_3cebff10c8704deab0d1d458e2263943.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_3cebff10c8704deab0d1d458e2263943.csproj</RootNamespace>
    <AssemblyName>ST_3cebff10c8704deab0d1d458e2263943.csproj</AssemblyName>
    <ProjectGuid>{B75BD24A-220C-4703-9814-A89D3B0FE082}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.Office.Interop.Excel, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptTask</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Settings.get_Default():ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties.Sett" +
    "ings")]

namespace ST_3cebff10c8704deab0d1d458e2263943.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3cebff10c8704deab0d1d458e2263943.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3cebff10c8704deab0d1d458e2263943.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><BinaryItem Name="\bin\release\st_3cebff10c8704deab0d1d458e2263943.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEWZuFQAAAAAAAAAAOAAAiELAQgAABIAAAAIAAAAAAAAvjEA
AAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHAxAABLAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
MQAAAAAAAEgAAAACAAUAyCIAAKgOAAABAAAAAAAAABAiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwEAA6AQAAAQAAEQIoDQAACm8OAAAKcgEAAHBvDwAACm8Q
AAAKbxEAAAomAigNAAAKbw4AAApyJwAAcG8PAAAKbxAAAApvEQAACgoCKA0AAApvDgAACnJbAABw
bw8AAApvEAAACm8RAAAKCwIoDQAACm8OAAAKcocAAHBvDwAACm8QAAAKbxEAAAomB3KfAABwBigS
AAAKDAdyowAAcCgTAAAKJnMUAAAKDQkWbxUAAAoJFm8WAAAKCRZvFwAACglvGAAACggWjBoAAAF+
GQAACn4ZAAAKfhkAAAp+GQAACn4ZAAAKfhkAAAp+GQAACn4ZAAAKfhkAAAp+GQAACn4ZAAAKfhkA
AAp+GQAACm8aAAAKEwQRBBeMHQAAAQgUbxsAAAoRBCgcAAAKJglvHQAACgkoHAAACiYCKA0AAAoW
bx4AAAoqHgIoHwAACioafgQAAAQqLnMEAAAGgAQAAAQqHgIoIQAACioeAigjAAAKKgAAABMwAwAt
AAAAAgAAEX4FAAAELSByAwEAcNAFAAACKCQAAApvJQAACnMmAAAKCgaABQAABH4FAAAEKhp+BgAA
BCoeAoAGAAAEKgAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VS
ZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGlj
S2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJj
ZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHYyLjAuNTA3MjcAAAAA
BQBsAAAAWAQAACN+AADEBAAAqAYAACNTdHJpbmdzAAAAAGwLAACEAQAAI1VTAPAMAAAQAAAAI0dV
SUQAAAAADQAAqAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMAFgAAAQAAACYAAAAFAAAA
BgAAAAkAAAABAAAAJwAAAAIAAAAOAAAAAgAAAAIAAAADAAAABAAAAAEAAAAGAAAAAQAAAAEAAAAA
AAoAAQAAAAAABgAOAeUACgA6ATMBDgBUAT8BCgBsATMBCgDLAboBCgD8AecBCgBkAlICCgB7AlIC
CgCYAlICCgC3AlICCgDQAlICCgDpAlICCgAEA1ICCgAfA1ICCgA4A1ICCgBxA1EDCgCRA1EDEgC8
A68DBgDLA+UAFgAkBAQEFgA8BAQECgBhBDMBGgCOBG8EGgCfBG8EGgDlBG8ECgD9BDMBCgADBTMB
GgAQBW8ECgAeBTMBGgAmBW8ECgBVBTYFGgCCBW8ECgCOBVEDCgDDBbAFCgDgBTMBCgAEBlICDgAw
BhoGDgBJBhoGAAAAAAEAAAAAAAEAAQABABAAOQBEAAUAAQABAAMBAABvAAAACQABAAMAAAEQAH0A
hgANAAQAAwAAABAAvACGABEABQAGAAYGfgEXAFaAhgEaAFaAjgEaABEAlgEoABEA2wE2ABEACAI6
AFAgAAAAAIYAcwETAAEAliEAAAAAhhh4ARMAAQCeIQAAAACWCKYBLAABALEhAAAAAIYYeAETAAEA
pSEAAAAAkRipBQIBAQC5IQAAAACDGHgBEwABAMQhAAAAAJMIGAI+AAEA/SEAAAAAkwgsAkMAAQAE
IgAAAACTCDgCSAABAAAAAQBMAjkAeAFYAEEAeAFYAEkAeAFYAFEAeAFYAFkAeAFYAGEAeAFYAGkA
eAFYAHEAeAFYAHkAeAFYAIEAeAFdAIkAeAETAJEAeAFYAAkA3QOcAJkALgShAKEARQSmAKkATgSs
ACEAWASwALEAaAS0ALEAaAS7ALkAeAETAMEArATKAMEAuATKAMEAygTKAMEA7wTPANkACAXUAMkA
GQXXAPEAMAXrAPkAXQXyAMEAbgUTAJkAcwVdAAkAeAETAAkBeAETABkAeAETABEBeAETACEAeAET
ANkA8gUGAdkADQYOASkAeAEUASkBeAEhAQgACAAeAAgADAAjAC4AEwBhAS4AGwBhAS4AUwB+AS4A
CwAxAS4AWwCHAS4AIwBhAS4AKwAxAS4AMwBnAS4AOwBhAUMAYwBiAEkAOwEoAWkAOwEoAYEAAwEj
AKMAEwEjAPcAHAEEAAEABQACAAAAsgExAAAAywFOAAAARAJTAAIAAwADAAIABwAFAAIACAAHAAEA
CQAHAASAAAABAAAAdhW6bwAAAAAAAEQAAAAKAAAAAAAAAAAAAAABAMYAAAAAAAIAAAAAAAAAAAAA
AAoAKgEAAAAAAgAAAAAAAAAAAAAACgAzAQAAAAADAAUAAAAAAAAAAAAKAK8DAAAAAAoAAAAAAAAA
AAAAAAEA5QMAAAAADgAAAAAAAAAAAAAAwQBvBAAAAAAAAAAAAQAAAF4GAAADAAIAAAAAPE1vZHVs
ZT4AU1RfM2NlYmZmMTBjODcwNGRlYWIwZDFkNDU4ZTIyNjM5NDMuY3Nwcm9qLmRsbABTY3JpcHRN
YWluAFNUXzNjZWJmZjEwYzg3MDRkZWFiMGQxZDQ1OGUyMjYzOTQzLmNzcHJvagBTY3JpcHRSZXN1
bHRzAFNldHRpbmdzAFNUXzNjZWJmZjEwYzg3MDRkZWFiMGQxZDQ1OGUyMjYzOTQzLmNzcHJvai5Q
cm9wZXJ0aWVzAFJlc291cmNlcwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2Rl
bEJhc2UAbXNjb3JsaWIAU3lzdGVtAEVudW0AU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRp
b25TZXR0aW5nc0Jhc2UAT2JqZWN0AE1haW4ALmN0b3IAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUA
ZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAU3lzdGVtLlJlc291cmNlcwBSZXNv
dXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8A
cmVzb3VyY2VDdWx0dXJlAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1
cmUAQ3VsdHVyZQB2YWx1ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRl
AEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmli
dXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNz
ZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1i
bHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGlt
ZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU3lzdGVtLkFkZEluAEFkZEluQXR0cmlidXRlAFNjcmlw
dE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFi
bGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5nAFN0cmluZwBDb25jYXQATWljcm9zb2Z0Lk9m
ZmljZS5JbnRlcm9wLkV4Y2VsAEFwcGxpY2F0aW9uQ2xhc3MAX0FwcGxpY2F0aW9uAHNldF9WaXNp
YmxlAHNldF9EaXNwbGF5QWxlcnRzAHNldF9BbGVydEJlZm9yZU92ZXJ3cml0aW5nAFdvcmtib29r
cwBnZXRfV29ya2Jvb2tzAEludDMyAFR5cGUATWlzc2luZwBXb3JrYm9vawBPcGVuAEJvb2xlYW4A
X1dvcmtib29rAENsb3NlAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBNYXJzaGFsAFJl
bGVhc2VDb21PYmplY3QAUXVpdABzZXRfVGFza1Jlc3VsdABBcHBsaWNhdGlvbgBDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1i
bHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRy
aWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAU1RfM2NlYmZmMTBjODcwNGRlYWIwZDFkNDU4ZTIy
NjM5NDMuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAJUQAaQBtAFIAZQBw
AG8AcgB0AGkAbgBnAEQAYQB0AGUASQBEAAAzVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABsAGEA
dABlAEYAaQBsAGUATgBhAG0AZQAAK1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBQ
AGEAdABoAAAXXwBJAG4AcAB1AHQAUgBhAG4AZwBlAAADXAAAX1wANAA0ADUANABFADQARgA3AC0A
QgA3ADMANAAtADQAQwBEADQALQBCADkARgA0AC0ARQA0ADQANgA2AEYAQQBEADcARgAyAEEAXwBj
AG8AcAB5AC4AeABsAHMAbQABf1MAVABfADMAYwBlAGIAZgBmADEAMABjADgANwAwADQAZABlAGEA
YgAwAGQAMQBkADQANQA4AGUAMgAyADYAMwA5ADQAMwAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABl
AHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAA+jqR1peYGE+CZJqb1Q5B8gAIiYRdzYCA
zJEIt3pcVhk04IkDIAABAgYIAwYRDAQAAAAABAEAAAADBhIQBAAAEhAECAASEAMGEhUDBhIZBAAA
EhUEAAASGQUAAQESGQQIABIVBAgAEhkEIAEBDgQgAQEIOQEAClNjcmlwdE1haW4DAFQOB1ZlcnNp
b24DMS4wVA4JUHVibGlzaGVyAFQOC0Rlc2NyaXB0aW9uAAQgABJNBCAAElEFIAESVRwDIAAcAyAA
DgYAAw4ODg4FAAIODg4Icem84RHpQpwEIAEBAgQgABJlAgYcEyAPEnEOHBwcHBwcHBwcHBwcHBwG
IAMBHBwcBAABCBwKBwUODg4SgIEScQMAAAEHAAESbRGAjQUgABKAkQcgAgEOEoCRBAcBEhUGIAEB
EYCZCAEAAgAAAAAALwEAKlNUXzNjZWJmZjEwYzg3MDRkZWFiMGQxZDQ1OGUyMjYzOTQzLmNzcHJv
agAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE0AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25F
eGNlcHRpb25UaHJvd3MBAACYMQAAAAAAAAAAAACuMQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
oDEAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgQAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA8AMAAAAAAAAAAAAA8AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABALpvdhUAAAEAum92FT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBFADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACwDAAABADAAMAAw
ADAAMAA0AGIAMAAAAIAAKwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwAzAGMAZQBiAGYAZgAxADAAYwA4ADcAMAA0AGQAZQBhAGIAMABkADEAZAA0ADUAOABlADIAMgA2
ADMAOQA0ADMALgBjAHMAcAByAG8AagAAAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADUANAA5ADQALgAyADgANgAwADIAAAAAAIAALwABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AMwBjAGUAYgBmAGYAMQAwAGMAOAA3ADAANABkAGUAYQBiADAAZAAxAGQA
NAA1ADgAZQAyADIANgAzADkANAAzAC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAASAASAAEATABl
AGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAA
MQA0AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADMAYwBl
AGIAZgBmADEAMABjADgANwAwADQAZABlAGEAYgAwAGQAMQBkADQANQA4AGUAMgAyADYAMwA5ADQA
MwAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8AMwBjAGUAYgBmAGYAMQAwAGMAOAA3ADAANABkAGUAYQBiADAAZAAxAGQANAA1ADgA
ZQAyADIANgAzADkANAAzAC4AYwBzAHAAcgBvAGoAAAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADkANAAuADIAOAA2ADAAMgAAAAAASAAPAAEAQQBzAHMA
ZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADkANAAuADIAOAA2ADAAMgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAMAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="STOCK:SEQUENCE">
<DTS:Property DTS:Name="LockName"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="SSIS.Pipeline.2">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact">Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}</DTS:Property>
<DTS:Property DTS:Name="Description">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Pipeline.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><pipeline id="0" name="pipelineXml" description="pipelineXml" defaultBufferMaxRows="10000" engineThreads="10" defaultBufferSize="10485760" BLOBTempStoragePath="" bufferTempStoragePath="" runInOptimizedMode="true">
<components>
<component id="1" name="OLE DB Source" componentClassID="{BCEFE59B-6819-47F7-A125-63753B33ABB7}" description="OLE DB Source" localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="7" pipelineVersion="0" contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7">
<properties>
<property id="2" name="CommandTimeout" dataType="System.Int32" state="default" isArray="false" description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="3" name="OpenRowset" dataType="System.String" state="default" isArray="false" description="Specifies the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="4" name="OpenRowsetVariable" dataType="System.String" state="default" isArray="false" description="Specifies the variable that contains the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="5" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="The SQL command to be executed." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None"></property>
<property id="6" name="SqlCommandVariable" dataType="System.String" state="default" isArray="false" description="The variable that contains the SQL command to be executed." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">User::_query_GetVariableSetItemLookup</property>
<property id="7" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property>
<property id="8" name="AlwaysUseDefaultCodePage" dataType="System.Boolean" state="default" isArray="false" description="Forces the use of the DefaultCodePage property value when describing character data." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="9" name="AccessMode" dataType="System.Int32" state="default" isArray="false" description="Specifies the mode used to access the database." typeConverter="AccessMode" UITypeEditor="" containsID="false" expressionType="None">3</property>
<property id="15" name="ParameterMapping" dataType="System.String" state="default" isArray="false" description="The mappings between the parameters in the SQL command and variables." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property></properties>
<connections>
<connection id="10" name="OleDbConnection" description="The OLE DB runtime connection used to access the database." connectionManagerID="{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}"/></connections>
<outputs>
<output id="11" name="OLE DB Source Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="17" name="VariableSetItemId" description="" lineageId="17" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="16" mappedColumnId="0"/>
<outputColumn id="20" name="VariableSetId" description="" lineageId="20" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="19" mappedColumnId="0"/>
<outputColumn id="23" name="SequenceNo" description="" lineageId="23" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Conversion" errorRowDisposition="FailComponent" truncationRowDisposition="FailComponent" externalMetadataColumnId="22" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="True">
<externalMetadataColumn id="16" name="VariableSetItemId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="19" name="VariableSetId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="22" name="SequenceNo" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/></externalMetadataColumns></output>
<output id="12" name="OLE DB Source Error Output" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="18" name="VariableSetItemId" description="" lineageId="18" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="21" name="VariableSetId" description="" lineageId="21" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="24" name="SequenceNo" description="" lineageId="24" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="13" name="ErrorCode" description="" lineageId="13" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="14" name="ErrorColumn" description="" lineageId="14" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="25" name="Cache Transform" componentClassID="{A236DD44-4409-433E-A1CE-283DA18F4E0F}" description="Inserts rows into a cache." localeId="-1" usesDispositions="false" validateExternalMetadata="True" version="0" pipelineVersion="0" contactInfo="Cache Transform;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0">
<connections>
<connection id="28" name="CacheConnection" description="The connection used to access the cache." connectionManagerID="{35270CD3-4C05-4D9A-9A4F-43E82DDC69A5}"/></connections>
<inputs>
<input id="26" name="Cache Input" description="" hasSideEffects="true" dangling="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="30" name="" description="" lineageId="17" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="31" name="CacheColumnName" dataType="System.String" state="default" isArray="false" description="The cache column associated with the input column." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetItemID</property></properties></inputColumn>
<inputColumn id="32" name="" description="" lineageId="20" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="33" name="CacheColumnName" dataType="System.String" state="default" isArray="false" description="The cache column associated with the input column." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetID</property></properties></inputColumn>
<inputColumn id="34" name="" description="" lineageId="23" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="35" name="CacheColumnName" dataType="System.String" state="default" isArray="false" description="The cache column associated with the input column." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSequenceNo</property></properties></inputColumn>
</inputColumns><externalMetadataColumns isUsed="False"/></input>
</inputs>
<outputs>
<output id="27" name="Cache Output" description="" exclusionGroup="0" synchronousInputId="26" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
</components>
<paths>
<path id="29" name="OLE DB Source Output" description="" startId="11" endId="26"/>
</paths></pipeline></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="SSIS.Pipeline.2">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact">Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Save Output &amp; Discrepancy</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}</DTS:Property>
<DTS:Property DTS:Name="Description">Data Flow Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Pipeline.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><pipeline id="0" name="pipelineXml" description="pipelineXml" defaultBufferMaxRows="10000" engineThreads="10" defaultBufferSize="10485760" BLOBTempStoragePath="" bufferTempStoragePath="" runInOptimizedMode="true">
<components>
<component id="1" name="Get Output &amp; Discrepancy" componentClassID="{2E42D45B-F83C-400F-8D77-61DDE6A7DF29}" description="Executes a custom script." localeId="-1" usesDispositions="false" validateExternalMetadata="True" version="4" pipelineVersion="0" contactInfo="Executes a custom script.;Microsoft Corporation; Microsoft SqlServer v10; © 2007 Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4">
<properties>
<property id="5" name="SourceCode" dataType="System.String" state="cdata" isArray="true" description="Stores the source code of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="18"><arrayElement dataType="System.String"><![CDATA[\main.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* Microsoft SQL Server Integration Services Script Component
*  Write scripts using Microsoft Visual C# 2008.
*  ScriptMain is the entry point class of the script.*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    private string _ReportingDate;
    private string _sFileName;
    private string _sFilePath;
    private string _sFile;
    private SpreadsheetDocument _spreadsheetDocument;
    private Sheet _sheet;
    private WorksheetPart _worksheetPart;
    private SheetData _sheetData;
    private SharedStringTablePart _sharedStringTablePart;
    private DocumentFormat.OpenXml.StringValue _sheetReferenceId;
    private string _sSheetName;
    private string _StartCellValue;
    private int Count = 0;
    private string _TrustID;
    private WaterfallReport _wr;
    private string _sInputRange;
    private string _sOutputRange;

    public override void PreExecute()
    {
        base.PreExecute();
        /*
          Add your code here for preprocessing or remove if not needed
        */
        _ReportingDate = Variables.DimReportingDateID;
        _TrustID = Variables.TrustID;
        _StartCellValue = Variables.StartCellValue;  //"REPORT DATE";
        _sFileName = Variables.WaterfallTemplateFileName;
        _sFilePath = Variables.WaterfallTemplatePath;
        _sSheetName = Variables.SheetName;
        _sFile = _sFilePath + "\\" + _sFileName;

        _spreadsheetDocument = SpreadsheetDocument.Open(_sFile, true);
        _sheet = _spreadsheetDocument.WorkbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == _sSheetName);
        _sheetReferenceId = _sheet.Id;
        if (_sheet == null) throw new Exception(string.Format("Could not find sheet with name {0}", _sSheetName));

        _worksheetPart = (WorksheetPart)_spreadsheetDocument.WorkbookPart.GetPartById(_sheetReferenceId);
        _sheetData = _worksheetPart.Worksheet.GetFirstChild<SheetData>();
        _sharedStringTablePart = _spreadsheetDocument.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
        _worksheetPart.Worksheet.Save();
        _sharedStringTablePart = null;
        _sheetData = null;
        _worksheetPart = null;
        _sheet = null;
        _spreadsheetDocument.Close();
        _spreadsheetDocument.Dispose();
        _spreadsheetDocument = null;
        _wr = null;
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */
        bool bFireAgain = true;
        string sMsg = "";

        var StartCell = ExcelNavigator.GetCellByCellValue(_sheetData, _sharedStringTablePart, _StartCellValue);
        if (StartCell == null)
        {
            sMsg = string.Format("could not find cell with value=\"{0}\"", _StartCellValue);
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        }
        _wr = new WaterfallReport(_sheetData, _sharedStringTablePart, StartCell);
        sMsg = string.Format("Sections Range={0},{1},{2},{3},{4}", _wr.ReportSections["REPORT DATE"].GetSectionRange(), _wr.ReportSections["INPUT"].GetSectionRange(), _wr.ReportSections["OUTPUT"].GetSectionRange(), _wr.ReportSections["DISTRIBUTION"].GetSectionRange(), _wr.ReportSections["DISCREPANCY"].GetSectionRange());
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        if (_wr.ReportSections == null)
        {
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", "ReportSections is NULL", "", 0, ref bFireAgain);
        }

        _wr.MoveToLastRow();
        _wr.MoveToSectionFirstCell("REPORT DATE");
        sMsg = string.Format("{0} : {1}", _wr.GetCell().CellReference, _wr.GetCellValue());
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        string ReportDate = string.Format("{0}/{1}/{2}", _ReportingDate.Substring(6, 2), _ReportingDate.Substring(4, 2), _ReportingDate.Substring(0, 4));
        sMsg = string.Format("CALCULATED REPORT DATE = {0}", ReportDate);
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
        if (_wr.GetCellValue() == ReportDate)
        {
            sMsg = string.Format(" REPORT DATE = {0}, CellValue = {1}", ReportDate, _wr.GetCellValue());
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            /*
            _wr.MoveToSectionFirstCell("OUTPUT");
            int ColNumber = _wr.ReportSections["OUTPUT"].ColEndIndex - _wr.ReportSections["OUTPUT"].ColStartIndex + 1;
            sMsg = string.Format("{0} : {1}, {2}", _wr.GetCell().CellReference.Value, ExcelReader.GetCellValue(_wr.GetCell(), _sharedStringTablePart), ColNumber.ToString());
            ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

            for (int i = 0; i < ColNumber; i++)
            {
                sMsg = string.Format("{0} , {1}, {2}, {3}", _wr.ColumnIndex(), _wr.ReportSections["OUTPUT"].ColStartIndex, _wr.ReportSections["OUTPUT"].ColEndIndex, _wr.ReportSections["INPUT"].GetColNumber());
                ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

                Output0Buffer.AddRow();
                Output0Buffer.VariableName = "";
                Output0Buffer.VariableType = "OUTPUT";
                Output0Buffer.VariableValue = _wr.GetCellValue();
                Output0Buffer.VariableSequenceNo = _wr.GetReportColIndex();
                Output0Buffer.VariableSetCode = _TrustID;
                Output0Buffer.DimReportingDateID = int.Parse(_ReportingDate);

                _wr.MoveToNextCell();
            }

            _wr.MoveToSectionFirstCell("DISCREPANCY");
            ColNumber = _wr.ReportSections["DISCREPANCY"].ColEndIndex - _wr.ReportSections["DISCREPANCY"].ColStartIndex + 1;
            for (int i = 0; i < ColNumber; i++)
            {
                Output0Buffer.AddRow();
                Output0Buffer.VariableName = "";
                Output0Buffer.VariableType = "DISCREPANCY";
                Output0Buffer.VariableValue = _wr.GetCellValue();
                Output0Buffer.VariableSequenceNo = _wr.GetReportColIndex();
                Output0Buffer.VariableSetCode = _TrustID;
                Output0Buffer.DimReportingDateID = int.Parse(_ReportingDate);

                _wr.MoveToNextCell();
            }
                        */

            ReadSection("OUTPUT", ReportDate);
            ReadSection("DISCREPANCY", ReportDate);
        }
    }
    public void ReadSection(string SectionName, string ReportDate)
    {
        bool bFireAgain = true;
        string sMsg = "";
        long DimReportingDateID = 0;

        string[] aReportDate = ReportDate.Split('/');

        if (aReportDate.Length == 3)
        {
            long.TryParse(aReportDate[2] + aReportDate[1] + aReportDate[0], out DimReportingDateID);
        }

        _wr.MoveToSectionFirstCell(SectionName);
        int ColNumber = _wr.ReportSections[SectionName].GetColNumber();
        sMsg = string.Format("{0} : {1}, {2}", _wr.GetCell().CellReference.Value, ExcelReader.GetCellValue(_wr.GetCell(), _sharedStringTablePart), ColNumber.ToString());
        ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);

        string CellRef = "";
        for (int i = 0; i < ColNumber; i++)
        {
            //sMsg = string.Format("{0} , {1}, {2}, {3}", _wr.ColumnIndex(), _wr.ReportSections["OUTPUT"].ColStartIndex, _wr.ReportSections["OUTPUT"].ColEndIndex, _wr.ReportSections["INPUT"].GetColNumber());
            //ComponentMetaData.FireInformation(1000, "Update Waterfall template", sMsg, "", 0, ref bFireAgain);
            string ColName = _wr.GetColumnName(_wr.ColumnIndex());
            CellRef = ColName + _wr.GetDataRow().RowIndex.Value.ToString();
            Cell cell = _wr.GetCell(CellRef);

            Output0Buffer.AddRow();
            Output0Buffer.VariableName = _wr.GetVariableName();
            Output0Buffer.VariableType = SectionName;

            Output0Buffer.VariableSequenceNo = _wr.GetReportColIndex();
            Output0Buffer.VariableSetCode = _TrustID;
            Output0Buffer.DimReportingDateID = int.Parse(_ReportingDate);

            if (cell == null)
            {
                sMsg = string.Format("section {0} could not find cell {1}  ", SectionName, CellRef);
                ComponentMetaData.FireInformation(1000, "Read Waterfall template", sMsg, "", 0, ref bFireAgain);
                Output0Buffer.VariableValue = null;
            }
            else
            {
                sMsg = string.Format("{0} : {1}, {2}, {3}", cell.CellReference.Value, ExcelReader.GetCellValue(cell, _sharedStringTablePart), _wr.GetReportColIndex(), _wr.GetVariableName());
                ComponentMetaData.FireInformation(1000, "Read Waterfall template", sMsg, "", 0, ref bFireAgain);
                Output0Buffer.VariableValue = _wr.GetCellValue(CellRef);
            }

            _wr.MoveToNextCell();
        }
    }
}

public class WaterfallReport
{
    private SheetData _sheetData;
    private SharedStringTablePart _sharedStringTablePart;
    private Dictionary<string, WaterfallReportSection> _ReportSections = new Dictionary<string, WaterfallReportSection>();
    //private Row _rColumnName;
    private Row _rData;
    private Row _rRowType;
    private Row _rFirstDataRow;
    private int _CurrentColIndex;
    private Row _rVariableName;

    public WaterfallReport(SheetData sd, SharedStringTablePart sst, Cell start)
    {
        _sheetData = sd;
        _sharedStringTablePart = sst;
        int RowTypeIndex = ExcelNavigator.GetRowIndex(start.CellReference) - 1;
        int RowVariableName = RowTypeIndex - 5;

        _rRowType = ExcelNavigator.GetRow(_sheetData, RowTypeIndex);
        /*
        _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
        _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
        _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "OUTPUT", _rRowType));
        _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
        _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));
        */
        _ReportSections.Add("REPORT DATE", GetReportSection(0, "REPORT DATE", _rRowType));
        _ReportSections.Add("INPUT", GetReportSection(_ReportSections["REPORT DATE"].ColEndIndex + 1, "INPUT", _rRowType));
        _ReportSections.Add("MODEL VERSION", GetReportSection(_ReportSections["INPUT"].ColEndIndex + 1, "MODEL VERSION", _rRowType));
        _ReportSections.Add("OUTPUT", GetReportSection(_ReportSections["MODEL VERSION"].ColEndIndex + 1, "OUTPUT", _rRowType));
        _ReportSections.Add("DISTRIBUTION", GetReportSection(_ReportSections["OUTPUT"].ColEndIndex + 1, "DISTRIBUTION", _rRowType));
        _ReportSections.Add("DISCREPANCY", GetReportSection(_ReportSections["DISTRIBUTION"].ColEndIndex + 1, "DISCREPANCY", _rRowType));

        _rData = ExcelNavigator.GetRow(_sheetData, RowTypeIndex + 1);
        _rFirstDataRow = _rData;
        _rVariableName = ExcelNavigator.GetRow(_sheetData, RowVariableName);
    }

    public Dictionary<string, WaterfallReportSection> ReportSections
    {
        get { return this._ReportSections; }
    }

    private WaterfallReportSection GetReportSection(int StartIndex, string SectionName, Row row)
    {
        int ColStart = 0;
        int ColEnd = 0;
        string CellStartName = "";
        string CellEndName = "";
        Cell cell;
        string sLastCellValue = "";
        string sLastCellName = "";
        string sCellValue = "";
        string sCellName = "";

        WaterfallReportSection wrs = null;

        int ColCount = row.Descendants<Cell>().Count<Cell>();
        for (int i = StartIndex; i <= ColCount - 1; i++)
        {
            cell = row.Descendants<Cell>().ElementAt(i);
            sCellValue = ExcelReader.GetCellValue(cell, _sharedStringTablePart).ToUpper();
            sCellName = cell.CellReference.ToString();
            if (sCellValue != sLastCellValue && sCellValue == SectionName.ToUpper())
            {
                CellStartName = sCellName;
                ColStart = i;
            }
            if (sCellValue != sLastCellValue && sLastCellValue == SectionName.ToUpper())
            {
                CellEndName = sLastCellName;
                ColEnd = i - 1;
                break;
            }
            if (i == ColCount - 1)
            {
                CellEndName = sCellName;
                ColEnd = i;
            }
            sLastCellValue = sCellValue;
            sLastCellName = cell.CellReference.ToString();
        }
        if (CellStartName != "" && CellEndName != "")
        {
            wrs = new WaterfallReportSection(SectionName, ColStart, CellStartName, ColEnd, CellEndName);
        }
        return wrs;
    }

    public bool MoveToNextRow()
    {
        _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value));
        return true;
    }

    public bool MoveToPrevRow()
    {
        bool ret = false;
        if (_rData.RowIndex - 2 > _rRowType.RowIndex)
        {
            _rData = ExcelNavigator.GetRow(_sheetData, (int)(_rData.RowIndex.Value - 2));
            ret = true;
        }
        return ret;
    }

    public bool MoveToNextCell()
    {
        bool ret = false;
        if (_CurrentColIndex + 1 <= _ReportSections["DISCREPANCY"].ColEndIndex)
        {
            _CurrentColIndex++;
            ret = true;
        }
        return ret;
    }

    public bool MoveToPrevCell()
    {
        bool ret = false;
        if (_CurrentColIndex - 1 <= _ReportSections["REPORT DATE"].ColStartIndex)
        {
            _CurrentColIndex--;
            ret = true;
        }
        return ret;
    }

    public bool MoveToSectionFirstCell(string sSectionName)
    {
        _CurrentColIndex = _ReportSections[sSectionName].ColStartIndex;
        return true;
    }

    public bool MoveToLastRow()
    {
        string sCellsList;
        string sCellName = ExcelNavigator.GetNextInColCellName(_ReportSections["REPORT DATE"].CellStartName);
        Dictionary<string, Cell> cells = ExcelNavigator.GetFilledColumnCellRange(_sheetData, sCellName, out sCellsList);
        if (cells != null && cells.Count > 0)
        {
            Cell LastFilledCell = cells.Last<KeyValuePair<string, Cell>>().Value;
            int FirstEmptyRowIndex = ExcelNavigator.GetRowIndex(LastFilledCell.CellReference) - 1;
            _rData = ExcelNavigator.GetRow(_sheetData, FirstEmptyRowIndex);
        }
        return true;
    }

    public string GetCellValue()
    {
        try
        {
            Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            string sTypeCellName = ExcelNavigator.GetColumnName(cell.CellReference.Value) + (_rRowType.RowIndex - 4).ToString();
            Cell DataTypeCell = ExcelNavigator.GetCellByName(_sheetData, sTypeCellName);
            string DataType = ExcelReader.GetCellValue(DataTypeCell, _sharedStringTablePart);
            string value = ExcelReader.GetCellValue(cell, _sharedStringTablePart);
            if (DataType == "Date" || DataType == "Data Type")
            {
                double dbDate;
                if (double.TryParse(value, out dbDate))
                {
                    value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                }

            }
            return value;
        }
        catch { return null; }
    }

    public string GetCellValue(string CellReference)
    {
        try
        {
            string sTypeCellName = ExcelNavigator.GetColumnName(CellReference) + (_rRowType.RowIndex - 4).ToString();
            Cell DataTypeCell = ExcelNavigator.GetCellByName(_sheetData, sTypeCellName);
            string DataType = ExcelReader.GetCellValue(DataTypeCell, _sharedStringTablePart);

            Cell cell = ExcelNavigator.GetCellByName(_sheetData, CellReference);
            string value = ExcelReader.GetCellValue(cell, _sharedStringTablePart);

            if (DataType == "Date" || DataType == "Data Type")
            {
                double dbDate;
                if (double.TryParse(value, out dbDate))
                {
                    value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                }

            }
            return value;
        }
        catch { return null; }
    }

    public string GetValueType()
    {
        Cell cell = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex);
        return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
    }

    public bool UpdateCellValue(string sValue, string sDataType)
    {
        Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
        {
            Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
            Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
            ExcelWriter.CopyCellStyle(FromCell, cell);
        }
        return ExcelWriter.UpdateCellValue(_sharedStringTablePart, cell, sValue, sDataType);
    }

    public bool CopyFormula()
    {
        //StringBuilder sb1 = new StringBuilder();

        try
        {
            Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
            {
                //Row row = ExcelNavigator.GetRow(_sheetData, (int)_rData.RowIndex.Value - 2);
                Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                //sb1.Append(cell.CellReference.Value).Append(":").Append(FromCell.CellReference.Value).Append("=");
                if (FromCell.CellFormula != null)
                {
                    string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                    string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                    string sFormulaRef = FromCell.CellFormula.Reference.Value;
                    string sFormulaText = FromCell.CellFormula.Text;
                    CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                    //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                    //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                    cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                    cell.Append(cf);
                    //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                }
                //cell.CellValue.Remove();
            }

            //sb1 = null;
            return true;
        }
        catch { return false; }

    }

    public bool CopyFormula(string CellReference)
    {
        //StringBuilder sb1 = new StringBuilder();

        try
        {
            //Cell cell = _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
            Cell cell = this.GetCell(CellReference);
            if ((int)_rData.RowIndex.Value - 1 > (int)_rRowType.RowIndex.Value)
            {

                Row row = ExcelNavigator.GetRow(_sheetData, (int)_rRowType.RowIndex.Value);
                //Cell FromCell = row.Descendants<Cell>().ElementAt(_CurrentColIndex);
                string ColName = ExcelNavigator.GetColumnName(CellReference);
                string RowIndex = (ExcelNavigator.GetRowIndex(CellReference) - 1).ToString();
                Cell FromCell = ExcelNavigator.GetCellByName(_sheetData, ColName + RowIndex);
                string FromCellRef = "";
                if (FromCell == null) { FromCellRef = "null"; } else { FromCellRef = FromCell.CellReference.Value; }
                string sOldFormulaType = "";
                string sNewFormulaType = "";
                if (FromCell.CellFormula != null)
                {
                    CellFormula cf;
                    string sOldRowIndex = ExcelNavigator.GetRowIndex(FromCell.CellReference.Value).ToString();
                    string sNewRowIndex = ExcelNavigator.GetRowIndex(cell.CellReference.Value).ToString();
                    string sFormulaRef = "";
                    if (FromCell.CellFormula.Reference != null)
                    { sFormulaRef = FromCell.CellFormula.Reference.Value; }
                    string sFormulaText = "";
                    if (!string.IsNullOrEmpty(FromCell.CellFormula.Text))
                    { sFormulaText = FromCell.CellFormula.Text; }
                    //FromCell.CellFormula.SharedIndex
                    //CellFormula cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = CellFormulaValues.Array };
                    sOldFormulaType = "";
                    if (FromCell.CellFormula.FormulaType != null)
                    { sOldFormulaType = FromCell.CellFormula.FormulaType.Value.ToString(); }
                    sNewFormulaType = "";
                    if (FromCell.CellFormula.FormulaType.Value == CellFormulaValues.Shared)
                    {
                        sNewFormulaType = sOldFormulaType;
                        //cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                        cf = new CellFormula() { FormulaType = FromCell.CellFormula.FormulaType, SharedIndex = FromCell.CellFormula.SharedIndex };
                        // update formula reference in the first row
                        Cell FirstCell = ExcelNavigator.GetCellByName(_sheetData, ColName + _rFirstDataRow.RowIndex.Value.ToString());
                        if (!string.IsNullOrEmpty(FirstCell.CellFormula.Reference.Value))
                        {
                            string sFirstCellFormulaRef = FirstCell.CellFormula.Reference.Value;
                            FirstCell.CellFormula.Reference.Value = sFirstCellFormulaRef.Replace(sOldRowIndex, sNewRowIndex);
                        }
                    }
                    else
                    {
                        cf = new CellFormula() { Reference = sFormulaRef.Replace(sOldRowIndex, sNewRowIndex), FormulaType = FromCell.CellFormula.FormulaType };
                        cf.Text = sFormulaText.Replace(sOldRowIndex, sNewRowIndex);
                    }
                    //cf.SetAttribute(new OpenXmlAttribute("ref", "", sFormulaRef.Replace(sOldRowIndex, sNewRowIndex)));
                    //cf.SetAttribute(new OpenXmlAttribute("t", "", "array"));
                    cell.Append(cf);
                    //sb1.Append(sFormulaRef).Append(":").Append(sFormulaText).Append(":").Append(cf.Reference.Value).Append(":").Append(cf.Text);
                }
                else
                {

                }
                //cell.CellValue.Remove();

            }

            return true;
        }
        catch {return false; }

    }

    public bool IsSectionLastColumn(string sSectionName)
    {
        bool ret = false;
        if (_CurrentColIndex == _ReportSections[sSectionName].ColEndIndex)
        { ret = true; }
        return ret;
    }

    public bool IsSectionFirstColumn(string sSectionName)
    {
        bool ret = false;
        if (_CurrentColIndex == _ReportSections[sSectionName].ColStartIndex)
        { ret = true; }
        return ret;
    }

    public Cell GetCell()
    {
        try
        {
            return _rData.Descendants<Cell>().ElementAt(_CurrentColIndex);
        }
        catch { return null; }
    }

    public Cell GetCell(string CellReference)
    {
        try
        {
            return (Cell)_rData.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, CellReference, true) == 0).First();
            //sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
        }
        catch { return null; }
    }

    public int ColumnIndex()
    {
        return _CurrentColIndex;
    }
    public Row GetDataRow()
    {
        return _rData;
    }
    public Row GetTypeRow()
    {
        return _rRowType;
    }
    public int GetReportColIndex()
    {
        int ColIndex = 0;

        if (this._CurrentColIndex >= this._ReportSections["INPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["INPUT"].ColEndIndex)
        {
            ColIndex = this._CurrentColIndex - this._ReportSections["INPUT"].ColStartIndex + 1;
        }

        if (this._CurrentColIndex >= this._ReportSections["OUTPUT"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["OUTPUT"].ColEndIndex)
        {
            ColIndex = this._ReportSections["INPUT"].GetColNumber();
            ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["OUTPUT"].ColStartIndex + 1;
        }

        if (this._CurrentColIndex >= this._ReportSections["DISTRIBUTION"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISTRIBUTION"].ColEndIndex)
        {
            ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber();
            ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISTRIBUTION"].ColStartIndex + 1;
        }

        if (this._CurrentColIndex >= this._ReportSections["DISCREPANCY"].ColStartIndex && this._CurrentColIndex <= this._ReportSections["DISCREPANCY"].ColEndIndex)
        {
            ColIndex = this._ReportSections["INPUT"].GetColNumber() + this._ReportSections["OUTPUT"].GetColNumber() + this._ReportSections["DISTRIBUTION"].GetColNumber();
            ColIndex = ColIndex + this._CurrentColIndex - this._ReportSections["DISCREPANCY"].ColStartIndex + 1;
        }

        return ColIndex;
    }
    public string GetColumnName(int ColIndex)
    {
        string CellRef = "";
        try
        {
            CellRef = _rRowType.Descendants<Cell>().ElementAt(ColIndex).CellReference.Value;
            return ExcelNavigator.GetColumnName(CellRef);
        }
        catch { return null; }
    }
    public string GetVariableName()
    {
        //Cell cell = _rVariableName.Descendants<Cell>().ElementAt(_CurrentColIndex);
        //return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        string CellRef = "";
        try
        {
            CellRef = _rRowType.Descendants<Cell>().ElementAt(_CurrentColIndex).CellReference.Value;
            string ColName = ExcelNavigator.GetColumnName(CellRef);
            string VarNameCellRef = ColName + _rVariableName.RowIndex.Value.ToString();
            Cell cell = (Cell)_rVariableName.Descendants<Cell>().Where<Cell>(c => string.Compare(c.CellReference.Value, VarNameCellRef, true) == 0).First();
            return ExcelReader.GetCellValue(cell, _sharedStringTablePart);
        }
        catch { return null; }
    }
}

public class WaterfallReportSection
{
    private string _SectionName;
    private int _ColStartIndex;
    private string _CellStartName;
    private int _ColEndIndex;
    private string _CellEndName;
    private int _FieldsCount;

    public WaterfallReportSection(string sName, int ColStart, string CellStartName, int ColEnd, string CellEndName)
    {
        // check start RowIndex = end RowIndex and start ColIndex > end ColIndex
        this._SectionName = sName;
        this._ColStartIndex = ColStart;
        this._CellStartName = CellStartName;
        this._ColEndIndex = ColEnd;
        this._CellEndName = CellEndName;
    }

    public string SectionName
    {
        get { return this._SectionName; }
        set { this._SectionName = value; }
    }
    public string CellStartName
    {
        get { return this._CellStartName; }
        set { this._CellStartName = value; }
    }
    public string CellEndName
    {
        get { return this._CellEndName; }
        set { this._CellEndName = value; }
    }
    public int ColStartIndex
    {
        get { return this._ColStartIndex; }
        set { this._ColStartIndex = value; }
    }
    public int ColEndIndex
    {
        get { return this._ColEndIndex; }
        set { this._ColEndIndex = value; }
    }
    public string GetSectionRange()
    {
        return this._CellStartName + ":" + this._CellEndName;
    }
    public int GetColNumber()
    {
        return this._ColEndIndex - this._ColStartIndex + 1;
    }
}

public static class ExcelNavigator
{
    public static string GetColumnName(string sCellName)
    {
        Regex regex = new Regex("[A-Za-z]+");
        Match match = regex.Match(sCellName);

        return match.Value;
    }

    public static int GetRowIndex(string sCellName)
    {
        Regex regex = new Regex(@"\d+");
        Match match = regex.Match(sCellName);

        return int.Parse(match.Value);
    }

    public static Row GetRow(SheetData sd, int RowIndex)
    {
        return sd.Descendants<Row>().ElementAt(RowIndex);

    }

    private static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
    {
        /*
        string value = null;

        value = theCell.InnerText;
        if (theCell.DataType != null && theCell.DataType.HasValue)
        {
            if (theCell.DataType.Value == CellValues.SharedString)
            {
                if (sstp != null)
                {
                    value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                }
            }
        }
         */

        return ExcelReader.GetCellValue(theCell, sstp) ;
    }

    public static Cell GetCellByName(SheetData sd, string cellName)
    {
        return sd.Descendants<Cell>().Where(c => string.Compare(c.CellReference.Value, cellName, true) == 0).First();
    }

    public static Cell GetCellByCellValue(SheetData sd, SharedStringTablePart sstp, string CellValue)
    {
        return sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == CellValue).FirstOrDefault();
    }

    public static string GetNextInColCellName(string sCellName)
    {
        return GetColumnName(sCellName) + (GetRowIndex(sCellName) + 1).ToString();
    }

    public static string GetPrevInColCellName(string sCellName)
    {
        return GetColumnName(sCellName) + (GetRowIndex(sCellName) - 1).ToString();
    }

    public static string GetRangeCellNames(SheetData sd, SharedStringTablePart sstp, string sCellValue, int RowIndex)
    {
        StringBuilder sb = new StringBuilder();
        Cell cell;

        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).FirstOrDefault<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString()).Append(":");
        cell = null;
        cell = sd.Descendants<Cell>().Where(c => GetCellValue(c, sstp) == sCellValue).Last<Cell>();
        sb.Append(ExcelNavigator.GetColumnName(cell.CellReference)).Append(RowIndex.ToString());

        return sb.ToString();
    }

    public static Dictionary<string, Cell> GetFilledColumnCellRange(SheetData sd, string StartCellName, out string CellList)
    {
        string sStarCelltColumnName = ExcelNavigator.GetColumnName(StartCellName);
        StringBuilder sb = new StringBuilder();
        int iStartCellRowIndex = ExcelNavigator.GetRowIndex(StartCellName);
        Dictionary<string, Cell> FilledCells = new Dictionary<string, Cell>();


        IEnumerable<Cell> cells = sd.Descendants<Cell>().Where(c => string.Compare(ExcelNavigator.GetColumnName(c.CellReference.Value), sStarCelltColumnName, true) == 0 && ExcelNavigator.GetRowIndex(c.CellReference) > iStartCellRowIndex)
                                                        .OrderBy(r => ExcelNavigator.GetRowIndex(r.CellReference));
        if (cells != null)
        {
            if (cells.Count<Cell>() > 0)
            {
                foreach (Cell c in cells)
                {
                    if (c.CellValue != null)
                    {
                        FilledCells.Add(c.CellReference, c);
                        sb.Append(c.CellReference.Value).Append(";");
                    }
                }
            }
        }
        CellList = sb.ToString();
        return FilledCells;
    }

    public static string GetCellRangeNames(IEnumerable<Cell> cells)
    {
        StringBuilder sb = new StringBuilder();

        if (cells.Count<Cell>() > 0)
        {
            foreach (Cell c in cells)
            {
                if (c.CellValue != null)
                    sb.Append(c.CellReference.Value).Append(";");
            }
        }
        return sb.ToString();
    }
}

public static class ExcelWriter
{
    public static bool UpdateCellValue(SharedStringTablePart sstp, Cell cell, string sValue, string sDataType)
    {
        string val;
        switch (sDataType)
        {
            case "Double":
                cell.CellValue = new CellValue(sValue);
                break;
            case "int":
                cell.CellValue = new CellValue(sValue);
                break;
            case "Currency":
                cell.CellValue = new CellValue(sValue);
                break;
            case "Date":
                cell.CellValue = new CellValue(sValue);
                break;
            case "Boolean":
                if (sValue.ToUpper() == "TRUE") { val = "1"; } else { val = "0"; }
                if ((cell.DataType != null) && (cell.DataType == CellValues.Boolean))
                {
                    cell.CellValue = new CellValue(val);
                }
                else
                {
                    cell.DataType = CellValues.Boolean;
                    cell.CellValue = new CellValue(val);

                }
                break;
            case "string":
                cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                cell.CellValue = new CellValue(InsertSharedStringItem(sstp, sValue).ToString());
                break;
        }

        return true;
    }

    public static int InsertSharedStringItem(SharedStringTablePart sstp, string sValue)
    {
        int i = 0;
        if (sstp != null)
        {
            foreach (SharedStringItem item in sstp.SharedStringTable.Elements<SharedStringItem>())
            {
                if (item.InnerText == sValue) { return i; }
                i++;
            }

        }
        sstp.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(sValue)));
        sstp.SharedStringTable.Save();

        return i;
    }

    public static bool CopyCellStyle(Cell FromCell, Cell ToCell)
    {
        bool ret = true;
        OpenXmlAttribute FromAttr = FromCell.GetAttribute("s", "");
        if (FromAttr != null)
        {
            ToCell.SetAttribute(new OpenXmlAttribute("s", "", FromAttr.Value.ToString()));
        }

        return ret;
    }
}

public static class ExcelReader
{
    public static string GetCellValue(Cell theCell, SharedStringTablePart sstp)
    {
        string value = null;

        if (theCell.CellValue != null)
        {
            value = theCell.CellValue.InnerText;
            if (theCell.DataType != null && theCell.DataType.HasValue)
            {

                if (theCell.DataType.Value == CellValues.SharedString)
                {
                    if (sstp != null)
                    {
                        value = sstp.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                    }
                }
                if (theCell.DataType.Value == CellValues.Date)
                {
                    double dbDate;
                    if (double.TryParse(value, out dbDate))
                    {
                        value = DateTime.FromOADate(dbDate).Date.ToString("dd/MM/yyyy");
                    }
                    
                }
            }
        }

        return value;
    }
}]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.resx]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Settings.get_Default():SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Sett" +
    "ings")]

namespace SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\settings.settings]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\assemblyinfo.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_92fda0c48d7748e1af043a9a182cb066.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_92fda0c48d7748e1af043a9a182cb066.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\properties\resources.designer.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_92fda0c48d7748e1af043a9a182cb066.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\bufferwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes)
        : base(Buffer, BufferColumnIndexes)
    {
    }

    public String VariableName
    {
        set
        {
            this[0] = value;
        }
    }
    public bool VariableName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String VariableValue
    {
        set
        {
            this[1] = value;
        }
    }
    public bool VariableValue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String VariableType
    {
        set
        {
            this[2] = value;
        }
    }
    public bool VariableType_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 VariableSequenceNo
    {
        set
        {
            this[3] = value;
        }
    }
    public bool VariableSequenceNo_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String VariableSetCode
    {
        set
        {
            this[4] = value;
        }
    }
    public bool VariableSetCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int64 DimReportingDateID
    {
        set
        {
            this[5] = value;
        }
    }
    public bool DimReportingDateID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\sc_92fda0c48d7748e1af043a9a182cb066.csproj]]></arrayElement><arrayElement dataType="System.String"><![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>SC_92fda0c48d7748e1af043a9a182cb066.csproj</RootNamespace>
    <AssemblyName>SC_92fda0c48d7748e1af043a9a182cb066.csproj</AssemblyName>
    <ProjectGuid>{086282CE-D56E-4A51-90DB-7FE10E305A18}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.0.5022.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WindowsBase">
      <RequiredTargetFramework>3.0</RequiredTargetFramework>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Compile Include="main.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to the add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptComponent</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement><arrayElement dataType="System.String"><![CDATA[\componentwrapper.cs]]></arrayElement><arrayElement dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == 4)
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]));
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String DimReportingDateID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["DimReportingDateID"].Value);
        }
    }

    public String SheetName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["SheetName"].Value);
        }
    }

    public String StartCellValue
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["StartCellValue"].Value);
        }
    }

    public String TrustID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["TrustID"].Value);
        }
    }

    public String WaterfallTemplateFileName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplateFileName"].Value);
        }
    }

    public String WaterfallTemplatePath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["WaterfallTemplatePath"].Value);
        }
    }

}
]]></arrayElement></arrayElements></property>
<property id="6" name="BinaryCode" dataType="System.String" state="cdata" isArray="true" description="Stores the binary representation of the component" typeConverter="" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="2"><arrayElement dataType="System.String"><![CDATA[\bin\release\sc_92fda0c48d7748e1af043a9a182cb066.csproj.dll]]></arrayElement><arrayElement dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFwst1QAAAAAAAAAAOAAAiELAQgAAFoAAAAIAAAAAAAAjnkA
AAAgAAAAgAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAADAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADR5AABXAAAAAIAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAlFkAAAAgAAAAWgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAgAAAAAYAAABcAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAYgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABw
eQAAAAAAAEgAAAACAAUAiEEAAKw3AAABAAAAAAAAANBAAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzADAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqfgIoFQAACgICcw0AAAZ9BAAABAICcw4AAAZ9BQAABCoGKm4CewYAAAQs
EgJ7BgAABG8jAAAGAhR9BgAABCoAAAATMAUAPAAAAAIAABEWCishBAaUGjMXAgUGmgIEBpQoFgAA
CnMVAAAGfQYAAAQGF1gKBgMy2wJvDAAABgJvCQAABgIoCgAABioGKjoCKA4AAAoCA30HAAAEKjoC
KA4AAAoCA30IAAAEKoICewgAAARvFwAACnKBAABwbxgAAApvGQAACnQnAAABKoICewgAAARvFwAA
CnKnAABwbxgAAApvGQAACnQnAAABKoICewgAAARvFwAACnK7AABwbxgAAApvGQAACnQnAAABKoIC
ewgAAARvFwAACnLZAABwbxgAAApvGQAACnQnAAABKoICewgAAARvFwAACnLpAABwbxgAAApvGQAA
CnQnAAABKoICewgAAARvFwAACnIdAQBwbxgAAApvGQAACnQnAAABKiYCAwQoGgAACiomAhYDKBsA
AAoqWgMsCAIWKBwAAAoqckkBAHBzHQAACnomAhcDKBsAAAoqWgMsCAIXKBwAAAoqckkBAHBzHQAA
CnomAhgDKBsAAAoqWgMsCAIYKBwAAAoqckkBAHBzHQAACno6AhkDjCkAAAEoGwAACipaAywIAhko
HAAACipySQEAcHMdAAAKeiYCGgMoGwAACipaAywIAhooHAAACipySQEAcHMdAAAKejoCGwOMKgAA
ASgbAAAKKloDLAgCGygcAAAKKnJJAQBwcx0AAAp6HgIoHgAACioeAigfAAAKKh4CKCAAAAoqXgNv
IgAACigjAAAKAnsTAAAEKCQAAAoqAzAFAE0BAAAAAAAAAiglAAAKAgJ7BQAABG8PAAAGfQkAAAQC
AnsFAAAEbxIAAAZ9FgAABAICewUAAARvEQAABn0UAAAEAgJ7BQAABG8TAAAGfQoAAAQCAnsFAAAE
bxQAAAZ9CwAABAICewUAAARvEAAABn0TAAAEAgJ7CwAABHLmAQBwAnsKAAAEKCYAAAp9DAAABAIC
ewwAAAQXKCcAAAp9DQAABAICew0AAARvKAAACm8pAAAKbwEAACsC/gYqAAAGcysAAAooAgAAK30O
AAAEAgJ7DgAABG8tAAAKfRIAAAQCew4AAAQtFnLqAQBwAnsTAAAEKC4AAApzLwAACnoCAnsNAAAE
bygAAAoCexIAAAQoIwAACm8wAAAKdAoAAAF9DwAABAICew8AAARvMQAACm8DAAArfRAAAAQCAnsN
AAAEbygAAApvBAAAKygFAAArfREAAAQqAAAAAzACAFcAAAAAAAAAAig1AAAKAnsPAAAEbzEAAApv
NgAACgIUfREAAAQCFH0QAAAEAhR9DwAABAIUfQ4AAAQCew0AAARvNwAACgJ7DQAABG84AAAKAhR9
DQAABAIUfRcAAAQqABMwBwCAAgAAAwAAERcKcjACAHALAnsQAAAEAnsRAAAEAnsUAAAEKFYAAAYM
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
CioAAAEQAAACABYAN00ACgAAAAATMAMAJwEAABgAABEFJQs5HQEAAAdybAUAcCgkAAAKLUkHcnoF
AHAoJAAACi1NB3KCBQBwKCQAAAotUQdyFAUAcCgkAAAKLVUHcpQFAHAoJAAACi1ZB3KkBQBwKCQA
AAo6pgAAADjHAAAAAwRzfAAACm99AAAKOLYAAAADBHN8AAAKb30AAAo4pQAAAAMEc3wAAApvfQAA
CjiUAAAAAwRzfAAACm99AAAKOIMAAAAEb04AAApysgUAcCgkAAAKLAhyvAUAcAorBnLABQBwCgNv
fgAACiwbA29+AAAKKH8AAAotDgMGc3wAAApvfQAACitAAxYogAAACm+BAAAKAwZzfAAACm99AAAK
KyYDGXOCAAAKb4EAAAoDAgQoXgAABgwSAihEAAAKc3wAAApvfQAAChcqABswBQB9AAAAGQAAERYK
AixEAm+DAAAKbxEAACtvhQAACg0rHQlvhgAACgsHb4cAAAoDKCQAAAosBAYM3koGF1gKCW96AAAK
LdveCgksBglvewAACtwCb4MAAAoXjS4AAAETBBEEFgNziAAACqIRBHOJAAAKbxIAACsmAm+DAAAK
bzYAAAoGKggqAAAAARAAAAIAFgApPwAKAAAAABMwBQA2AAAAGgAAERcKAnLEBQBwcjACAHBviwAA
CgsDcsQFAHByMAIAcBIBKIwAAApvTwAACnONAAAKb44AAAoGKgAAEzACAIkAAAAbAAARFAoCb3gA
AAosfQJveAAACm+HAAAKCgJvfgAACixpAm9+AAAKb48AAAosXAJvfgAACm+QAAAKGTMaAywXA2+D
AAAKBihJAAAKKBMAACtvhwAACgoCb34AAApvkAAAChwzJgYSAShVAAAKLBwHKFYAAAoMEgIoVwAA
Cg0SA3IyBQBwKFgAAAoKBioAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVz
b3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVS
ZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHYyLjAuNTA3
MjcAAAAABQBsAAAAaBMAACN+AADUEwAAiBcAACNTdHJpbmdzAAAAAFwrAADIBQAAI1VTACQxAAAQ
AAAAI0dVSUQAAAA0MQAAeAYAACNCbG9iAAAAAAAAAAIAAAFXFaIJCQsAAAD6ATMAFgAAAQAAAFIA
AAATAAAAMQAAAG0AAABXAAAAkAAAABcAAAAbAAAABgAAABsAAAAhAAAADQAAAAEAAAAIAAAAAQAA
AAYAAAATAAAAAAAKAAEAAAAAAAYAHQEWAQoAOQEkAQ4AjwFuAQ4AnwFuAQYAvQGsAQYA7gHZARIA
qwJuARYAOQYYBhYAhQZiBhYAkgYYBhYArwZiBhYAxAYYBhYA8QYBBgYAlwd8BxYAtAdiBhYA+Adi
BgYAKAt8BwYAmAx5DAYA0gzADAYA6QzADAYABg3ADAYAJQ3ADAYAPg3ADAYAVw3ADAYAcg3ADAYA
jQ3ADAYApg3ADAYA3w2/DQYA/w2/DQYAWw5IDgYAeA4WAQYAfQ4WAQYAoQ7ADAoAzQ63DgoA5g63
DgYA+w6/DRoAeQ9RDxoAoA9RDwYAww8WAQYA2w8WAQYA9Q8WAQYA+w8WAQ4AARBuARYAaBAYBhYA
hhBiBhYAnBABBh4AwxAWAR4A1hDKEAYA/hAWARYACBEYBhYAHREYBhYANRFiBhYAahEBBhYAhhEY
BiIA8BHHERYALxJiBgYAVBIWARYAcRIBBhYAihIBBgYAnxIWAQYA3xJ8BwYA7hIWAQYA9RIWARYA
EhNiBhYAPBMBBhYAchMBBhYAfhNiBgoAhhRnFAoAjBRnFAoAkhRnFAYAKRUdFR4A2RXKEAYA9hV8
BxYATQxiBgYAPxYsFgYAVBYWARYAbhZiBhYAkxZiBhYAxBZiBhYA4xZiBhYA9BYBBhYAHxcBBgAA
AAABAAAAAAABAAEAAAAQADkAQwAFAAEAAQAAARAAeQBDAAkAAwAFAAEAEACCAAAADQAEAAgAAQAQ
AJAAAAAFAAcADQABABAAnAAAAAUACAAOAAEAEACmAAAAEQAJABUAAQAQALQAAAAQAAkAJQABABAA
vwAAAAUAGgArAAEAEADPAAAABQAiAEQAgQEQAOYAAAAFACgAUQCBARAA9QAAAAUAKQBdAIEBEAAB
AQAABQApAGAAAwEQAPgTAAAFACkAYQADARAALxQAAAUAKgBjAAMBEACaFAAABQArAGUAAwEQAMEU
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
WwRWAFU8AAAAAIYYCgIbAFcAXTwAAAAAhgByFVsEVwAAAAEAbQsAAAEAcwsAAAIAewsAAAMAhQsA
AAEAjQsAAAEAjQsAAAEAlwsAAAIAngsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEA
bQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAXwoAAAIAsgsAAAEAORAA
AAEAvQsAAAIAwAsAAAMAxAsAAAEAygsAAAIAXwoAAAMA1QsAAAEA2QsAAAEA5gsAAAEA9AsAAAIA
+wsAAAEA5gsAAAEA2QsAAAEA2QsAAAEA5gsAAAEABQwAAAEADgwAAAIAFAwAAAMAawoAAAQAHQwA
AAUAeQoAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAbQsAAAEAJAwAAAEAJAwAAAEAvQsAAAIA
LgwAAAEANwwAAAIAPwwAAAEAvQsAAAIARAwAAAEAvQsAAAIAPwwAAAMATQwAAAEAJAwAAAEAJAwA
AAEAvQsAAAIAPwwAAAMAVwwAAAQALgwAAAEAvQsAAAIAYgwCAAMAcAwAAAEApQwAAAEAsBUAAAEA
PwwAAAIAqwwAAAMA9AsAAAQA+wsAAAEAPwwAAAIA9AsAAAEAsAwAAAIAuQwAAAEANwwAAAIAPwwA
AAEAGRQAAAEAGRQAAAEAGRQAAAEAGRQAAAEAGRQAAAEAGRQAAAEAGRSRAAoCGwCZAAoCdwChAAoC
dwCpAAoCdwCxAAoCdwC5AAoCdwDBAAoCdwDJAAoCdwDRAAoCdwDZAAoCdwDhAAoCgQDpAAoCGwDx
AAoCGwAJAAoCGwD5AI8OnwH5AKoOpwEpAAoCrQERAQoCugEhAQoCGwARAAoCGwAZAAoCGwAZAB0P
zgEZAIoP2AEpAbAP3gExAbkP5QEhAAoCbwAhAMoP6QEhANMPgQBBAQoCdwAhAOAEGwAhAOcEGwAh
APYEiwBZAQoCGwBJADsQ9QFpAEQQ+gE5AVAQAAIZAFkHGwA5AVwQBgJBAGMQDQJBAHUQFAJhAY8Q
GgJxAasQIAIMAAoCOAKBAeEQPgJJAPAQ9QE5AfcQUgKJAQoCdwCRASkRWAJRAD8RXwJxAU0RZQKR
AVsRIAKBAeEQdQIZAGQHGwCpAYERGwCxAZURGwCxAZsRGwAZAAkSgQK5AR8ShwIUALAPmgI5AfcQ
oQLBATgS9QE5AfcQqAI5AUoSrwI5AfcQtQI5AVkSxwJRAV8SzgJpALkPZwBJAWgSZwB5AH0S1QIc
ALkP4gLhAWgSZwA5AVwQ5wJJAaYSNwEUAAoCGwAUAKwSAAOBASsHEgOBAbASHQM5AboSZwAJAGgS
ZwA5AcISAALRAUQQOwMkANASEQGBAdoSdQIsALkPYgPxAV8SfgP5Af4ShQP5AQkTjAP5AWgS+wDB
AR4TxgMBAi4T9QEJAlMTZwABAgoCGwA5AVwTzANpAEQQ0gMBAmQT2AM0AEQQ5wMBApAT8wMJAqAT
dwBxAakT/wM5AbATIQQBAr4TJgQ0ALkP4gIBAs4T1QIBAt4TMQRpAO4TdwA5ARsUYQQ8AAoCOAKB
ASMUcQSBASkUdQIhAgoCdwAhAowUqAQxArkPZwA5AgoCGwA5AqkTxwQkAAoCGwBEAAoCOAKBAe4V
8QRMAAQWGAVUABIW4gLBAR4WKgUkAKwSAANZAksWiwBhApsRGwBRAgoCdwDBAWAWXQXBAXkWZAVc
AEQQeAVcAEQQ5wPBAYYWhAVcAAoCkAVhAKUWnAVxAbsWIAJkAAQWGAVsABIW4gJxAdUWZwCBAgoC
dwB5AgoC/wNxAegWuQVxAQUX1QWJArkPZwCJAgoC3QVxARIX5AWRAjEXiwBcALkP4gIpAJMAwQEu
AFsAUAYuAGMAWQYuABMAAwYuABsAMwYuACMAMwYuACsAMwYuADMAAwYuADsAOQYuAEMAMwZDAGsA
mgFJAJMAwQFhAJsAmgEDAQsBmgHDAZsAmgHjAZsAmgEDApsAmgEjApsAmgFDApsAmgFjApsAmgEB
BZsAmgFABZsAmgGAC5sAmgG1AdQBvQLtAggDKgNCA2cDkgOlA7gDvQMHBDgEiQSYBJ0ErwS9BMIE
zgQwBU4FlgXBBesF+AUCAAEAAwADAAYABAAHAAoACQAWAAoAFwAAAL0BLwAAADwCNAAAAGACQgAA
AGYDawAAAHkDawAAAIMDawAAAJIDawAAAJoDawAAALQDawAAAAIFawAAAA8FjwAAACMFawAAADEF
jwAAAEYFawAAAFMFjwAAAGcFkwAAAHoFjwAAAJQFawAAAKQFjwAAAGYDlwAAALsFjwAAADkJHwEA
AF8KawAAAGsKawAAAHkKawAAAIUKkwAAAJMKkwACAAIAAwACAAMABQABAAQABQACAAUABwACAA8A
CQACABAACwACABEADQACABIADwACABMAEQACABQAEwABABYAFQABABcAFwABABgAGQABABkAGwAB
ABoAHQABABsAHwABABwAIQABAB0AIwABAB4AJQABAB8AJwABACAAKQABACEAKwACACwALQABAEYA
LwACAEUALwACAEcAMQABAEgAMQABAEoAMwACAEkAMwABAEwANQACAEsANQACAE0ANwABAE4ANwAv
ApIC2wJGA1kD3gNoBOgEEQUiBW8FqAWwBQSAAAABAAAAdRUGYgAAAAAAAB0OAAACAAAAAAAAAAAA
AAABAA0BAAAAAAIAAAAAAAAAAAAAAAEAFgEAAAAACgAAAAAAAAAAAAAACgBRAQAAAAAKAAAAAAAA
AAAAAAAKAIoCAAAAAAIAAACeEwAAAAAAAJ4AAQYAAAAACgAAAAAAAAAAAAAACgAuDwAAAAADAAUA
AAAAAAAAAAABALcQAAAAAAoAAAAAAAAAAAAAAAoAoxEAAAAAAAAAAAEAAAA+FwAADgAJAA8ACQAQ
AAsAEQALABIACwATAAsAVQAqAlkAKgJlAGsCZwBwAmkAcAJVAA0DmQANA5sADQOnAE4D2QANA9sA
DQNVALgEmwC4BGkADQOnAA0D6wALBQkBogUVAaIFmwDyBQAAADxNb2R1bGU+AFNDXzkyZmRhMGM0
OGQ3NzQ4ZTFhZjA0M2E5YTE4MmNiMDY2LmNzcHJvai5kbGwAUmVzb3VyY2VzAFNDXzkyZmRhMGM0
OGQ3NzQ4ZTFhZjA0M2E5YTE4MmNiMDY2LmNzcHJvai5Qcm9wZXJ0aWVzAFNldHRpbmdzAFVzZXJD
b21wb25lbnQAQ29ubmVjdGlvbnMAVmFyaWFibGVzAE91dHB1dDBCdWZmZXIAU2NyaXB0TWFpbgBX
YXRlcmZhbGxSZXBvcnQAV2F0ZXJmYWxsUmVwb3J0U2VjdGlvbgBFeGNlbE5hdmlnYXRvcgBFeGNl
bFdyaXRlcgBFeGNlbFJlYWRlcgBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1
cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3Jp
cHQATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAU2NyaXB0Q29tcG9uZW50AFNjcmlw
dEJ1ZmZlcgBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jl
c291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0
YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AEZpbmlzaE91dHB1dHMATWFya091dHB1dHNGaW5pc2hl
ZABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABQaXBlbGluZUJ1ZmZlcgBQcmltZU91
dHB1dABDcmVhdGVOZXdPdXRwdXRSb3dzAFBhcmVudENvbXBvbmVudABnZXRfRGltUmVwb3J0aW5n
RGF0ZUlEAGdldF9TaGVldE5hbWUAZ2V0X1N0YXJ0Q2VsbFZhbHVlAGdldF9UcnVzdElEAGdldF9X
YXRlcmZhbGxUZW1wbGF0ZUZpbGVOYW1lAGdldF9XYXRlcmZhbGxUZW1wbGF0ZVBhdGgARGltUmVw
b3J0aW5nRGF0ZUlEAFNoZWV0TmFtZQBTdGFydENlbGxWYWx1ZQBUcnVzdElEAFdhdGVyZmFsbFRl
bXBsYXRlRmlsZU5hbWUAV2F0ZXJmYWxsVGVtcGxhdGVQYXRoAHNldF9WYXJpYWJsZU5hbWUAc2V0
X1ZhcmlhYmxlTmFtZV9Jc051bGwAc2V0X1ZhcmlhYmxlVmFsdWUAc2V0X1ZhcmlhYmxlVmFsdWVf
SXNOdWxsAHNldF9WYXJpYWJsZVR5cGUAc2V0X1ZhcmlhYmxlVHlwZV9Jc051bGwAc2V0X1Zhcmlh
YmxlU2VxdWVuY2VObwBzZXRfVmFyaWFibGVTZXF1ZW5jZU5vX0lzTnVsbABzZXRfVmFyaWFibGVT
ZXRDb2RlAHNldF9WYXJpYWJsZVNldENvZGVfSXNOdWxsAHNldF9EaW1SZXBvcnRpbmdEYXRlSUQA
c2V0X0RpbVJlcG9ydGluZ0RhdGVJRF9Jc051bGwAQWRkUm93AFNldEVuZE9mUm93c2V0AEVuZE9m
Um93c2V0AFZhcmlhYmxlTmFtZQBWYXJpYWJsZU5hbWVfSXNOdWxsAFZhcmlhYmxlVmFsdWUAVmFy
aWFibGVWYWx1ZV9Jc051bGwAVmFyaWFibGVUeXBlAFZhcmlhYmxlVHlwZV9Jc051bGwAVmFyaWFi
bGVTZXF1ZW5jZU5vAFZhcmlhYmxlU2VxdWVuY2VOb19Jc051bGwAVmFyaWFibGVTZXRDb2RlAFZh
cmlhYmxlU2V0Q29kZV9Jc051bGwARGltUmVwb3J0aW5nRGF0ZUlEX0lzTnVsbABfUmVwb3J0aW5n
RGF0ZQBfc0ZpbGVOYW1lAF9zRmlsZVBhdGgAX3NGaWxlAERvY3VtZW50Rm9ybWF0Lk9wZW5YbWwA
RG9jdW1lbnRGb3JtYXQuT3BlblhtbC5QYWNrYWdpbmcAU3ByZWFkc2hlZXREb2N1bWVudABfc3By
ZWFkc2hlZXREb2N1bWVudABEb2N1bWVudEZvcm1hdC5PcGVuWG1sLlNwcmVhZHNoZWV0AFNoZWV0
AF9zaGVldABXb3Jrc2hlZXRQYXJ0AF93b3Jrc2hlZXRQYXJ0AFNoZWV0RGF0YQBfc2hlZXREYXRh
AFNoYXJlZFN0cmluZ1RhYmxlUGFydABfc2hhcmVkU3RyaW5nVGFibGVQYXJ0AFN0cmluZ1ZhbHVl
AF9zaGVldFJlZmVyZW5jZUlkAF9zU2hlZXROYW1lAF9TdGFydENlbGxWYWx1ZQBDb3VudABfVHJ1
c3RJRABfd3IAX3NJbnB1dFJhbmdlAF9zT3V0cHV0UmFuZ2UAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0
ZQBSZWFkU2VjdGlvbgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBEaWN0aW9uYXJ5YDIAX1Jl
cG9ydFNlY3Rpb25zAFJvdwBfckRhdGEAX3JSb3dUeXBlAF9yRmlyc3REYXRhUm93AF9DdXJyZW50
Q29sSW5kZXgAX3JWYXJpYWJsZU5hbWUAQ2VsbABnZXRfUmVwb3J0U2VjdGlvbnMAR2V0UmVwb3J0
U2VjdGlvbgBNb3ZlVG9OZXh0Um93AE1vdmVUb1ByZXZSb3cATW92ZVRvTmV4dENlbGwATW92ZVRv
UHJldkNlbGwATW92ZVRvU2VjdGlvbkZpcnN0Q2VsbABNb3ZlVG9MYXN0Um93AEdldENlbGxWYWx1
ZQBHZXRWYWx1ZVR5cGUAVXBkYXRlQ2VsbFZhbHVlAENvcHlGb3JtdWxhAElzU2VjdGlvbkxhc3RD
b2x1bW4ASXNTZWN0aW9uRmlyc3RDb2x1bW4AR2V0Q2VsbABDb2x1bW5JbmRleABHZXREYXRhUm93
AEdldFR5cGVSb3cAR2V0UmVwb3J0Q29sSW5kZXgAR2V0Q29sdW1uTmFtZQBHZXRWYXJpYWJsZU5h
bWUAUmVwb3J0U2VjdGlvbnMAX1NlY3Rpb25OYW1lAF9Db2xTdGFydEluZGV4AF9DZWxsU3RhcnRO
YW1lAF9Db2xFbmRJbmRleABfQ2VsbEVuZE5hbWUAX0ZpZWxkc0NvdW50AGdldF9TZWN0aW9uTmFt
ZQBzZXRfU2VjdGlvbk5hbWUAZ2V0X0NlbGxTdGFydE5hbWUAc2V0X0NlbGxTdGFydE5hbWUAZ2V0
X0NlbGxFbmROYW1lAHNldF9DZWxsRW5kTmFtZQBnZXRfQ29sU3RhcnRJbmRleABzZXRfQ29sU3Rh
cnRJbmRleABnZXRfQ29sRW5kSW5kZXgAc2V0X0NvbEVuZEluZGV4AEdldFNlY3Rpb25SYW5nZQBH
ZXRDb2xOdW1iZXIAU2VjdGlvbk5hbWUAQ2VsbFN0YXJ0TmFtZQBDZWxsRW5kTmFtZQBDb2xTdGFy
dEluZGV4AENvbEVuZEluZGV4AEdldFJvd0luZGV4AEdldFJvdwBHZXRDZWxsQnlOYW1lAEdldENl
bGxCeUNlbGxWYWx1ZQBHZXROZXh0SW5Db2xDZWxsTmFtZQBHZXRQcmV2SW5Db2xDZWxsTmFtZQBH
ZXRSYW5nZUNlbGxOYW1lcwBHZXRGaWxsZWRDb2x1bW5DZWxsUmFuZ2UASUVudW1lcmFibGVgMQBH
ZXRDZWxsUmFuZ2VOYW1lcwBJbnNlcnRTaGFyZWRTdHJpbmdJdGVtAENvcHlDZWxsU3R5bGUAdmFs
dWUAT3V0cHV0cwBPdXRwdXRJRHMAQnVmZmVycwBDb21wb25lbnQAQnVmZmVyAEJ1ZmZlckNvbHVt
bkluZGV4ZXMAUmVwb3J0RGF0ZQBzZABzc3QAc3RhcnQAU3RhcnRJbmRleAByb3cAc1NlY3Rpb25O
YW1lAENlbGxSZWZlcmVuY2UAc1ZhbHVlAHNEYXRhVHlwZQBDb2xJbmRleABzTmFtZQBDb2xTdGFy
dABDb2xFbmQAc0NlbGxOYW1lAFJvd0luZGV4AHRoZUNlbGwAc3N0cABjZWxsTmFtZQBDZWxsVmFs
dWUAc0NlbGxWYWx1ZQBTdGFydENlbGxOYW1lAENlbGxMaXN0AFN5c3RlbS5SdW50aW1lLkludGVy
b3BTZXJ2aWNlcwBPdXRBdHRyaWJ1dGUAY2VsbHMAY2VsbABGcm9tQ2VsbABUb0NlbGwAU3lzdGVt
LlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRl
AEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3Nl
bWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21w
aWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRl
AFNDXzkyZmRhMGM0OGQ3NzQ4ZTFhZjA0M2E5YTE4MmNiMDY2LmNzcHJvagBTeXN0ZW0uRGlhZ25v
c3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50
TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBHZXRDb2x1bW5JbmRleGVzAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5X
cmFwcGVyAElEVFNWYXJpYWJsZXMxMDAAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAElEVFNWYXJpYWJs
ZTEwMABnZXRfSXRlbQBnZXRfVmFsdWUAU3RyaW5nAHNldF9JdGVtAFNldE51bGwASW52YWxpZE9w
ZXJhdGlvbkV4Y2VwdGlvbgBJbnQzMgBJbnQ2NABTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2lu
dEF0dHJpYnV0ZQA8UHJlRXhlY3V0ZT5iX18wAHMAZ2V0X05hbWUAb3BfSW1wbGljaXQAb3BfRXF1
YWxpdHkAQ29uY2F0AE9wZW4AV29ya2Jvb2tQYXJ0AGdldF9Xb3JrYm9va1BhcnQAV29ya2Jvb2sA
Z2V0X1dvcmtib29rAE9wZW5YbWxFbGVtZW50AERlc2NlbmRhbnRzAFN5c3RlbS5Db3JlAEZ1bmNg
MgBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAEZpcnN0T3JEZWZhdWx0AGdldF9JZABGb3JtYXQARXhj
ZXB0aW9uAE9wZW5YbWxQYXJ0Q29udGFpbmVyAE9wZW5YbWxQYXJ0AEdldFBhcnRCeUlkAFdvcmtz
aGVldABnZXRfV29ya3NoZWV0AEdldEZpcnN0Q2hpbGQAR2V0UGFydHNPZlR5cGUAT3BlblhtbFBh
cnRSb290RWxlbWVudABTYXZlAE9wZW5YbWxQYWNrYWdlAENsb3NlAERpc3Bvc2UATWljcm9zb2Z0
LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxp
bmUuV3JhcHBlcgBJRFRTQ29tcG9uZW50TWV0YURhdGExMDAAZ2V0X0NvbXBvbmVudE1ldGFEYXRh
AEZpcmVJbmZvcm1hdGlvbgBDZWxsVHlwZQBnZXRfQ2VsbFJlZmVyZW5jZQBTdWJzdHJpbmcAQ2hh
cgBTcGxpdABUcnlQYXJzZQBUb1N0cmluZwBVSW50MzJWYWx1ZQBnZXRfUm93SW5kZXgAT3Blblht
bFNpbXBsZVZhbHVlYDEAVUludDMyAFBhcnNlAEFkZABFbGVtZW50QXQAVG9VcHBlcgBvcF9JbmVx
dWFsaXR5AGdldF9Db3VudABMYXN0AEtleVZhbHVlUGFpcmAyAERvdWJsZQBEYXRlVGltZQBGcm9t
T0FEYXRlAGdldF9EYXRlAENlbGxGb3JtdWxhAGdldF9DZWxsRm9ybXVsYQBnZXRfUmVmZXJlbmNl
AE9wZW5YbWxMZWFmVGV4dEVsZW1lbnQAZ2V0X1RleHQAUmVwbGFjZQBzZXRfUmVmZXJlbmNlAEVu
dW1WYWx1ZWAxAENlbGxGb3JtdWxhVmFsdWVzAHNldF9Gb3JtdWxhVHlwZQBzZXRfVGV4dABBcHBl
bmQASXNOdWxsT3JFbXB0eQBnZXRfRm9ybXVsYVR5cGUAZ2V0X1NoYXJlZEluZGV4AHNldF9TaGFy
ZWRJbmRleABzZXRfVmFsdWUAPD5jX19EaXNwbGF5Q2xhc3M1ADxHZXRDZWxsPmJfXzMAYwBDb21w
YXJlAFdoZXJlAEZpcnN0ADw+Y19fRGlzcGxheUNsYXNzOABWYXJOYW1lQ2VsbFJlZgA8R2V0VmFy
aWFibGVOYW1lPmJfXzcAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAFJlZ2V4AE1hdGNo
AENhcHR1cmUAPD5jX19EaXNwbGF5Q2xhc3MxADxHZXRDZWxsQnlOYW1lPmJfXzAAPD5jX19EaXNw
bGF5Q2xhc3M0ADxHZXRDZWxsQnlDZWxsVmFsdWU+Yl9fMwA8R2V0UmFuZ2VDZWxsTmFtZXM+Yl9f
NgA8R2V0UmFuZ2VDZWxsTmFtZXM+Yl9fNwBTeXN0ZW0uVGV4dABTdHJpbmdCdWlsZGVyADw+Y19f
RGlzcGxheUNsYXNzZABzU3RhckNlbGx0Q29sdW1uTmFtZQBpU3RhcnRDZWxsUm93SW5kZXgAPEdl
dEZpbGxlZENvbHVtbkNlbGxSYW5nZT5iX19hADxHZXRGaWxsZWRDb2x1bW5DZWxsUmFuZ2U+Yl9f
YgByAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGVjAElPcmRlcmVkRW51bWVy
YWJsZWAxAE9yZGVyQnkASUVudW1lcmF0b3JgMQBHZXRFbnVtZXJhdG9yAGdldF9DdXJyZW50AGdl
dF9DZWxsVmFsdWUAU3lzdGVtLkNvbGxlY3Rpb25zAElFbnVtZXJhdG9yAE1vdmVOZXh0AElEaXNw
b3NhYmxlAHNldF9DZWxsVmFsdWUAQ2VsbFZhbHVlcwBnZXRfRGF0YVR5cGUAc2V0X0RhdGFUeXBl
AFNoYXJlZFN0cmluZ1RhYmxlAGdldF9TaGFyZWRTdHJpbmdUYWJsZQBFbGVtZW50cwBTaGFyZWRT
dHJpbmdJdGVtAGdldF9Jbm5lclRleHQAVGV4dABBcHBlbmRDaGlsZABPcGVuWG1sQXR0cmlidXRl
AEdldEF0dHJpYnV0ZQBTZXRBdHRyaWJ1dGUAT3BlblhtbFNpbXBsZVR5cGUAZ2V0X0hhc1ZhbHVl
AFNDXzkyZmRhMGM0OGQ3NzQ4ZTFhZjA0M2E5YTE4MmNiMDY2LmNzcHJvai5Qcm9wZXJ0aWVzLlJl
c291cmNlcy5yZXNvdXJjZXMAAH9TAEMAXwA5ADIAZgBkAGEAMABjADQAOABkADcANwA0ADgAZQAx
AGEAZgAwADQAMwBhADkAYQAxADgAMgBjAGIAMAA2ADYALgBjAHMAcAByAG8AagAuAFAAcgBvAHAA
ZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAJUQAaQBtAFIAZQBwAG8AcgB0AGkAbgBn
AEQAYQB0AGUASQBEAAATUwBoAGUAZQB0AE4AYQBtAGUAAB1TAHQAYQByAHQAQwBlAGwAbABWAGEA
bAB1AGUAAA9UAHIAdQBzAHQASQBEAAAzVwBhAHQAZQByAGYAYQBsAGwAVABlAG0AcABsAGEAdABl
AEYAaQBsAGUATgBhAG0AZQAAK1cAYQB0AGUAcgBmAGEAbABsAFQAZQBtAHAAbABhAHQAZQBQAGEA
dABoAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUA
IABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBl
ACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAA1wAAEVDAG8A
dQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABzAGgAZQBlAHQAIAB3AGkAdABoACAAbgBhAG0AZQAg
AHsAMAB9AAABAEljAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABjAGUAbABsACAAdwBpAHQA
aAAgAHYAYQBsAHUAZQA9ACIAewAwAH0AIgAAM1UAcABkAGEAdABlACAAVwBhAHQAZQByAGYAYQBs
AGwAIAB0AGUAbQBwAGwAYQB0AGUAAEVTAGUAYwB0AGkAbwBuAHMAIABSAGEAbgBnAGUAPQB7ADAA
fQAsAHsAMQB9ACwAewAyAH0ALAB7ADMAfQAsAHsANAB9AAAXUgBFAFAATwBSAFQAIABEAEEAVABF
AAALSQBOAFAAVQBUAAANTwBVAFQAUABVAFQAABlEAEkAUwBUAFIASQBCAFUAVABJAE8ATgAAF0QA
SQBTAEMAUgBFAFAAQQBOAEMAWQAALVIAZQBwAG8AcgB0AFMAZQBjAHQAaQBvAG4AcwAgAGkAcwAg
AE4AVQBMAEwAABN7ADAAfQAgADoAIAB7ADEAfQAAF3sAMAB9AC8AewAxAH0ALwB7ADIAfQAAOUMA
QQBMAEMAVQBMAEEAVABFAEQAIABSAEUAUABPAFIAVAAgAEQAQQBUAEUAIAA9ACAAewAwAH0AAEcg
AFIARQBQAE8AUgBUACAARABBAFQARQAgAD0AIAB7ADAAfQAsACAAQwBlAGwAbABWAGEAbAB1AGUA
IAA9ACAAewAxAH0AAB17ADAAfQAgADoAIAB7ADEAfQAsACAAewAyAH0AAEtzAGUAYwB0AGkAbwBu
ACAAewAwAH0AIABjAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABjAGUAbABsACAAewAxAH0A
IAAgAAAvUgBlAGEAZAAgAFcAYQB0AGUAcgBmAGEAbABsACAAdABlAG0AcABsAGEAdABlAAAnewAw
AH0AIAA6ACAAewAxAH0ALAAgAHsAMgB9ACwAIAB7ADMAfQAAG00ATwBEAEUATAAgAFYARQBSAFMA
SQBPAE4AAAlEAGEAdABlAAATRABhAHQAYQAgAFQAeQBwAGUAABVkAGQALwBNAE0ALwB5AHkAeQB5
AAADOgAAE1sAQQAtAFoAYQAtAHoAXQArAAEHXABkACsAAAM7AAANRABvAHUAYgBsAGUAAAdpAG4A
dAAAEUMAdQByAHIAZQBuAGMAeQAAD0IAbwBvAGwAZQBhAG4AAA1zAHQAcgBpAG4AZwAACVQAUgBV
AEUAAAMxAAADMAAAA3MAAJB/p2rZ2mpHjJHdNkOPmToACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMG
EhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAMGEhQDBhIYAwYS
HAkgAwEIHQgdEh0DBhINBSABARINAyAADgMoAA4HIAIBEh0dCAQgAQEOBCABAQIEIAEBCAQgAQEK
AyAAAgMoAAIDKAAIAygACgIGDggxvzhWrTZONQMGEiEDBhIlAwYSKQMGEi0DBhIxAwYSNQIGCAMG
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
BAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAA
AFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBFADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUA
SQBuAGYAbwAAACwDAAABADAAMAAwADAAMAA0AGIAMAAAAIAAKwABAEYAaQBsAGUARABlAHMAYwBy
AGkAcAB0AGkAbwBuAAAAAABTAEMAXwA5ADIAZgBkAGEAMABjADQAOABkADcANwA0ADgAZQAxAGEA
ZgAwADQAMwBhADkAYQAxADgAMgBjAGIAMAA2ADYALgBjAHMAcAByAG8AagAAAAAAQAAPAAEARgBp
AGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUANAA5ADMALgAyADUAMAA5ADQAAAAAAIAA
LwABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AOQAyAGYAZABhADAAYwA0ADgAZAA3
ADcANAA4AGUAMQBhAGYAMAA0ADMAYQA5AGEAMQA4ADIAYwBiADAANgA2AC4AYwBzAHAAcgBvAGoA
LgBkAGwAbAAAAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMQA0AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAQwBfADkAMgBmAGQAYQAwAGMANAA4AGQANwA3ADQAOABlADEAYQBmADAANAAz
AGEAOQBhADEAOAAyAGMAYgAwADYANgAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAA
cgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AOQAyAGYAZABhADAAYwA0ADgAZAA3ADcANAA4
AGUAMQBhAGYAMAA0ADMAYQA5AGEAMQA4ADIAYwBiADAANgA2AC4AYwBzAHAAcgBvAGoAAAAAAEQA
DwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQA0ADkAMwAuADIANQAw
ADkANAAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NQA0ADkAMwAuADIANQAwADkANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAcAAADAAAAJA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAA==]]></arrayElement></arrayElements></property>
<property id="7" name="VSTAProjectName" dataType="System.String" state="default" isArray="false" description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None">SC_92fda0c48d7748e1af043a9a182cb066</property>
<property id="8" name="ScriptLanguage" dataType="System.String" state="default" isArray="false" description="Specifies the programming language used by the script." typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" UITypeEditor="" containsID="false" expressionType="None">CSharp</property>
<property id="9" name="ReadOnlyVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read-only variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None">User::DimReportingDateID,User::SheetName,User::StartCellValue,User::TrustID,User::WaterfallTemplateFileName,User::WaterfallTemplatePath</property>
<property id="10" name="ReadWriteVariables" dataType="System.String" state="default" isArray="false" description="Specifies a comma-separated list of read/write variables." typeConverter="" UITypeEditor="Microsoft.SqlServer.Dts.Pipeline.ScriptUIVariablePickerDlg, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None"></property>
<property id="11" name="BreakpointCollection" dataType="System.String" state="default" isArray="true" description="List of breakpoints present on the script." typeConverter="NOTBROWSABLE" UITypeEditor="" containsID="false" expressionType="None"><arrayElements arrayElementCount="0"/></property>
<property id="12" name="UserComponentTypeName" dataType="System.String" state="default" isArray="false" description="" typeConverter="" UITypeEditor="" containsID="false" expressionType="None">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property></properties>
<outputs>
<output id="4" name="Output 0" description="" exclusionGroup="0" synchronousInputId="0" deleteOutputOnPathDetached="false" hasSideEffects="true" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="20" name="VariableName" description="" lineageId="20" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="22" name="VariableValue" description="" lineageId="22" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="23" name="VariableType" description="" lineageId="23" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="24" name="VariableSequenceNo" description="" lineageId="24" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="98" name="VariableSetCode" description="" lineageId="98" precision="0" scale="0" length="200" dataType="wstr" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="99" name="DimReportingDateID" description="" lineageId="99" precision="0" scale="0" length="0" dataType="i8" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="101" name="Lookup" componentClassID="{27648839-180F-45E6-838D-AFF53DF682D2}" description="Looks up values in a reference dataset by using exact matching." localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="5" pipelineVersion="0" contactInfo="Lookup;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;5">
<properties>
<property id="104" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="Specifies the SQL statement that generates the lookup table." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="Notify"></property>
<property id="105" name="SqlCommandParam" dataType="System.String" state="default" isArray="false" description="Specifies a SQL statement that uses parameters to generate the lookup table." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="Notify">select * from () [refTable]
where [refTable].[VariableSequenceNo] = ?</property>
<property id="106" name="ConnectionType" dataType="System.Int32" state="default" isArray="false" description="Specifies the type of connection used to access the reference dataset." typeConverter="LookupConnectionType" UITypeEditor="" containsID="false" expressionType="None">1</property>
<property id="108" name="CacheType" dataType="System.Int32" state="default" isArray="false" description="Specifies the cache type of the lookup table." typeConverter="CacheType" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="109" name="NoMatchBehavior" dataType="System.Int32" state="default" isArray="false" description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set." typeConverter="LookupNoMatchBehavior" UITypeEditor="" containsID="false" expressionType="None">1</property>
<property id="110" name="NoMatchCachePercentage" dataType="System.Int32" state="default" isArray="false" description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="111" name="MaxMemoryUsage" dataType="System.Int32" state="default" isArray="false" description="Maximum Memory Usage for Reference Cache on a 32 bit platform." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">25</property>
<property id="112" name="MaxMemoryUsage64" dataType="System.Int64" state="default" isArray="false" description="Maximum Memory Usage for Reference Cache on a 64 bit platform." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">25</property>
<property id="113" name="ReferenceMetadataXml" dataType="System.String" state="default" isArray="false" description="Indicates whether to reference metadata in an XML format." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="VariableSequenceNo" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="VariableSetID" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="VariableSetItemID" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
<property id="114" name="ParameterMap" dataType="System.String" state="default" isArray="false" description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons." typeConverter="" UITypeEditor="" containsID="true" expressionType="None">#24;</property>
<property id="115" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property></properties>
<connections>
<connection id="121" name="CacheConnection" description="Connection manager used to access lookup data." connectionManagerID="{35270CD3-4C05-4D9A-9A4F-43E82DDC69A5}"/></connections>
<inputs>
<input id="102" name="Lookup Input" description="" hasSideEffects="false" dangling="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="122" name="" description="" lineageId="24" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="123" name="JoinToReferenceColumn" dataType="System.String" state="default" isArray="false" description="Specifies the column in the reference table that a column joins." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSequenceNo</property>
<property id="124" name="CopyFromReferenceColumn" dataType="System.Null" state="default" isArray="false" description="Specifies the column in the reference table from which a column is copied." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"/></properties></inputColumn>
</inputColumns><externalMetadataColumns isUsed="False"/></input>
</inputs>
<outputs>
<output id="103" name="Lookup Match Output" description="" exclusionGroup="1" synchronousInputId="102" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="Lookup" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="125" name="VariableSetID" description="" lineageId="125" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Copy Column" errorRowDisposition="NotUsed" truncationRowDisposition="FailComponent" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="126" name="CopyFromReferenceColumn" dataType="System.String" state="default" isArray="false" description="Specifies the column in the reference table from which a column is copied." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetID</property></properties></outputColumn>
<outputColumn id="127" name="VariableSetItemID" description="" lineageId="127" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="0" errorOrTruncationOperation="Copy Column" errorRowDisposition="NotUsed" truncationRowDisposition="FailComponent" externalMetadataColumnId="0" mappedColumnId="0"><properties>
<property id="128" name="CopyFromReferenceColumn" dataType="System.String" state="default" isArray="false" description="Specifies the column in the reference table from which a column is copied." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">VariableSetItemID</property></properties></outputColumn></outputColumns><externalMetadataColumns isUsed="False"/></output>
<output id="116" name="Lookup No Match Output" description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;" exclusionGroup="1" synchronousInputId="102" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="false" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><externalMetadataColumns isUsed="False"/></output>
<output id="117" name="Lookup Error Output" description="" exclusionGroup="1" synchronousInputId="102" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="118" name="ErrorCode" description="" lineageId="118" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="119" name="ErrorColumn" description="" lineageId="119" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
<component id="129" name="OLE DB Destination" componentClassID="{5A0B62E8-D91D-49F5-94A5-7BE58DE508F0}" description="OLE DB Destination" localeId="-1" usesDispositions="true" validateExternalMetadata="True" version="4" pipelineVersion="0" contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4">
<properties>
<property id="130" name="CommandTimeout" dataType="System.Int32" state="default" isArray="false" description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">0</property>
<property id="131" name="OpenRowset" dataType="System.String" state="default" isArray="false" description="Specifies the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">[dbo].[tblFactVariableSet]</property>
<property id="132" name="OpenRowsetVariable" dataType="System.String" state="default" isArray="false" description="Specifies the variable that contains the name of the database object used to open a rowset." typeConverter="" UITypeEditor="" containsID="false" expressionType="None"></property>
<property id="133" name="SqlCommand" dataType="System.String" state="default" isArray="false" description="The SQL command to be executed." typeConverter="" UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" containsID="false" expressionType="None"></property>
<property id="134" name="DefaultCodePage" dataType="System.Int32" state="default" isArray="false" description="Specifies the column code page to use when code page information is unavailable from the data source." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">1252</property>
<property id="135" name="AlwaysUseDefaultCodePage" dataType="System.Boolean" state="default" isArray="false" description="Forces the use of the DefaultCodePage property value when describing character data." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="136" name="AccessMode" dataType="System.Int32" state="default" isArray="false" description="Specifies the mode used to access the database." typeConverter="AccessMode" UITypeEditor="" containsID="false" expressionType="None">3</property>
<property id="138" name="FastLoadKeepIdentity" dataType="System.Boolean" state="default" isArray="false" description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="139" name="FastLoadKeepNulls" dataType="System.Boolean" state="default" isArray="false" description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">false</property>
<property id="140" name="FastLoadOptions" dataType="System.String" state="default" isArray="false" description="Specifies options to be used with fast load.  Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">CHECK_CONSTRAINTS</property>
<property id="141" name="FastLoadMaxInsertCommitSize" dataType="System.Int32" state="default" isArray="false" description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on." typeConverter="" UITypeEditor="" containsID="false" expressionType="None">2147483647</property></properties>
<connections>
<connection id="137" name="OleDbConnection" description="The OLE DB runtime connection used to access the database." connectionManagerID="{8265CC69-2DDE-4CF6-86CA-A61D6AF3A0E4}"/></connections>
<inputs>
<input id="142" name="OLE DB Destination Input" description="" hasSideEffects="true" dangling="false" errorOrTruncationOperation="Insert" errorRowDisposition="FailComponent" truncationRowDisposition="NotUsed"><inputColumns>
<inputColumn id="151" name="" description="" lineageId="99" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="147" mappedColumnId="0"/>
<inputColumn id="152" name="" description="" lineageId="125" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="148" mappedColumnId="0"/>
<inputColumn id="153" name="" description="" lineageId="127" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="149" mappedColumnId="0"/>
<inputColumn id="154" name="" description="" lineageId="22" usageType="readOnly" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="150" mappedColumnId="0"/>
</inputColumns><externalMetadataColumns isUsed="True">
<externalMetadataColumn id="147" name="DimReportingDateId" description="" precision="0" scale="0" length="0" dataType="i8" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="148" name="VariableSetId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="149" name="VariableSetItemId" description="" precision="0" scale="0" length="0" dataType="i4" codePage="0" mappedColumnId="0"/>
<externalMetadataColumn id="150" name="Value" description="" precision="0" scale="0" length="0" dataType="nText" codePage="0" mappedColumnId="0"/></externalMetadataColumns></input>
</inputs>
<outputs>
<output id="143" name="OLE DB Destination Error Output" description="" exclusionGroup="1" synchronousInputId="142" deleteOutputOnPathDetached="false" hasSideEffects="false" dangling="false" isErrorOut="true" isSorted="false" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed"><outputColumns>
<outputColumn id="144" name="ErrorCode" description="" lineageId="144" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="1" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/>
<outputColumn id="145" name="ErrorColumn" description="" lineageId="145" precision="0" scale="0" length="0" dataType="i4" codePage="0" sortKeyPosition="0" comparisonFlags="0" specialFlags="2" errorOrTruncationOperation="" errorRowDisposition="NotUsed" truncationRowDisposition="NotUsed" externalMetadataColumnId="0" mappedColumnId="0"/></outputColumns><externalMetadataColumns isUsed="False"/></output>
</outputs>
</component>
</components>
<paths>
<path id="120" name="Output 0" description="" startId="4" endId="102"/>
<path id="146" name="Lookup Match Output" description="" startId="103" endId="142"/>
</paths></pipeline></DTS:ObjectData></DTS:Executable>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property>
<DTS:Property DTS:Name="DTSID">{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="ObjectName">Save Output And Discrepancy</DTS:Property>
<DTS:Property DTS:Name="DTSID">{093A48B6-FB37-427F-9CA1-549FDEF08F3B}</DTS:Property>
<DTS:Property DTS:Name="Description">Sequence Container</DTS:Property>
<DTS:Property DTS:Name="CreationName">STOCK:SEQUENCE</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">0</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Package End</DTS:Property>
<DTS:Property DTS:Name="DTSID">{e3e67043-53b3-4add-896d-084a328a227d}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_83059d981e574cc5bbf87157e2b358e5" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::RowCount" ReadWriteVariables="User::ActionMessage"><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

namespace ST_848435bfb57946dbb79b15f1e7c27e4c.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            // TODO: Add your code here


            Dts.Variables["ActionMessage"].Value += string.Format("Total rows imported: {0}", Dts.Variables["RowCount"].Value.ToString());

            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Settings.get_Default():ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties.Sett" +
    "ings")]

namespace ST_848435bfb57946dbb79b15f1e7c27e4c.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_848435bfb57946dbb79b15f1e7c27e4c.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_848435bfb57946dbb79b15f1e7c27e4c.csproj")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\st_83059d981e574cc5bbf87157e2b358e5.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><NoStandardLibraries>false</NoStandardLibraries><RootNamespace>ST_848435bfb57946dbb79b15f1e7c27e4c.csproj</RootNamespace><AssemblyName>st_83059d981e574cc5bbf87157e2b358e5</AssemblyName><ProjectGuid>{AFDA0C04-758C-47D3-A559-18565E4D34FA}</ProjectGuid></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}"><ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ScriptTask</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem><BinaryItem Name="\bin\release\st_815a2eea3e644d02ab87873774593f8e.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADG6XVIAAAAAAAAAAOAAAiELAQgAABAAAAAIAAAAAAAAri4A
AAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFQuAABXAAAAAEAAACgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAtA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAACgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACQ
LgAAAAAAAEgAAAACAAUA6CEAAGwMAAABAAAAAAAAADAhAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA0AAAoqEzADAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDgAACm8PAAAKcxAAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqAzAFAFsAAAAAAAAA
AigTAAAKbxQAAApygQAAcG8VAAAKJW8WAAAKcp0AAHACKBMAAApvFAAACnLPAABwbxUAAApvFgAA
Cm8XAAAKKBgAAAooGQAACm8aAAAKAigTAAAKFm8bAAAKKh4CKBwAAAoqGn4GAAAEKi5zCAAABoAG
AAAEKh4CKB4AAAoqAAAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291
cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3
AAAAAAUAbAAAANgDAAAjfgAARAQAAMwFAAAjU3RyaW5ncwAAAAAQCgAA5AAAACNVUwD0CgAAEAAA
ACNHVUlEAAAABAsAAGgBAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAdAAAA
BQAAAAYAAAAJAAAAAQAAAB4AAAACAAAADgAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAAB
AAAAAAAKAAEAAAAAAAYAzwDIAAoAHgH1AAYAOgHIAA4AVAE/AQYAfQFsAQYArgGZAQYAXQJLAgYA
dAJLAgYAkQJLAgYAsAJLAgYAyQJLAgYA4gJLAgYA/QJLAgYAGANLAgYAMQNLAgYAagNKAwYAigNK
AwYA3wPMAwYA/APIAAYAAQTIAAYAJQRLAg4AUQQ7BA4AagQ7BBIAjAR/BAoAmwT1ABYA9ATUBBYA
DAXUBAYAMQXIAAYAXwVKAwAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQABABAAcgB9AAkAAwAF
AAMBAACoAAAADQADAAcAAAEQALYAPAARAAYABwARAI0BEwARALoBFwAGBgkCOQBWgBECPABWgBkC
PAARACECSgBQIAAAAACDGMoBGwABAFggAAAAAJMI0AEfAAEAkSAAAAAAkwjkASQAAQCYIAAAAACT
CPABKQABAKAgAAAAAIYABAIbAAIAByEAAAAAhhjKARsAAgAPIQAAAACWCDECTgACACIhAAAAAIYY
ygEbAAIAFiEAAAAAkRh6BewAAgAAAAEARQI5AMoBWABBAMoBWABJAMoBWABRAMoBWABZAMoBWABh
AMoBWABpAMoBWABxAMoBWAB5AMoBWACBAMoBXQCJAMoBGwCRAMoBGwAJAMoBGwCZABMEYgCZAC4E
aQApAMoBbgCxAMoBegDBAMoBWAARAK0EwwDJAP4EyADRABUFzQDZAB4F0wAJACgF1wDhADgF2wDh
AD8F4QDZAEYF5wDJAFAFXQARAMoBGwDpAMoBGwAhAMoBGwAIABAAQAAIABQARQApAIsAgAAuABMA
IAEuABsAIAEuACMAIAEuAFMAPQEuAAsA8AAuACsA8AAuADsAIAEuAFsARgEuADMAJgFDAGMARQBJ
AIsAgABjAJMAiQDBAOsARQB1AAIAAQAFAAMAAAB9AS8AAAD8ATQAAAA9AlMAAgACAAMAAgADAAUA
AQAEAAUAAgAHAAcABIAAAAEAAACtE/A+AAAAAAAAqAMAAAIAAAAAAAAAAAAAAAEAvwAAAAAACgAA
AAAAAAAAAAAACgDWAAAAAAACAAAAAAAAAAAAAAABAMgAAAAAAAMABQAAAAAAAAAAAAEAfwQAAAAA
CgAAAAAAAAAAAAAACgC1BAAAAAAAAAAAAQAAAIEFAAAEAAMAAAAAAAA8TW9kdWxlPgBzdF84MTVh
MmVlYTNlNjQ0ZDAyYWI4Nzg3Mzc3NDU5M2Y4ZS5kbGwAUmVzb3VyY2VzAFNUXzg0ODQzNWJmYjU3
OTQ2ZGJiNzliMTVmMWU3YzI3ZTRjLmNzcHJvai5Qcm9wZXJ0aWVzAFNjcmlwdE1haW4AU1RfODQ4
NDM1YmZiNTc5NDZkYmI3OWIxNWYxZTdjMjdlNGMuY3Nwcm9qAFNjcmlwdFJlc3VsdHMAU2V0dGlu
Z3MAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdz
QmFzZQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0u
R2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291
cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAE1haW4AdmFsdWVfXwBT
dWNjZXNzAEZhaWx1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAdmFsdWUA
U3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0
ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNl
cwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAHN0XzgxNWEyZWVhM2U2NDRkMDJhYjg3ODczNzc0NTkzZjhlAFN5c3RlbS5EaWFnbm9z
dGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRN
b2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAU3lzdGVt
LkFkZEluAEFkZEluQXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0
LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFy
aWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5n
AFN0cmluZwBGb3JtYXQAQ29uY2F0AHNldF9WYWx1ZQBzZXRfVGFza1Jlc3VsdABDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1RfODQ4NDM1YmZiNTc5NDZkYmI3OWIxNWYxZTdjMjdl
NGMuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAH9TAFQAXwA4ADQAOAA0
ADMANQBiAGYAYgA1ADcAOQA0ADYAZABiAGIANwA5AGIAMQA1AGYAMQBlADcAYwAyADcAZQA0AGMA
LgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA
G0EAYwB0AGkAbwBuAE0AZQBzAHMAYQBnAGUAADFUAG8AdABhAGwAIAByAG8AdwBzACAAaQBtAHAA
bwByAHQAZQBkADoAIAB7ADAAfQAAEVIAbwB3AEMAbwB1AG4AdAAAAAAA2OKH4rKfPEyoTSsqOSxk
NQAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAAS
GQIGCAMGERAEAAAAAAQBAAAAAwYSFAQAABIUBAgAEhQEIAEBDgQgAQEIBgABEk0RUQQgABJVBiAC
AQ4SVQQHARIVBSABARFdCAEAAgAAAAAAOQEAClNjcmlwdE1haW4DAFQOB1ZlcnNpb24DMS4wVA4J
UHVibGlzaGVyAFQOC0Rlc2NyaXB0aW9uAAQgABJlBCAAEmkFIAESbRwDIAAcAyAADgUAAg4OHAUA
Ag4cHAQgAQEcAwAAAS8BACpTVF84NDg0MzViZmI1Nzk0NmRiYjc5YjE1ZjFlN2MyN2U0Yy5jc3By
b2oAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxMwAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9u
RXhjZXB0aW9uVGhyb3dzAQAAAHwuAAAAAAAAAAAAAJ4uAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACQLgAAAAAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACBA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAANADAAAAAAAAAAAAANADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDwPq0TAAABAPA+rRM/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAQwAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAMAwAAAQAwADAA
MAAwADAANABiADAAAACAACsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8AOAA0ADgANAAzADUAYgBmAGIANQA3ADkANAA2AGQAYgBiADcAOQBiADEANQBmADEAZQA3AGMA
MgA3AGUANABjAC4AYwBzAHAAcgBvAGoAAAAAAEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAA
AAAAMQAuADAALgA1ADAAMwA3AC4AMQA2ADEAMQAyAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwA
TgBhAG0AZQAAAHMAdABfADgAMQA1AGEAMgBlAGUAYQAzAGUANgA0ADQAZAAwADIAYQBiADgANwA4
ADcAMwA3ADcANAA1ADkAMwBmADgAZQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkA
cgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQAzAAAAeAAoAAEATwBy
AGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAHMAdABfADgAMQA1AGEAMgBlAGUAYQAzAGUA
NgA0ADQAZAAwADIAYQBiADgANwA4ADcAMwA3ADcANAA1ADkAMwBmADgAZQAuAGQAbABsAAAAeAAr
AAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA4ADQAOAA0ADMANQBiAGYAYgA1ADcA
OQA0ADYAZABiAGIANwA5AGIAMQA1AGYAMQBlADcAYwAyADcAZQA0AGMALgBjAHMAcAByAG8AagAA
AAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADAAMwA3AC4A
MQA2ADEAMQAyAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA1ADAAMwA3AC4AMQA2ADEAMQAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAACwPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 1</DTS:Property>
<DTS:Property DTS:Name="DTSID">{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 2</DTS:Property>
<DTS:Property DTS:Name="DTSID">{AB496C3A-93FE-4100-A8D5-29E61EAAA654}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{e3e67043-53b3-4add-896d-084a328a227d}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 3</DTS:Property>
<DTS:Property DTS:Name="DTSID">{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{85077271-c80f-4698-970f-ba4608fb992a}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E8158A79-71EE-4D9D-914D-0408152A7F52}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="Value">0</DTS:Property>
<DTS:Property DTS:Name="EvalOp">2</DTS:Property>
<DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property>
<DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" DTS:IsFrom="0"/>
<DTS:Property DTS:Name="ObjectName">Constraint 4</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:Property DTS:Name="ObjectName">TrustWaterfall_1</DTS:Property>
<DTS:Property DTS:Name="DTSID">{A1F3915D-0CF5-4E16-BCEB-FF7715A18A37}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Package.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{953F1778-2C92-4497-8E8C-E50B63D706BB}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;TaskHost xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsDataFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="22" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="14764" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="0" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01000000900144420100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Executes a custom script." left="1297" top="3016" logicalid="9" controlid="1" masterid="0" hint1="0" hint2="0" width="5449" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000491500008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/components/1" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Looks up values in a reference dataset by using exact matching." left="1350" top="6323" logicalid="10" controlid="2" masterid="0" hint1="0" hint2="0" width="5344" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000e01400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/components/101" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3622" top="3781" logicalid="11" controlid="3" masterid="0" hint1="0" hint2="0" width="800" height="3042" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/paths/120" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="2" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4021" y="4180" /&gt;
      &lt;point x="4021" y="5251" /&gt;
      &lt;point x="4022" y="5251" /&gt;
      &lt;point x="4022" y="6323" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="OLE DB Destination" left="1429" top="9657" logicalid="12" controlid="4" masterid="0" hint1="0" hint2="0" width="5185" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000411400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/components/129" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3622" top="7088" logicalid="13" controlid="5" masterid="0" hint1="0" hint2="0" width="800" height="3069" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1"&gt;
          &lt;adornment percentpos="50.0230308613542" controlid="9" width="2970" height="344" side="0" behavior="2" himetric="1086" distfromline="175" startobj="0" x="876" y="8053" visible="1" allowoverlap="1" usepercent="1" /&gt;
        &lt;/polyline&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}/paths/146" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="2" destid="4" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4022" y="7487" /&gt;
      &lt;point x="4022" y="8572" /&gt;
      &lt;point x="4021" y="8572" /&gt;
      &lt;point x="4021" y="9657" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Text" left="876" top="8053" logicalid="17" controlid="9" masterid="5" hint1="0" hint2="0" width="2970" height="344" noresize="1" nomove="0" nodefaultattachpoints="1" autodrag="1" usedefaultiddshape="1" selectable="0" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="1" groupcollapsed="0" tabstop="0" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000200009a0b000058010000030000000000050000800800008001000000350001000000900144420100065461686f6d6113004c006f006f006b007500700020004d00610074006300680020004f007500740070007500740000000000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="AnnotationAdornment" value="-1" vartype="11" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsDataFlowDiagram&gt;&lt;dwd:DtsComponentDesignerPropertiesList&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;129	TableInfoObjectType&lt;/dwd:key&gt;&lt;dwd:value xsi:type="xsd:string"&gt;Table&lt;/dwd:value&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;129	DataSourceViewID&lt;/dwd:key&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;101	OverwriteParamsSQLProp&lt;/dwd:key&gt;&lt;dwd:value xsi:type="xsd:boolean"&gt;false&lt;/dwd:value&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;/dwd:DtsComponentDesignerPropertiesList&gt;&lt;/TaskHost&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{4F63F47D-E299-4B78-A0DD-0603B44D264B}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;Output 0&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;Lookup Input&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}-120</DTS:Property>
<DTS:Property DTS:Name="DTSID">{83C3F073-650D-4DCD-A04A-5B9DEC0AF485}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;Lookup Match Output&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;OLE DB Destination Input&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}-146</DTS:Property>
<DTS:Property DTS:Name="DTSID">{45871AE0-EB3C-4CD6-91A1-680DF8C95579}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{FE7DDABA-B9D8-4D7B-A11F-EDB1D44FD517}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{D3B67A84-FD06-41AB-85EE-22DDE1FE0C91}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;TaskHost xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsDataFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="12" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="14764" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="0" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="OLE DB Source" left="1879" top="3016" logicalid="5" controlid="1" masterid="0" hint1="0" hint2="0" width="4286" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000be1000008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}/components/1" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Inserts rows into a cache." left="2091" top="5794" logicalid="6" controlid="2" masterid="0" hint1="0" hint2="0" width="4154" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800003a1000008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}/components/25" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3623" top="3781" logicalid="7" controlid="3" masterid="0" hint1="0" hint2="0" width="945" height="2513" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}/paths/29" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="2" sourceattachpoint="7" destattachpoint="6" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4022" y="4180" /&gt;
      &lt;point x="4022" y="4987" /&gt;
      &lt;point x="4168" y="4987" /&gt;
      &lt;point x="4168" y="5794" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsDataFlowDiagram&gt;&lt;dwd:DtsComponentDesignerPropertiesList&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;1	DataSourceViewID&lt;/dwd:key&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;/dwd:DtsComponentDesignerPropertiesList&gt;&lt;/TaskHost&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{0E3CF704-60B6-42BC-A9CF-53A760E8AA1C}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;OLE DB Source Output&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;Cache Input&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}-29</DTS:Property>
<DTS:Property DTS:Name="DTSID">{DAA398EF-A446-4F81-9503-1D14645F26C2}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingLeft&gt;-53&lt;/dwd:BoundingLeft&gt;&lt;dwd:BoundingTop&gt;-3809&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="31" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="-1053" scrolltop="-4809" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="15690" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="1" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="473" top="-3809" logicalid="15" controlid="1" masterid="0" hint1="0" hint2="0" width="5265" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000911400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{85077271-c80f-4698-970f-ba4608fb992a}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="656" top="13946" logicalid="16" controlid="2" masterid="0" hint1="0" hint2="0" width="5106" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f21300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{e3e67043-53b3-4add-896d-084a328a227d}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="526" top="1191" logicalid="17" controlid="3" masterid="0" hint1="0" hint2="0" width="5159" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000271400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="551" top="3785" logicalid="18" controlid="4" masterid="0" hint1="0" hint2="0" width="5107" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f31300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2705" top="1956" logicalid="19" controlid="5" masterid="0" hint1="0" hint2="0" width="800" height="2329" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="3" destid="4" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="2355" /&gt;
      &lt;point x="3105" y="3070" /&gt;
      &lt;point x="3104" y="3070" /&gt;
      &lt;point x="3104" y="3785" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="688" top="10583" logicalid="20" controlid="6" masterid="7" hint1="0" hint2="0" width="5026" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000a21300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsContainerObjectManagedBridge.2" tooltip="Sequence Container" left="-53" top="6647" logicalid="21" controlid="7" masterid="0" hint1="0" hint2="0" width="6589" height="5821" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000bd190000bd160000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="Caption" value="Save Output And Discrepancy" vartype="8" /&gt;
        &lt;property name="CaptionHeight" value="1164" vartype="3" /&gt;
        &lt;property name="Collapsed" value="0" vartype="11" /&gt;
        &lt;property name="CollapsedWidth" value="7357" vartype="3" /&gt;
        &lt;property name="LogicalObject" value="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" vartype="8" /&gt;
        &lt;property name="RealHeight" value="0" vartype="3" /&gt;
        &lt;property name="RealWidth" value="0" vartype="3" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1605" top="4550" logicalid="22" controlid="8" masterid="0" hint1="0" hint2="0" width="2036" height="2597" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{AB496C3A-93FE-4100-A8D5-29E61EAAA654}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="4" destid="7" sourceattachpoint="5" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2004" y="4949" /&gt;
      &lt;point x="2004" y="6222" /&gt;
      &lt;point x="3241" y="6222" /&gt;
      &lt;point x="3241" y="6647" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2810" top="12069" logicalid="23" controlid="9" masterid="0" hint1="0" hint2="0" width="831" height="2377" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="7" destid="2" sourceattachpoint="11" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3241" y="12468" /&gt;
      &lt;point x="3241" y="13207" /&gt;
      &lt;point x="3209" y="13207" /&gt;
      &lt;point x="3209" y="13946" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="819" top="8339" logicalid="24" controlid="10" masterid="7" hint1="0" hint2="0" width="4815" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000cf1200008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2802" top="9104" logicalid="25" controlid="11" masterid="0" hint1="0" hint2="0" width="824" height="1979" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="10" destid="6" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3226" y="9503" /&gt;
      &lt;point x="3226" y="10043" /&gt;
      &lt;point x="3201" y="10043" /&gt;
      &lt;point x="3201" y="10583" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="479" top="-1204" logicalid="26" controlid="12" masterid="0" hint1="0" hint2="0" width="5345" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000e11400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2706" top="-3044" logicalid="27" controlid="13" masterid="0" hint1="0" hint2="0" width="845" height="2340" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E8158A79-71EE-4D9D-914D-0408152A7F52}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="12" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="-2645" /&gt;
      &lt;point x="3105" y="-1924" /&gt;
      &lt;point x="3151" y="-1924" /&gt;
      &lt;point x="3151" y="-1204" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1652" top="-439" logicalid="28" controlid="14" masterid="0" hint1="0" hint2="0" width="1853" height="2130" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="12" destid="3" sourceattachpoint="5" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2051" y="-40" /&gt;
      &lt;point x="2051" y="883" /&gt;
      &lt;point x="3105" y="883" /&gt;
      &lt;point x="3105" y="1191" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;dwd:PersistedViewPortLeft&gt;-1053&lt;/dwd:PersistedViewPortLeft&gt;&lt;dwd:PersistedViewPortTop&gt;-4809&lt;/dwd:PersistedViewPortTop&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{A1F3915D-0CF5-4E16-BCEB-FF7715A18A37}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{0E495794-FB2C-4EB3-9BDB-52A6EC8D4C95}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{AB496C3A-93FE-4100-A8D5-29E61EAAA654}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{27B70D23-7834-4BCA-AFFB-BC4493BE94D6}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{E8158A79-71EE-4D9D-914D-0408152A7F52}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{5F776D52-0E43-4E87-B47A-5C02785350FE}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PrecedenceConstraint xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:EvalOp&gt;Constraint&lt;/dwd:EvalOp&gt;&lt;/PrecedenceConstraint&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8FF26942-7D46-4565-98BC-807B26826B34}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;TaskHost xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsDataFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="10" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="14764" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="0" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="OLE DB Source" left="1615" top="3016" logicalid="4" controlid="1" masterid="0" hint1="0" hint2="0" width="4814" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000ce1200008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}/components/1" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Executes a custom script." left="1773" top="6746" logicalid="5" controlid="2" masterid="0" hint1="0" hint2="0" width="4497" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000911100008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}/components/31" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3622" top="3781" logicalid="6" controlid="3" masterid="0" hint1="0" hint2="0" width="800" height="3465" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="1" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}/paths/43" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="2" sourceattachpoint="9" destattachpoint="6" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="4022" y="4180" /&gt;
      &lt;point x="4022" y="5463" /&gt;
      &lt;point x="4021" y="5463" /&gt;
      &lt;point x="4021" y="6746" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsDataFlowDiagram&gt;&lt;dwd:DtsComponentDesignerPropertiesList&gt;&lt;dwd:DtsComponentDesignTimeProperty&gt;&lt;dwd:key xsi:type="xsd:string"&gt;1	DataSourceViewID&lt;/dwd:key&gt;&lt;/dwd:DtsComponentDesignTimeProperty&gt;&lt;/dwd:DtsComponentDesignerPropertiesList&gt;&lt;/TaskHost&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{A6B19329-C732-4288-9578-07A6959AD897}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;PipelinePath xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:SourceName&gt;OLE DB Source Output&lt;/dwd:SourceName&gt;&lt;dwd:DestinationName&gt;Input 0&lt;/dwd:DestinationName&gt;&lt;/PipelinePath&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}-43</DTS:Property>
<DTS:Property DTS:Name="DTSID">{A5A2F085-3B8A-4004-B35C-B423890B0767}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingLeft&gt;-53&lt;/dwd:BoundingLeft&gt;&lt;dwd:BoundingTop&gt;-3809&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="31" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="-1053" scrolltop="-4809" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="28284" y="15690" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="1" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="473" top="-3809" logicalid="15" controlid="1" masterid="0" hint1="0" hint2="0" width="5265" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000911400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{85077271-c80f-4698-970f-ba4608fb992a}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="656" top="13946" logicalid="16" controlid="2" masterid="0" hint1="0" hint2="0" width="5106" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f21300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{e3e67043-53b3-4add-896d-084a328a227d}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="526" top="1191" logicalid="17" controlid="3" masterid="0" hint1="0" hint2="0" width="5159" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000271400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{EC65807F-70CF-4B08-A2D5-19AEAE1AF29A}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="551" top="3785" logicalid="18" controlid="4" masterid="0" hint1="0" hint2="0" width="5107" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000f31300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{8DCADC18-2371-4D25-BB20-E7CF8CEBECDF}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2705" top="1956" logicalid="19" controlid="5" masterid="0" hint1="0" hint2="0" width="800" height="2329" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{01AA4520-BE55-43C9-8FF5-7E663DB0BEA5}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="3" destid="4" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="2355" /&gt;
      &lt;point x="3105" y="3070" /&gt;
      &lt;point x="3104" y="3070" /&gt;
      &lt;point x="3104" y="3785" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="688" top="10583" logicalid="20" controlid="6" masterid="7" hint1="0" hint2="0" width="5026" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000a21300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{3C446BDA-C70C-41B4-BB5A-AFA6AE0D52A9}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsContainerObjectManagedBridge.2" tooltip="Sequence Container" left="-53" top="6647" logicalid="21" controlid="7" masterid="0" hint1="0" hint2="0" width="6589" height="5821" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000bd190000bd160000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="Caption" value="Save Output And Discrepancy" vartype="8" /&gt;
        &lt;property name="CaptionHeight" value="1164" vartype="3" /&gt;
        &lt;property name="Collapsed" value="0" vartype="11" /&gt;
        &lt;property name="CollapsedWidth" value="7357" vartype="3" /&gt;
        &lt;property name="LogicalObject" value="{093A48B6-FB37-427F-9CA1-549FDEF08F3B}" vartype="8" /&gt;
        &lt;property name="RealHeight" value="0" vartype="3" /&gt;
        &lt;property name="RealWidth" value="0" vartype="3" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1605" top="4550" logicalid="22" controlid="8" masterid="0" hint1="0" hint2="0" width="2036" height="2597" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{AB496C3A-93FE-4100-A8D5-29E61EAAA654}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="4" destid="7" sourceattachpoint="5" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2004" y="4949" /&gt;
      &lt;point x="2004" y="6222" /&gt;
      &lt;point x="3241" y="6222" /&gt;
      &lt;point x="3241" y="6647" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2810" top="12069" logicalid="23" controlid="9" masterid="0" hint1="0" hint2="0" width="831" height="2377" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{53DC66E3-E88B-4C7E-9833-CC7043FF6A11}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="7" destid="2" sourceattachpoint="11" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3241" y="12468" /&gt;
      &lt;point x="3241" y="13207" /&gt;
      &lt;point x="3209" y="13207" /&gt;
      &lt;point x="3209" y="13946" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Data Flow Task" left="819" top="8339" logicalid="24" controlid="10" masterid="7" hint1="0" hint2="0" width="4815" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000cf1200008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{7DBA1E1F-D39C-4A7A-AEBF-85E0F1A46C1F}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2802" top="9104" logicalid="25" controlid="11" masterid="0" hint1="0" hint2="0" width="824" height="1979" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{60BE09A6-9DD2-4F55-82FC-9FAD1AE330C1}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="10" destid="6" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3226" y="9503" /&gt;
      &lt;point x="3226" y="10043" /&gt;
      &lt;point x="3201" y="10043" /&gt;
      &lt;point x="3201" y="10583" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="479" top="-1204" logicalid="26" controlid="12" masterid="0" hint1="0" hint2="0" width="5345" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000e11400008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{12C3B279-9669-4A7D-B1BF-EFA1141B9AB0}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="2706" top="-3044" logicalid="27" controlid="13" masterid="0" hint1="0" hint2="0" width="845" height="2340" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E8158A79-71EE-4D9D-914D-0408152A7F52}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="1" destid="12" sourceattachpoint="9" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3105" y="-2645" /&gt;
      &lt;point x="3105" y="-1924" /&gt;
      &lt;point x="3151" y="-1924" /&gt;
      &lt;point x="3151" y="-1204" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="1652" top="-439" logicalid="28" controlid="14" masterid="0" hint1="0" hint2="0" width="1853" height="2130" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E9497930-D7A5-40CB-BFC6-D09EBB2DE9E3}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout100" sourceid="12" destid="3" sourceattachpoint="5" destattachpoint="8" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="2051" y="-40" /&gt;
      &lt;point x="2051" y="883" /&gt;
      &lt;point x="3105" y="883" /&gt;
      &lt;point x="3105" y="1191" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;dwd:PersistedViewPortLeft&gt;-1053&lt;/dwd:PersistedViewPortLeft&gt;&lt;dwd:PersistedViewPortTop&gt;-4809&lt;/dwd:PersistedViewPortTop&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">package-diagram</DTS:Property>
<DTS:Property DTS:Name="DTSID">{4625EB05-42FD-4DE2-8EC8-FA686D3C1730}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable></DTS:Executable>